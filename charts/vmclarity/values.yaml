global:
  imageRegistry: ""

apiserver:
  # -- Number of replicas for the API Server
  replicas: 1

  image:
    # -- API Server image registry
    registry: ghcr.io
    # -- API Server image repositiory
    repository: openclarity/vmclarity-apiserver
    # -- API Server image tag (immutable tags are recommended)
    tag: latest
    # -- API Server image pull policy
    pullPolicy: IfNotPresent

  podSecurityContext:
    # -- API Server pod's security context enabled
    enabled: true
    # -- API Server pod's security context fsGroup
    fsGroup: 1001

  containerSecurityContext:
    # -- API Server container security context enabled
    enabled: true
    # -- User ID which the API Server container should run as
    runAsUser: 1001
    # -- Whether the API Server containers should run as a non-root user
    runAsNonRoot: true

  # -- API Server log level
  logLevel: info

  resources:
    # -- The resources limits for the apiserver containers
    limits: {}
    # -- The requested resources for the apiserver containers
    requests: {}

orchestrator:
  # -- Number of replicas for the Orchestrator service
  # Currently 1 supported.
  replicas: 1

  image:
    # -- Orchestrator image registry
    registry: ghcr.io
    # -- Orchestrator image repository
    repository: openclarity/vmclarity-orchestrator
    # -- Orchestrator image tag (immutable tags are recommended)
    tag: latest
    # -- Orchestrator image pull policy
    pullPolicy: IfNotPresent

  podSecurityContext:
    # -- Whether Orchestrator pod security context is enabled
    enabled: true
    # -- Orchestrator pod security context fsGroup
    fsGroup: 1001

  containerSecurityContext:
    # -- Whether Orchestrator container secuirty context is enabled
    enabled: true
    # -- User ID which the Orchestrator container should run as
    runAsUser: 1001
    # -- Whether the Orchestrator containers should as a non-root user
    runAsNonRoot: true

  # -- Orchestrator service log level
  logLevel: info

  resources:
    # -- The resources limits for the orchestrator containers
    limits: {}
    # -- The requested resources for the orchestrator containers
    requests: {}

  # -- Global policy used to determine when to clean up an AssetScan.
  # Possible options are:
  # Always - All AssetScans are cleaned up
  # OnSuccess - Only Successful AssetScans are cleaned up, Failed ones are left for debugging
  # Never - No AssetScans are cleaned up
  deleteJobPolicy: Always

  scannerImage:
    # -- Scanner Container image registry
    registry: ghcr.io
    # -- Scanner Container image repository
    repository: openclarity/vmclarity-cli
    # -- Scanner Container image tag (immutable tags are recommended)
    tag: latest

  # -- Address that scanners can use to reach back to the API server
  scannerApiserverAddress: ""

  # -- Address that scanners can use to reach trivy server
  trivyServerAddress: ""

  # -- Address that scanners can use to reach the grype server
  grypeServerAddress: ""

  # -- Address that scanenrs can use to reach the freshclam mirror
  freshclamMirrorAddress: ""

  # -- Which provider to enable
  provider: "aws"

  aws:
    # -- Region where the control plane is running
    region: ""
    # -- Region where the scanners will be created
    scannerRegion: ""
    # -- Subnet where the scanners will be created
    subnetId: ""
    # -- Security Group to use for the scanner networking
    securityGroupId: ""
    # -- KeyPair to use for the scanner instance
    keypairName: ""
    # -- AMI to use for the scanner instance
    scannerAmiId: ""
    # -- InstanceType to use for the scanner instance
    scannerInstanceType: ""

  gcp:
    # -- Project ID for discovery and scanning
    projectId: ""
    # -- Zone to where the scanner instances should run
    scannerZone: ""
    # -- Subnet where to run the scanner instances
    scannerSubnet: ""
    # -- Scanner Machine type
    scannerMachineType: ""
    # -- Scanner source image
    scannerSourceImage: ""

  azure:
    # -- Subscription ID for discovery and scanning
    subscriptionId: ""
    # -- Location where the scanner instances will be run
    scannerLocation: ""
    # -- ResourceGroup where the scanner instances will be run
    scannerResourceGroup: ""
    # -- Subnet ID where the scanner instances will be run
    scannerSubnetId: ""
    # -- SSH RSA Public Key to configure the scanner instances with
    scannerPublicKey: ""
    # -- Scanner VM size
    scannerVmSize: ""
    # -- Scanner VM source image publisher
    scannerImagePublisher: ""
    # -- Scanner VM source image offer
    scannerImageOffer: ""
    # -- Scanner VM source image sku
    scannerImageSku: ""
    # -- Scanner VM source image version
    scannerImageVersion: ""
    # -- Scanner VM security group
    scannerSecurityGroup: ""
    # -- Storage account to use for transfering snapshots between regions
    scannerStorageAccountName: ""
    # -- Storage container to use for transfering snapshots between regions
    scannerStorageContainerName: ""      

ui:
  replicas: 1

  image:
    registry: ghcr.io
    repository: openclarity/vmclarity-ui
    tag: latest
    pullPolicy: IfNotPresent

  resources:
    # -- The resources limits for the UI containers
    limits: {}
    # -- The requested resources for the UI containers
    requests: {}

  podSecurityContext:
    enabled: false
    fsGroup: 1001

  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true

uibackend:
  replicas: 1

  image:
    registry: ghcr.io
    repository: openclarity/vmclarity-uibackend
    tag: latest
    pullPolicy: IfNotPresent

  resources:
    # -- The resources limits for the UI backend containers
    limits: {}
    # -- The requested resources for the UI backend containers
    requests: {}

  podSecurityContext:
    enabled: true
    fsGroup: 1001

  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true

  logLevel: info

gateway:
  replicas: 1

  image:
    registry: docker.io
    repository: library/nginx
    tag: 1.25.1
    pullPolicy: IfNotPresent

  resources:
    # -- The resources limits for the gateway containers
    limits: {}
    # -- The requested resources for the gateway containers
    requests: {}

  podSecurityContext:
    enabled: false
    fsGroup: 1001

  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true

postgresql:
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 14.6.0-debian-11-r31
    pullPolicy: IfNotPresent

  resources:
    # -- The resources limits for the postgresql containers
    limits: {}
    # -- The requested resources for the postgresql containers
    requests: {}

  auth:
    # existingSecret: vmclarity-postgres-credentials
    username: vmclarity
    password: password1
    database: vmclarity

  podSecurityContext:
    enabled: true
    fsGroup: 1001

  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true

  service:
    ports:
      postgresql: 5432

exploitDBServer:
  replicas: 1

  image:
    registry: ghcr.io
    repository: openclarity/exploit-db-server
    tag: v0.2.3
    pullPolicy: IfNotPresent

  resources:
    # -- The resources limits for the exploit-db-server containers
    limits: {}
    # -- The requested resources for the exploit-db-server containers
    requests: {}

  podSecurityContext:
    enabled: true
    fsGroup: 1001

  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true

trivyServer:
  replicas: 1

  image:
    registry: docker.io
    repository: aquasec/trivy
    tag: 0.41.0
    pullPolicy: IfNotPresent

  resources:
    # -- The resources limits for the trivy server containers
    limits: {}
    # -- The requested resources for the trivy server containers
    requests: {}

  podSecurityContext:
    enabled: true
    fsGroup: 1001

  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true

grypeServer:
  replicas: 1

  image:
    registry: ghcr.io
    repository: openclarity/grype-server
    tag: v0.4.0
    pullPolicy: IfNotPresent

  resources:
    # -- The resources limits for the grype server containers
    limits: {}
    # -- The requested resources for the grype server containers
    requests: {}

  podSecurityContext:
    enabled: true
    fsGroup: 1001

  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true

  logLevel: info

freshclamMirror:
  replicas: 1

  image:
    registry: ghcr.io
    repository: openclarity/freshclam-mirror
    tag: v0.1.0
    pullPolicy: IfNotPresent

  resources:
    # -- The resources limits for the freshclam mirror containers
    limits: {}
    # -- The requested resources for the freshclam mirror containers
    requests: {}

  podSecurityContext:
    enabled: false
    fsGroup: 1001

  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
