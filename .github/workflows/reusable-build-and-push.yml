name: Build & Push

on:
  workflow_call:
    inputs:
      registry_name:
        required: false
        type: string
        description: 'Registry name used for container image names. Default is `ghcr.io/openclarity`.'
        default: ghcr.io/openclarity
      image_tag:
        required: true
        type: string
        description: 'Image tag to build and push.'
      push:
        required: false
        type: boolean
        description: 'If set to true, push the image.'
        default: false
      use_release_repository:
        required: false
        type: boolean
        description: 'If set to true the image is pushed to the release repository otherwise it is pushed to the development.'
        default: false
      post_image_tags:
        required: false
        type: boolean
        description: |
          If set to true the image tags pushed to the repository are posted as comment for the Pull Request.
          Only works if the event type is `pull_request`.
      bake-group:
        required: false
        type: string
        description: 'Name of the Docker Bake group of targets'
        default: default

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
      registry: ${{ steps.registry.outputs.registry }}
      suffix: ${{ steps.suffix.outputs.suffix }}
      targets: ${{ steps.targets.outputs.targets }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set timestamp
        id: timestamp
        run: |
          ##
          ## Set timestamp variable
          ##

          echo "timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_OUTPUT"

      - name: Set registry
        id: registry
        run: |
          ##
          ## Determine the image name registry
          ##

          # Remove trailing slash characters(s)
          # shellcheck disable=SC2001
          echo "registry=$(sed -e 's@/*$@@' <<< ${{ inputs.registry_name }})" >> "$GITHUB_OUTPUT"

      - name: Set suffix
        id: suffix
        run: |
          ##
          ## Determine the image name suffix based on the release type
          ##

          # Set image name suffix
          suffix=-dev
          if [ "${{ inputs.use_release_repository }}" == "true" ]; then
            suffix=
          fi

          echo "suffix=${suffix}" >> "$GITHUB_OUTPUT"

      - name: List targets
        id: targets
        uses: docker/bake-action/subaction/list-targets@v4
        with:
          target: ${{ inputs.bake-group }}

  build-and-push:
    needs:
      - prepare
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.prepare.outputs.targets) }}
    uses: ./.github/workflows/build-and-push-component.yaml
    with:
      image_name: "${{ needs.prepare.outputs.registry }}/${{ matrix.target }}${{ needs.prepare.outputs.suffix }}"
      image_tag: ${{ inputs.image_tag }}
      push: ${{ inputs.push }}
      timestamp: ${{ needs.prepare.outputs.timestamp }}
      bake_target_name: ${{ matrix.target }}
      post_image_tags: ${{ inputs.post_image_tags }}

  post-images:
    if: github.event_name == 'pull_request' && inputs.post_image_tags
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build-and-push
    steps:
      - name: Download image names
        uses: actions/download-artifact@eaceaf801fd36c7dee90939fad912460b18a1ffe # v4.1.2
        with:
          pattern: image-names-${{ github.run_id }}-*
          merge-multiple: true
          path: /tmp/image-names

      - name: Get image names
        run: |
          ##
          ## Cat out the image names from the directory, prefixing (* `) and suffixing (`) them to create
          ## markdown list items and saving this multiline string with base64 encoding to a Github env.
          ##
          ## Example:
          ##
          ## * `ghcr.io/openclarity/vmclarity-apiserver:latest`
          ## * `ghcr.io/openclarity/vmclarity-orchestrator:latest`
          ## * `ghcr.io/openclarity/vmclarity-ui-backend:latest`

          set -o pipefail

          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          {
            echo "image-names<<$EOF"; cat /tmp/image-names/* | sed "s/.*/* \`&\`/"; echo "$EOF"
          } >> "$GITHUB_ENV"

      - name: Post comment with image tags
        uses: marocchino/sticky-pull-request-comment@331f8f5b4215f0445d3c07b4967662a32a2d3e31 # v2.9.0
        with:
          hide_and_recreate: true
          hide_classify: "OUTDATED"
          skip_unchanged: true
          header: image-tags
          message: |
            Hey!

            Your images are ready:
            ${{ env.image-names }}
