name: End-toEnd testing

on:
  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string
        description: 'Image tag to build and push.'
      use_release_repository:
        required: false
        type: boolean
        description: 'If set to true the image published to the release repository is used otherwise the development.'
        default: false

jobs:
  test-vars:
    runs-on: ubuntu-latest
    outputs:
      apiserver-image: ${{ steps.images.outputs.apiserver-image }}
      orchestrator-image: ${{ steps.images.outputs.orchestrator-image }}
      ui-backend-image: ${{ steps.images.outputs.ui-backend-image }}
      ui-image: ${{ steps.images.outputs.ui-image }}
      cli-image: ${{ steps.images.outputs.cli-image }}
    steps:
      - name: Set container image names
        id: images
        run: |
          ##
          ## Determine the image name suffix based on the release type
          ##
  
          registry=ghcr.io/openclarity/
          suffix=-dev
  
          if [ "${{ inputs.use_release_repository }}" == "true" ]; then
            suffix=
          fi
  
          {
            echo "apiserver-image=${registry}vmclarity-apiserver${suffix}"
            echo "orchestrator-image=${registry}vmclarity-orchestrator${suffix}"
            echo "ui-backend-image=${registry}vmclarity-ui-backend${suffix}"
            echo "ui-image=${registry}vmclarity-ui${suffix}"
            echo "cli-image=${registry}vmclarity-cli${suffix}"
          } >> "$GITHUB_OUTPUT"

  e2e:
    runs-on: ubuntu-latest
    needs: test-vars
    steps:
      - name: Run end to end tests
        env:
          DOCKER_TAG: ${{ inputs.image_tag }}
          APIServerContainerImage: ${{ needs.test-vars.outputs.apiserver-image }}
          OrchestratorContainerImage: ${{ needs.test-vars.outputs.orchestrator-image }}
          UIContainerImage: ${{ needs.test-vars.outputs.ui-backend-image }}
          UIBackendContainerImage: ${{ needs.test-vars.outputs.ui-image }}
          ScannerContainerImage: ${{ needs.test-vars.outputs.cli-image }}
        run: |
          cd e2e \
          && go test -v -failfast -test.v -test.paniconexit0 -timeout 2h -ginkgo.v .
