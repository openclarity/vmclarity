name: End-to-End testing

on:
  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string
        description: 'Image tag to build and push.'
      registry_name:
        required: false
        type: string
        description: 'Registry name used for container image names. Default is `ghcr.io/openclarity`.'
        default: ghcr.io/openclarity
      use_release_repository:
        required: false
        type: boolean
        description: 'If set to true the image published to the release repository is used otherwise the development.'
        default: false

jobs:
  images:
    runs-on: ubuntu-latest
    outputs:
      apiserver-image: ${{ steps.images.outputs.apiserver-image }}
      orchestrator-image: ${{ steps.images.outputs.orchestrator-image }}
      ui-backend-image: ${{ steps.images.outputs.ui-backend-image }}
      ui-image: ${{ steps.images.outputs.ui-image }}
      cli-image: ${{ steps.images.outputs.cli-image }}
      cr-discovery-server-image: ${{ steps.images.outputs.cr-discovery-server-image }}
    steps:
      - name: Set container image names
        id: images
        run: |
          ##
          ## Determine the image name suffix based on the release type
          ##

          # Remove trailing slash characters(s)
          # shellcheck disable=SC2001
          registry="$(sed -e 's@/*$@@' <<< ${{ inputs.registry_name }})"

          # Set image name suffix
          suffix=-dev
          if [ "${{ inputs.use_release_repository }}" == "true" ]; then
            suffix=
          fi

          {
            echo "apiserver-image=${registry}/vmclarity-apiserver${suffix}"
            echo "orchestrator-image=${registry}/vmclarity-orchestrator${suffix}"
            echo "ui-backend-image=${registry}/vmclarity-ui-backend${suffix}"
            echo "ui-image=${registry}/vmclarity-ui${suffix}"
            echo "cli-image=${registry}/vmclarity-cli${suffix}"
            echo "cr-discovery-server-image=${registry}/vmclarity-cr-discovery-server${suffix}"
          } >> "$GITHUB_OUTPUT"

  run:
    runs-on: ubuntu-latest
    needs: images
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5
        with:
          # NOTE(chrisgacsal): Use actions/cache for caching Go dependency and build caches
          # as if provides better flexibility like setting the cache key which reduces cache misses significantly.
          cache: false
          go-version-file: '.go-version'

      - name: Setup Go caching
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ github.ref_name }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ github.ref_name }}-
            ${{ runner.os }}-go-${{ github.event.repository.default_branch }}-

      - name: Free up disk space
        run: |
          df -h
          
          # Remove .NET related tooling
          sudo du -sh /usr/share/dotnet
          sudo rm -rf /usr/share/dotnet
          
          # Remove Android related tooling
          sudo du -sh /usr/local/lib/android
          sudo rm -rf /usr/local/lib/android
          
          # Remove CodeQL
          sudo du -sh /opt/hostedtoolcache/CodeQL
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          
          df -h

      - name: Run end to end tests
        env:
          VMCLARITY_E2E_APISERVER_IMAGE:  ${{ format('{0}:{1}', needs.images.outputs.apiserver-image, inputs.image_tag) }}
          VMCLARITY_E2E_ORCHESTRATOR_IMAGE: ${{ format('{0}:{1}', needs.images.outputs.orchestrator-image, inputs.image_tag) }}
          VMCLARITY_E2E_UI_IMAGE: ${{ format('{0}:{1}', needs.images.outputs.ui-image, inputs.image_tag) }}
          VMCLARITY_E2E_UIBACKEND_IMAGE: ${{ format('{0}:{1}', needs.images.outputs.ui-backend-image, inputs.image_tag) }}
          VMCLARITY_E2E_SCANNER_IMAGE: ${{ format('{0}:{1}', needs.images.outputs.cli-image, inputs.image_tag) }}
          VMCLARITY_E2E_CR_DISCOVERY_SERVER_IMAGE: ${{ format('{0}:{1}', needs.images.outputs.cr-discovery-server-image, inputs.image_tag) }}
        run: |
          make e2e
