name: End-to-End testing

on:
  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string
        description: 'Image tag to build and push.'
      use_release_repository:
        required: false
        type: boolean
        description: 'If set to true the image published to the release repository is used otherwise the development.'
        default: false

jobs:
  images:
    uses: ./.github/workflows/reusable-image-names.yml
    with:
      use_release_repository: ${{ inputs.use_release_repository }}

  run:
    runs-on: ubuntu-latest
    needs: images
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5
        with:
          # NOTE(chrisgacsal): Use actions/cache for caching Go dependency and build caches
          # as if provides better flexibility like setting the cache key which reduces cache misses significantly.
          cache: false
          go-version-file: '.go-version'

      - name: Setup Go caching
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ github.ref_name }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ github.ref_name }}-
            ${{ runner.os }}-go-${{ github.event.repository.default_branch }}-

      - name: Run end to end tests
        env:
          VMCLARITY_E2E_APISERVER_IMAGE:  ${{ format('{0}:{1}', needs.images.outputs.apiserver-image, inputs.image_tag) }}
          VMCLARITY_E2E_ORCHESTRATOR_IMAGE: ${{ format('{0}:{1}', needs.images.outputs.orchestrator-image, inputs.image_tag) }}
          VMCLARITY_E2E_UI_IMAGE: ${{ format('{0}:{1}', needs.images.outputs.ui-image, inputs.image_tag) }}
          VMCLARITY_E2E_UIBACKEND_IMAGE: ${{ format('{0}:{1}', needs.images.outputs.ui-backend-image, inputs.image_tag) }}
          VMCLARITY_E2E_SCANNER_IMAGE: ${{ format('{0}:{1}', needs.images.outputs.cli-image, inputs.image_tag) }}
        run: |
          make e2e
