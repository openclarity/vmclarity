name: CI
on:
  pull_request:
  merge_group:

env:
  GO_VERSION: "1.20"

jobs:
  api-verification:
    name: API Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate API code
        run: make gen-api

      # This step will evaluate the repo status and exit if found changes
      # This should detect if the most up-to-date generated API code was pushed
      - name: Changes validation
        run: |
          [[ -z "$(git status --porcelain)" ]] || exit 1

  helm-docs-verification:
    name: Helm Docs Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate Helm Docs
        run: make helm-docs

      # This step will evaluate the repo status and exit if found changes
      # This should detect if the most up-to-date generated helm docs were pushed
      - name: Changes validation
        run: |
          [[ -z "$(git status --porcelain)" ]] || exit 1

  verification:
    needs: api-verification
    name: Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check licenses
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: make license-check

      - name: Setup Cloud Formation Linter with Latest Version
        uses: scottbrenner/cfn-lint-action@v2

      - name: Run verification
        run: make check

  build:
    needs: verification
    name: Build
    uses: ./.github/workflows/reusable-build-and-push.yml
    with:
      image_tag: ${{ github.sha }}
      push: false
      upload: true

  test:
    needs: build
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Load Docker images
        run: |
          ls
          docker load --input vmclarity-apiserver/vmclarity-apiserver.tar
          docker load --input vmclarity-orchestrator/vmclarity-orchestrator.tar
          docker load --input vmclarity-ui-backend/vmclarity-ui-backend.tar
          docker load --input vmclarity-ui/vmclarity-ui.tar
          docker load --input vmclarity-cli/vmclarity-cli.tar
          docker image ls -a

      - name: Run end to end tests
        env:
          DOCKER_TAG: ${{ github.sha }}
          APIServerContainerImage: ghcr.io/openclarity/vmclarity-apiserver:${{ github.sha }}
          OrchestratorContainerImage: ghcr.io/openclarity/vmclarity-orchestrator:${{ github.sha }}
          UIContainerImage: ghcr.io/openclarity/vmclarity-ui:${{ github.sha }}
          UIBackendContainerImage: ghcr.io/openclarity/vmclarity-ui-backend:${{ github.sha }}
          ScannerContainerImage: ghcr.io/openclarity/vmclarity-cli:${{ github.sha }}
        run: cd e2e && go test -v -failfast -test.v -test.paniconexit0 -timeout 2h -ginkgo.v .

  success:
    needs:
      - build
      - helm-docs-verification
    name: Success
    runs-on: ubuntu-latest
    steps:
      - name: Echo Success
        run: |
          echo "::notice Success!"
