name: Release
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  packages: write
  contents: write

jobs:
  verification:
    name: Verification
    uses: ./.github/workflows/reusable-verification.yml
    secrets: inherit

  build_and_push:
    needs: verification
    name: Build & Push
    uses: ./.github/workflows/reusable-build-and-push.yml
    with:
      image_tag: ${{ github.ref_name }}
      push: true
      use_release_repository: true

  main_release:
    needs: build_and_push
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Render cloudformation
        id: render_cloudformation
        run: |
          sed -i -E 's@(ghcr\.io\/openclarity\/vmclarity\-(apiserver|cli|orchestrator|ui-backend|ui)):latest@\1:${{ github.ref_name }}@' \
            installation/aws/VmClarity.cfn

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          # NOTE(chrisgacsal): Use actions/cache for caching Go dependency and build caches
          # as if provides better flexibility like setting the cache key which reduces cache misses significantly.
          cache: false
          go-version-file: 'go.mod'

      - name: Setup Go caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ github.ref_name }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ github.ref_name }}-
            ${{ runner.os }}-go-${{ github.event.repository.default_branch }}-

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: v1.16.0
          args: release --clean --skip-validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # TODO(sambetts) We need to publish a tag in the format "api/<version>" tag
  # so that go mod is able to import the api module without overriding. We need
  # to work out how to do this cleanly from github actions on release so that
  # we don't need to manage it manually. We could do something this which will
  # create another release:
  #
  # api_release:
  #   needs: release
  #   name: Release API Module
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Release API
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         name: VMClarity {{ github.ref }} API
  #         body: See main {{ github.ref }} release for release notes.
  #         tag_name: api/{{ github.ref }}
