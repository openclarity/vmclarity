AWSTemplateFormatVersion: 2010-09-09
Description: |
  VMClarity is a tool for agentless detection and management of Virtual Machine
  Software Bill Of Materials (SBOM) and vulnerabilities
Resources:
  # Create separate VPC to host the VMClarity components and scans so that we
  # keep VM Clarity resources completely separate from the VMs being scanned.
  VmClarity:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: 10.0.0.0/16
  # Subnet for the VmClarityServer and the scanner instances.
  VmClaritySubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VmClarity
      CidrBlock: 10.0.0.0/24
  # VmClarityServer will host the VMClarity services which orcestrate the scans
  # as well as serve the user interface and API
  VmClarityServer:
    Type: "AWS::EC2::Instance"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT7M
        Count: "1"
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref "AWS::Region"
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      KeyName: !Ref KeyName
      IamInstanceProfile:
        Ref: VmClarityServerInstanceProfile
      NetworkInterfaces:
        - GroupSet:
            - !Ref VmClaritySecurityGroup
          AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          DeleteOnTermination: "true"
          SubnetId: !Ref VmClaritySubnet
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            apt-get update -y

            mkdir -p /opt/aws/bin

            wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz

            python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource VmClarityServer --configsets full_install --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource VmClarityServer --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install:
            - install_and_enable_cfn_hup
            - install_vmclarity
        install_and_enable_cfn_hup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content:
                Fn::Sub: |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                Fn::Sub: |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.VmClarityServer.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource VmClarityServer --configsets full_install --region ${AWS::Region}
                  runas=root
            "/lib/systemd/system/cfn-hup.service":
              content: |
                [Unit]
                Description=cfn-hup daemon

                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
        install_vmclarity:
          packages:
            apt:
              docker.io: []
          files:
            "/lib/systemd/system/vmclarity.service":
              content:
                Fn::Sub:
                  - |
                    [Unit]
                    Description=VmClarity
                    After=docker.service
                    Requires=docker.service

                    [Service]
                    TimeoutStartSec=0
                    Restart=always
                    ExecStartPre=-/usr/bin/docker stop %n
                    ExecStartPre=-/usr/bin/docker rm %n
                    ExecStartPre=/usr/bin/mkdir -p /opt/vmclarity
                    # TODO(sambetts) Update to point at VMClarity image
                    ExecStartPre=/usr/bin/docker pull ubuntu
                    # TODO(sambetts) Update to expose VMClarity UI, API ports,
                    # env configurations and remove the sleep command
                    ExecStart=/usr/bin/docker run \
                      --rm --name %n \
                      -p 0.0.0.0:8888:8888/tcp \
                      -v /opt/vmclarity:/data \
                      -e SCANNER_REGION="${AWS::Region}" \
                      -e SCANNER_JOB_SUBNET="${VmClaritySubnet}" \
                      -e SCANNER_JOB_IMAGE_ID="${JobImageID}" \
                      ubuntu sleep infinity

                    [Install]
                    WantedBy=multi-user.target
                  - JobImageID: !FindInMap
                      - AWSRegionArch2AMI
                      - !Ref "AWS::Region"
                      - !FindInMap
                        - AWSInstanceType2Arch
                        - !Ref InstanceType
                        - Arch
          commands:
            01enable_vmclarity:
              command: systemctl enable vmclarity.service
            02start_vmclarity:
              command: systemctl start vmclarity.service
    DependsOn:
      - PublicRoute
  # Allow SSH and HTTP access to the VMClarity server SSH access can be
  # restricted by source CIDR range during installation of the stack through
  # the SSHLocation parameter.
  VmClaritySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VmClarity
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        # TODO(sambetts) Reenable HTTP/HTTPS when we have some kind of
        # authentication built in, for now only expose the UI through an
        # authenticated SSH tunnel.
        #- IpProtocol: tcp
        #  FromPort: 80
        #  ToPort: 80
        #  CidrIp: 0.0.0.0/0
        #- IpProtocol: tcp
        #  FromPort: 443
        #  ToPort: 443
        #  CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
  # Create an Internet Gateway to allow VMClarityServer to talk to the internet
  # and the internet to talk to it for SSH/HTTP.
  VmClarityInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties: {}
  # Attach our VPC to the InternetGateway above
  VmClarityInternetAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VmClarity
      InternetGatewayId: !Ref VmClarityInternetGateway
  # Create a route table to host the routes required for our VPC.
  VmClarityRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VmClarity
  # Associate the route table with our subnet so that VMs in that subnet get
  # the routes from the route table.
  VmClaritySubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref VmClaritySubnet
      RouteTableId: !Ref VmClarityRouteTable
  # Create a route with forwards all non-local traffic to the internet gateway
  # for routing.
  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref VmClarityRouteTable
      GatewayId: !Ref VmClarityInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
    DependsOn:
      - VmClarityInternetAttachment
  # Create a IAM policy which allows the VMClarityServer to perform all the
  # tasks required to discover instances running on the AWS account, snapshot
  # their volumes, and then create the scanner instances with those volumes
  # attached.
  VmClarityServerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: VmClarityServerPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # ##########################
          # Allow snapshots everywhere in the AWS account to ensure that we can
          # snapshot all the VMs. Enforce that we tag those snapshots with the
          # VMClarity Owner tag so that we can control deleting them.
          - Effect: "Allow"
            Action:
              - "ec2:CreateSnapshot"
              - "ec2:CreateSnapshots"
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*"
              - !Sub "arn:aws:ec2:*:${AWS::AccountId}:volume/*"
              - !Sub "arn:${AWS::Partition}:ec2:*::snapshot/*"
            Condition:
              StringEquals:
                "aws:RequestTag/Owner": "VMClarity"
              "ForAllValues:StringEquals":
                "aws:TagKeys":
                  - Owner
          #
          # ##########################

          # ##########################
          # Only allow RunInstances inside of the VMClarity VPC by enforcing
          # that the Subnet the Instance is created in belongs to the VmClarity
          # VPC.
          - Effect: "Allow"
            Action: "ec2:RunInstances"
            Resource: !Sub "arn:aws:ec2:*:${AWS::AccountId}:subnet/*"
            Condition:
              ArnEquals:
                "ec2:Vpc": !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VmClarity}"
          # Force that we tag the instance when we create it, this is so that
          # we can limit the instances we're allow to terminate. Only tag
          # allowed is "Owner" with value "VmClarity".
          - Effect: "Allow"
            Action:
              - "ec2:RunInstances"
              - "ec2:CreateVolume"
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:volume/*"
            Condition:
              StringEquals:
                "aws:RequestTag/Owner": "VMClarity"
              "ForAllValues:StringEquals":
                "aws:TagKeys":
                  - Owner
          # Allow instances to be created with any security group and image in
          # our account and region.
          - Effect: "Allow"
            Action: "ec2:RunInstances"
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*"
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}::image/*"
          #
          # ##########################

          # ##########################
          # Limit CreateTags to just creating an instance, volume or snapshot
          # otherwise we could modify existing resources to allow us to delete
          # them.
          - Effect: "Allow"
            Action: "ec2:CreateTags"
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
              - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*"
              - !Sub "arn:aws:ec2:*:${AWS::AccountId}:volume/*"
              - !Sub "arn:${AWS::Partition}:ec2:*::snapshot/*"
            Condition:
              StringEquals:
                "ec2:CreateAction":
                  - RunInstances
                  - CreateVolume
                  - CreateSnapshot
                  - CreateSnapshots
          #
          # ##########################

          # ##########################
          # Only allow to start, stop and terminate the instances, volumes and
          # snapshots that we created using the tags to identify them.
          - Effect: "Allow"
            Action:
              - "ec2:StartInstances"
              - "ec2:StopInstances"
              - "ec2:TerminateInstances"
              - "ec2:DeleteVolume"
              - "ec2:DeleteSnapshot"
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:volume/*"
              - !Sub "arn:${AWS::Partition}:ec2:*::snapshot/*"
            Condition:
              StringEquals:
                "aws:ResourceTag/Owner": "VMClarity"
          #
          # ##########################

          # ##########################
          # Allow VMClarity to query everything
          - Effect: "Allow"
            Action:
            - "ec2:DescribeImages"
            - "ec2:DescribeInstances"
            - "ec2:DescribeVolumeStatus"
            - "ec2:DescribeVolumes"
            - "ec2:DescribeVolumesModifications"
            - "ec2:DescribeSnapshots"
            - "ec2:DescribeInstanceStatus"
            - "ec2:DescribeVolumeAttribute"
            Resource: "*"
          #
          # ##########################
      Roles:
        - Ref: "VmClarityServerRole"
  # Create a IAM role which will contain the policy above.
  VmClarityServerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  # Create an InstanceProfile which binds the role to the VmClarityServer.
  VmClarityServerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref VmClarityServerRole
Parameters:
  # Provide some choice of instance type, these are all 2 VCPU 8GB RAM systems
  # and should perform similarly.
  InstanceType:
    Description: VmClarity Server Instance Type
    Type: String
    Default: t2.large
    AllowedValues:
      - m6i.large
      - t2.large
      - t3.large
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an EC2 KeyPair to enable SSH access to the instance.
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: "The IP address range that can be used to access the web server using SSH."
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  # For every type we want AWS hardware virtualisation on amd64 (HVM64)
  AWSInstanceType2Arch:
    t2.large:
      Arch: HVM64
    t3.large:
      Arch: HVM64
    m6i.large:
      Arch: HVM64
  # These are all Ubuntu 20.04 LTS AMIs in the different regions.
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-01d08089481510ba2
    us-west-2:
      HVM64: ami-0e6dff8bde9a09539
    us-west-1:
      HVM64: ami-064562725417500be
    eu-west-1:
      HVM64: ami-04e2e94de097d3986
    eu-west-2:
      HVM64: ami-08d3a4ad06c8a70fe
    eu-west-3:
      HVM64: ami-018de3a6e45331551
    eu-central-1:
      HVM64: ami-0d0dd86aa7fe3c8a9
    ap-northeast-1:
      HVM64: ami-0d745f1ee4bb88b89
    ap-northeast-2:
      HVM64: ami-05a5333b72d3d1c93
    ap-northeast-3:
      HVM64: ami-0eb4557358e2c9386
    ap-southeast-1:
      HVM64: ami-0fbb51b4aa5671449
    ap-southeast-2:
      HVM64: ami-030a8d0e06463671c
    ap-south-1:
      HVM64: ami-0340ea71c538887c3
    us-east-2:
      HVM64: ami-0066d036f9777ec38
    ca-central-1:
      HVM64: ami-0ab6f6340b2a4fb77
    sa-east-1:
      HVM64: ami-07e7afb5e1e58e8da
    cn-north-1:
      HVM64: ami-0741e7b8b4fb0001c
    cn-northwest-1:
      HVM64: ami-0883e8062ff31f727
Outputs:
  URL:
    Value: !Sub "${VmClarityServer.PublicIp}"
    Description: VmClarity SSH Address
