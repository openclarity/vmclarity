AWSTemplateFormatVersion: 2010-09-09
Description: |
  VMClarity is a tool for agentless detection and management of Virtual Machine
  Software Bill Of Materials (SBOM) and vulnerabilities
Resources:
  # Create separate VPC to host the VMClarity components and scans so that we
  # keep VM Clarity resources completely separate from the VMs being scanned.
  VmClarityVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: 10.0.0.0/16
  # Subnet for the VmClarityServer. Will be public.
  VmClarityServerSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VmClarityVPC
      CidrBlock: 10.0.0.0/24
  # Subnet for the VmClarityScanners. Will be private.
  VmClarityScannerSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VmClarityVPC
      CidrBlock: 10.0.1.0/24
  # Elastic IP address that will be used to serve the VMClarity UI, API and SSH
  # access.
  VmClarityServerElasticIp:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
  # Elastic IP address that will be used by the NAT gateway to allow the
  # private scanner VMs to access the internet without requiring a public
  # address themselves.
  VmClarityScannerNatElasticIp:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
  # VmClarityServer network interface definition.
  VmClarityServerNetworkInterface:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      GroupSet:
        - !Ref VmClarityServerSecurityGroup
      SubnetId: !Ref VmClarityServerSubnet
  # Associate the VmClarityServer elastic IP address directly to the
  # VMClarityServers private network interface for now. In the future we might
  # want to replace this with a load balancer.
  VmClarityServerEipAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !GetAtt
        - VmClarityServerElasticIp
        - AllocationId
      NetworkInterfaceId: !Ref VmClarityServerNetworkInterface
  # VmClarityServer will host the VMClarity services which orchestrate the scans
  # as well as serve the user interface and API
  VmClarityServer:
    Type: "AWS::EC2::Instance"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT7M
        Count: "1"
    Properties:
      InstanceType: !Ref InstanceType
      Tags:
        - Key: Name
          Value: "VMClarity Server"
        - Key: Owner
          Value: "VMClarity"
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref "AWS::Region"
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: '30'
            DeleteOnTermination: 'true'
            Encrypted: 'false'
      IamInstanceProfile:
        Ref: VmClarityServerInstanceProfile
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref VmClarityServerNetworkInterface
          DeviceIndex: "0"
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            apt-get update -y

            mkdir -p /opt/aws/bin

            wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz

            python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource VmClarityServer --configsets full_install --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource VmClarityServer --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install:
            - install_and_enable_cfn_hup
            - install_vmclarity
        install_and_enable_cfn_hup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content:
                Fn::Sub: |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  interval=5
              mode: "000400"
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                Fn::Sub: |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.VmClarityServer.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource VmClarityServer --configsets full_install --region ${AWS::Region}
                  runas=root
            "/lib/systemd/system/cfn-hup.service":
              content: |
                [Unit]
                Description=cfn-hup daemon

                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
          commands:
            01reload_systemctl:
              command: systemctl daemon-reload
            02enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            03start_restart_cfn_hup:
              command: systemctl restart cfn-hup.service
        install_vmclarity:
          packages:
            apt:
              docker.io: []
          files:
            "/etc/vmclarity/deploy.sh":
              content:
                Fn::Sub: |
                  #!/bin/bash
                  set -euo pipefail

                  # Create the docker network for the VMClarity services if it
                  # doesn't exist.
                  if docker network ls | grep vmclarity; then
                    echo "network already exists"
                  else
                    docker network create vmclarity
                  fi

                  # Reload the systemd daemon to ensure that all the VMClarity
                  # units have been detected.
                  systemctl daemon-reload

                  # Enable and start/restart exploit-db-server
                  systemctl enable exploit-db-server.service
                  systemctl restart exploit-db-server.service

                  # Enable and start/restart trivy server
                  systemctl enable trivy_server.service
                  systemctl restart trivy_server.service

                  # Enable and start/restart grype_server
                  systemctl enable grype_server.service
                  systemctl restart grype_server.service

                  # Enable and start/restart freshclam mirror
                  systemctl enable vmclarity_freshclam_mirror.service
                  systemctl restart vmclarity_freshclam_mirror.service

                  if [ "${DatabaseToUse}" == "Postgresql" ]; then
                    # Enable and start/restart postgres
                    systemctl enable postgres.service
                    systemctl restart postgres.service

                    # Configure the VMClarity backend to use the local postgres
                    # service
                    echo "DATABASE_DRIVER=POSTGRES" >> /etc/vmclarity/config.env
                    echo "DB_NAME=vmclarity" >> /etc/vmclarity/config.env
                    echo "DB_USER=vmclarity" >> /etc/vmclarity/config.env
                    echo "DB_PASS=${PostgresDBPassword}" >> /etc/vmclarity/config.env
                    echo "DB_HOST=postgres.service" >> /etc/vmclarity/config.env
                    echo "DB_PORT_NUMBER=5432" >> /etc/vmclarity/config.env
                  elif [ "${DatabaseToUse}" == "External Postgresql" ]; then
                    # Configure the VMClarity backend to use the postgres
                    # database configured by the user.
                    echo "DATABASE_DRIVER=POSTGRES" >> /etc/vmclarity/config.env
                    echo "DB_NAME=${ExternalDBName}" >> /etc/vmclarity/config.env
                    echo "DB_USER=${ExternalDBUsername}" >> /etc/vmclarity/config.env
                    echo "DB_PASS=${ExternalDBPassword}" >> /etc/vmclarity/config.env
                    echo "DB_HOST=${ExternalDBHost}" >> /etc/vmclarity/config.env
                    echo "DB_PORT_NUMBER=${ExternalDBPort}" >> /etc/vmclarity/config.env
                  elif [ "${DatabaseToUse}" == "SQLite" ]; then
                    # Configure the VMClarity backend to use the SQLite DB
                    # driver and configure the storage location so that it
                    # persists.
                    echo "DATABASE_DRIVER=LOCAL" >> /etc/vmclarity/config.env
                    echo "LOCAL_DB_PATH=/data/vmclarity.db" >> /etc/vmclarity/config.env
                  fi

                  # Replace anywhere in the config.env __BACKEND_REST_HOST__
                  # with the local ipv4 IP address of the VMClarity server.
                  local_ip_address="$(curl http://169.254.169.254/latest/meta-data/local-ipv4)"
                  sed -i "s/__BACKEND_REST_HOST__/${!local_ip_address}/" /etc/vmclarity/config.env

                  # Enable and start/restart VMClarity backend
                  systemctl enable vmclarity.service
                  systemctl restart vmclarity.service
              mode: "000744"
            "/etc/vmclarity/config.env":
              content:
                Fn::Sub:
                  - |
                    AWS_REGION=${AWS::Region}
                    SCANNER_AWS_REGION=${AWS::Region}
                    AWS_SUBNET_ID=${VmClarityScannerSubnet}
                    AWS_SECURITY_GROUP_ID=${VmClarityScannerSecurityGroup}
                    AWS_INSTANCE_TYPE=${ScannerInstanceType}
                    SCANNER_KEY_PAIR_NAME=${KeyName}
                    AWS_JOB_IMAGE_ID=${JobImageID}
                    BACKEND_REST_HOST=__BACKEND_REST_HOST__
                    BACKEND_REST_PORT=8888
                    SCANNER_CONTAINER_IMAGE=${ScannerContainerImage}
                    TRIVY_SERVER_ADDRESS=http://__BACKEND_REST_HOST__:9992
                    GRYPE_SERVER_ADDRESS=__BACKEND_REST_HOST__:9991
                    DELETE_JOB_POLICY=${AssetScanDeletePolicy}
                    ALTERNATIVE_FRESHCLAM_MIRROR_URL=http://__BACKEND_REST_HOST__:1000/clamav
                  - JobImageID: !FindInMap
                      - AWSRegionArch2AMI
                      - !Ref "AWS::Region"
                      - !FindInMap
                        - AWSInstanceType2Arch
                        - !Ref InstanceType
                        - Arch
                    ScannerContainerImage: !If [ScannerContainerImageOverridden, !Ref ScannerContainerImageOverride, "ghcr.io/openclarity/vmclarity-cli:latest"]
              mode: "000644"
            "/etc/vmclarity/service.env":
              content:
                Fn::Sub:
                  - |
                    BACKEND_CONTAINER_IMAGE=${BackendContainerImage}
                    BACKEND_LOG_LEVEL=info
                  - BackendContainerImage: !If [ BackendContainerImageOverridden, !Ref BackendContainerImageOverride, "ghcr.io/openclarity/vmclarity-backend:latest" ]
              mode: "000644"
            "/lib/systemd/system/vmclarity.service":
              content: |
                [Unit]
                Description=VmClarity
                After=docker.service
                Requires=docker.service

                [Service]
                TimeoutStartSec=0
                Restart=always
                EnvironmentFile=/etc/vmclarity/service.env
                ExecStartPre=-/usr/bin/docker stop %n
                ExecStartPre=-/usr/bin/docker rm %n
                ExecStartPre=/usr/bin/mkdir -p /opt/vmclarity
                ExecStartPre=/usr/bin/docker pull ${BACKEND_CONTAINER_IMAGE}
                ExecStart=/usr/bin/docker run \
                  --rm --name %n \
                  --network vmclarity \
                  -p 0.0.0.0:8888:8888/tcp \
                  -v /opt/vmclarity:/data \
                  --env-file /etc/vmclarity/config.env \
                  ${BACKEND_CONTAINER_IMAGE} \
                  run \
                  --log-level ${BACKEND_LOG_LEVEL}

                [Install]
                WantedBy=multi-user.target
              mode: "000644"
            "/lib/systemd/system/exploit-db-server.service":
              content:
                Fn::Sub:
                  - |
                    [Unit]
                    Description=Exploit DB Server
                    After=docker.service
                    Requires=docker.service

                    [Service]
                    TimeoutStartSec=0
                    Restart=always
                    ExecStartPre=-/usr/bin/docker stop %n
                    ExecStartPre=-/usr/bin/docker rm %n
                    ExecStartPre=/usr/bin/mkdir -p /opt/exploits
                    ExecStartPre=/usr/bin/docker pull ${ExploitDBServerContainerImage}
                    ExecStart=/usr/bin/docker run \
                      --rm --name %n \
                      --network vmclarity \
                      -p 0.0.0.0:1326:1326/tcp \
                      -v /opt/exploits:/vuls \
                      ${ExploitDBServerContainerImage}

                    [Install]
                    WantedBy=multi-user.target
                  - ExploitDBServerContainerImage: !If [ExploitDBServerContainerImageOverridden, !Ref ExploitDBServerContainerImageOverride, "ghcr.io/openclarity/exploit-db-server:v0.1.2"]
              mode: "000644"
            "/etc/trivy-server/config.env":
              content: |
                TRIVY_LISTEN=0.0.0.0:9992
                TRIVY_CACHE_DIR=/home/scanner/.cache/trivy
              mode: "000644"
            "/lib/systemd/system/trivy_server.service":
              content:
                Fn::Sub:
                  - |
                    [Unit]
                    Description=Trivy Server
                    After=docker.service
                    Requires=docker.service

                    [Service]
                    TimeoutStartSec=0
                    Restart=always
                    ExecStartPre=-/usr/bin/docker stop %n
                    ExecStartPre=-/usr/bin/docker rm %n
                    ExecStartPre=/usr/bin/mkdir -p /opt/trivy-server
                    ExecStartPre=/usr/bin/docker pull ${TrivyServerContainerImage}
                    ExecStart=/usr/bin/docker run \
                      --rm --name %n \
                      --network vmclarity \
                      -p 0.0.0.0:9992:9992/tcp \
                      -v /opt/trivy-server:/home/scanner/.cache \
                      --env-file /etc/trivy-server/config.env \
                      ${TrivyServerContainerImage} server

                    [Install]
                    WantedBy=multi-user.target
                  - TrivyServerContainerImage: !If [TrivyServerContainerImageOverridden, !Ref TrivyServerContainerImageOverride, "docker.io/aquasec/trivy:0.41.0"]
              mode: "000644"
            "/etc/grype-server/config.env":
              content: |
                DB_ROOT_DIR=/opt/grype-server/db
              mode: "000644"
            "/lib/systemd/system/grype_server.service":
              content:
                Fn::Sub:
                  - |
                    [Unit]
                    Description=Grype Server
                    After=docker.service
                    Requires=docker.service

                    [Service]
                    TimeoutStartSec=0
                    Restart=always
                    ExecStartPre=-/usr/bin/docker stop %n
                    ExecStartPre=-/usr/bin/docker rm %n
                    ExecStartPre=/usr/bin/mkdir -p /opt/grype-server
                    ExecStartPre=/usr/bin/chown -R 1000:1000 /opt/grype-server
                    ExecStartPre=/usr/bin/docker pull ${GrypeServerContainerImage}
                    ExecStart=/usr/bin/docker run \
                      --rm --name %n \
                      --network vmclarity \
                      -p 0.0.0.0:9991:9991/tcp \
                      -v /opt/grype-server:/opt/grype-server \
                      --env-file /etc/grype-server/config.env \
                      ${GrypeServerContainerImage} run --log-level warning

                    [Install]
                    WantedBy=multi-user.target
                  - GrypeServerContainerImage: !If [GrypeServerContainerImageOverridden, !Ref GrypeServerContainerImageOverride, "ghcr.io/openclarity/grype-server:v0.2.0"]
              mode: "000644"
            "/lib/systemd/system/vmclarity_freshclam_mirror.service":
              content:
                Fn::Sub:
                  - |
                    [Unit]
                    Description=Deploys the freshclam mirror service
                    After=docker.service
                    Requires=docker.service

                    [Service]
                    TimeoutStartSec=0
                    Restart=always
                    ExecStartPre=-/usr/bin/docker stop %n
                    ExecStartPre=-/usr/bin/docker rm %n
                    ExecStartPre=/usr/bin/docker pull ${FreshclamMirrorContainerImage}
                    ExecStart=/usr/bin/docker run \
                      --rm --name %n \
                      --network vmclarity \
                      -p 0.0.0.0:1000:80/tcp \
                      ${FreshclamMirrorContainerImage}

                    [Install]
                    WantedBy=multi-user.target
                  - FreshclamMirrorContainerImage: !If [FreshclamMirrorContainerImageOverridden, !Ref FreshclamMirrorContainerImageOverride, "ghcr.io/openclarity/freshclam-mirror:v0.1.0"]
              mode: "000644"
            "/lib/systemd/system/postgres.service":
              content:
                Fn::Sub:
                  - |
                    [Unit]
                    Description=Postgresql Database Server
                    After=docker.service
                    Requires=docker.service

                    [Service]
                    TimeoutStartSec=0
                    Restart=always
                    ExecStartPre=-/usr/bin/docker stop %n
                    ExecStartPre=-/usr/bin/docker rm %n
                    ExecStartPre=/usr/bin/docker pull ${PostgresqlContainerImage}
                    ExecStart=/usr/bin/docker run \
                      --rm --name %n \
                      --network vmclarity \
                      -e POSTGRESQL_USERNAME=vmclarity \
                      -e POSTGRESQL_PASSWORD=${PostgresDBPassword} \
                      -e POSTGRESQL_DATABASE=vmclarity \
                      -p 127.0.0.1:5432:5432/tcp \
                      ${PostgresqlContainerImage}

                    [Install]
                    WantedBy=multi-user.target
                  - PostgresqlContainerImage: !If [PostgresqlContainerImageOverridden, !Ref PostgresqlContainerImageOverride, "bitnami/postgresql:12.14.0-debian-11-r28"]
              mode: "000644"
          commands:
            01deploy_vmclarity:
              command: /etc/vmclarity/deploy.sh

    DependsOn:
      - VmClarityServerPublicRoute
  # Create a Security Group for the VMClarity server. Allow on the public
  # address, SSH access can be restricted by source CIDR range during
  # installation of the stack through the SSHLocation parameter.
  # TODO(sambetts) Enable HTTP access from the public address for the UI and
  # API
  VmClarityServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VmClarityVPC
      GroupDescription: Allow only required network traffic for VMClarity server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
  # Create a Security Group for the VMClarity scanner VMs. Restrict all ingress
  # except SSH access from the VMClarityServerSecurityGroup, the
  # VMClarityServer can act as a bastion for debugging the scanners.
  VmClarityScannerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VmClarityVPC
      GroupDescription: Allow only required network traffic for VMClarity scanners
  # Allow the VMClarity Server in the VmClarityScannerSecurityGroup to access
  # the Scanner VMs through SSH by adding an ingress rule to the
  # VmClarityScannerSecurityGroup.
  VmClarityScannerSecurityGroupServerIngressToSSH:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref VmClarityScannerSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref VmClarityServerSecurityGroup
  # Allow the Scanner VMs in the VmClarityScannerSecurityGroup to access the
  # VMClarity server API on 8888 by adding an ingress rule to the
  # VmClarityServerSecurityGroup.
  VmClarityServerSecurityGroupScannerIngressToAPI:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref VmClarityServerSecurityGroup
      IpProtocol: tcp
      FromPort: 8888
      ToPort: 8888
      SourceSecurityGroupId: !Ref VmClarityScannerSecurityGroup
  # Allow the Scanner VMs in the VmClarityScannerSecurityGroup to access the
  # Exploits DB server on port 1326 by adding an ingress rule to the
  # VmClarityServerSecurityGroup.
  VmClarityServerSecurityGroupScannerIngressToExploitDB:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref VmClarityServerSecurityGroup
      IpProtocol: tcp
      FromPort: 1326
      ToPort: 1326
      SourceSecurityGroupId: !Ref VmClarityScannerSecurityGroup
  # Allow the Scanner VMs in the VmClarityScannerSecurityGroup to access the
  # Trivy Server on port 9992 by adding an ingress rule to the
  # VmClarityServerSecurityGroup.
  VmClarityServerSecurityGroupScannerIngressToTrivyServer:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref VmClarityServerSecurityGroup
      IpProtocol: tcp
      FromPort: 9992
      ToPort: 9992
      SourceSecurityGroupId: !Ref VmClarityScannerSecurityGroup
  # Allow the Scanner VMs in the VmClarityScannerSecurityGroup to access the
  # Grype Server on port 9992 by adding an ingress rule to the
  # VmClarityServerSecurityGroup.
  VmClarityServerSecurityGroupScannerIngressToGrypeServer:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref VmClarityServerSecurityGroup
      IpProtocol: tcp
      FromPort: 9991
      ToPort: 9991
      SourceSecurityGroupId: !Ref VmClarityScannerSecurityGroup
  # Allow the Scanner VMs in the VmClarityScannerSecurityGroup to access the
  # FreshClam mirror on port 1000 by adding an ingress rule to the
  # VmClarityServerSecurityGroup.
  VmClarityServerSecurityGroupScannerIngressToFreshClamMirror:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref VmClarityServerSecurityGroup
      IpProtocol: tcp
      FromPort: 1000
      ToPort: 1000
      SourceSecurityGroupId: !Ref VmClarityScannerSecurityGroup

  # Create an Internet Gateway to allow VMClarityServer to talk to the internet
  # and the internet to talk to it for SSH/HTTP.
  VmClarityServerInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties: {}
  # Attach our VPC to the InternetGateway above
  VmClarityServerInternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VmClarityVPC
      InternetGatewayId: !Ref VmClarityServerInternetGateway
  # Create a route table to host the routes required for our VPC.
  VmClarityServerRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VmClarityVPC
  # Associate the route table with our subnet so that VMs in that subnet get
  # the routes from the route table.
  VmClarityServerSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref VmClarityServerSubnet
      RouteTableId: !Ref VmClarityServerRouteTable
  # Create a route with forwards all non-local traffic to the internet gateway
  # for routing.
  VmClarityServerPublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref VmClarityServerRouteTable
      GatewayId: !Ref VmClarityServerInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
    DependsOn:
      - VmClarityServerInternetGatewayAttachment

  # Create a NAT gateway to allow VMClarity Scanner instances to access the
  # internet without needing an internet routable IP address. This goes into
  # the VmClarityServerSubnet so that it has public access to the internet.
  VmClarityScannerNatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt
        - VmClarityScannerNatElasticIp
        - AllocationId
      SubnetId: !Ref VmClarityServerSubnet
  # Create route table for VMClarity Scanner instances to access the NAT
  # gateway
  VmClarityScannerNatRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VmClarityVPC
  # Create route rule the pushes all non-local traffic to the NAT gateway for
  # routing.
  VMClarityScannerNatRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref VmClarityScannerNatRouteTable
      NatGatewayId: !Ref VmClarityScannerNatGateway
      DestinationCidrBlock: 0.0.0.0/0
  # Associate the VMClarity Scanner subnet with the Scanner route table that
  # goes to the NAT gateway.
  VmClarityScannerSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref VmClarityScannerSubnet
      RouteTableId: !Ref VmClarityScannerNatRouteTable

  # Create a IAM policy which allows the VMClarityServer to perform all the
  # tasks required to discover instances running on the AWS account, snapshot
  # their volumes, and then create the scanner instances with those volumes
  # attached.
  VmClarityServerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: VmClarityServerPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # ##########################
          # Allow snapshots everywhere in the AWS account to ensure that we can
          # snapshot all the VMs. Enforce that we tag those snapshots with the
          # VMClarity Owner tag so that we can control deleting them.
          - Effect: "Allow"
            Action: "ec2:CreateSnapshot"
            Resource: !Sub "arn:aws:ec2:*:${AWS::AccountId}:volume/*"
          - Effect: "Allow"
            Action: "ec2:CreateSnapshot"
            Resource: !Sub "arn:${AWS::Partition}:ec2:*::snapshot/*"
            Condition:
              StringEquals:
                "aws:RequestTag/Owner": "VMClarity"
              "ForAllValues:StringEquals":
                "aws:TagKeys":
                  - Owner
          #
          # ##########################

          # ##########################
          # Allow copying snapshots to the VMClarity Server region for
          # scanning. Only allow copy if the copy will have the VMClarity Owner
          # tag.
          # TODO(sambetts) Only allow us to copy snapshots which have the
          # OwnerVMClarity tag.
          - Effect: "Allow"
            Action: "ec2:CopySnapshot"
            Resource: !Sub "arn:${AWS::Partition}:ec2:*::snapshot/*"
            Condition:
              StringEquals:
                "aws:RequestTag/Owner": "VMClarity"
              "ForAllValues:StringEquals":
                "aws:TagKeys":
                  - Owner
          #
          # ##########################

          # ##########################
          # Only allow RunInstances inside of the VMClarity VPC by enforcing
          # that the Subnet the Instance is created in belongs to the VmClarity
          # VPC.
          - Effect: "Allow"
            Action: "ec2:RunInstances"
            Resource: !Sub "arn:aws:ec2:*:${AWS::AccountId}:subnet/*"
            Condition:
              ArnEquals:
                "ec2:Vpc": !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VmClarityVPC}"
          # Force that we tag the instance when we create it, this is so that
          # we can limit the instances we're allow to terminate. The only tag
          # keys allowed are "Owner" and "Name". "Owner" must be set to
          # "VmClarity".
          - Effect: "Allow"
            Action:
              - "ec2:RunInstances"
              - "ec2:CreateVolume"
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:volume/*"
            Condition:
              StringEquals:
                "aws:RequestTag/Owner": "VMClarity"
              "ForAllValues:StringEquals":
                "aws:TagKeys":
                  - Owner
                  - Name
          # Allow instance to be created using snapshots, only if the snapshot
          # has the Owner:VMClarity tag.
          - Effect: "Allow"
            Action: "ec2:RunInstances"
            Resource:
              !Sub "arn:${AWS::Partition}:ec2:*::snapshot/*"
            Condition:
              StringEquals:
                "aws:ResourceTag/Owner": "VMClarity"
              "ForAllValues:StringEquals":
                "aws:TagKeys":
                  - Owner
          # Allow the creation of network interfaces, and allow instances to be
          # created with any security group and image in our account and
          # region.
          # Also allow creation with any key-pair from our account, so that it
          # can be used to access the scanner VMs via SSH and debug them.
          # TODO(sambetts) Add lock it down to just the scanner image and
          # create a security group for the scanners
          - Effect: "Allow"
            Action: "ec2:RunInstances"
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*"
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/*"
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}::image/*"
          #
          # ##########################

          # ##########################
          # Limit CreateTags to just creating an instance, volume or snapshot
          # otherwise we could modify existing resources to allow us to delete
          # them.
          - Effect: "Allow"
            Action: "ec2:CreateTags"
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
              - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*"
              - !Sub "arn:aws:ec2:*:${AWS::AccountId}:volume/*"
              - !Sub "arn:${AWS::Partition}:ec2:*::snapshot/*"
            Condition:
              StringEquals:
                "ec2:CreateAction":
                  - RunInstances
                  - CreateVolume
                  - CreateSnapshot
                  - CreateSnapshots
                  - CopySnapshot
          #
          # ##########################

          # ##########################
          # Only allow to start, stop and terminate the instances, volumes and
          # snapshots that we created using the tags to identify them.
          - Effect: "Allow"
            Action:
              - "ec2:StartInstances"
              - "ec2:StopInstances"
              - "ec2:TerminateInstances"
              - "ec2:DeleteVolume"
              - "ec2:DeleteSnapshot"
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:volume/*"
              - !Sub "arn:${AWS::Partition}:ec2:*::snapshot/*"
            Condition:
              StringEquals:
                "aws:ResourceTag/Owner": "VMClarity"
          #
          # ##########################

          # ##########################
          # Allow VMClarity to query everything
          - Effect: "Allow"
            Action:
            - "ec2:DescribeImages"
            - "ec2:DescribeInstances"
            - "ec2:DescribeVolumeStatus"
            - "ec2:DescribeVolumes"
            - "ec2:DescribeVolumesModifications"
            - "ec2:DescribeSnapshots"
            - "ec2:DescribeInstanceStatus"
            - "ec2:DescribeVolumeAttribute"
            - "ec2:DescribeRegions"
            - "ec2:DescribeVpcs"
            - "ec2:DescribeSecurityGroups"
            Resource: "*"
          #
          # ##########################

          # ##########################
          # Only allow to attach volumes to instances that we created
          # using the tags to identify them.
          - Effect: "Allow"
            Action:
            - "ec2:AttachVolume"
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:volume/*"
            Condition:
              StringEquals:
                "aws:ResourceTag/Owner": "VMClarity"
          #
          # ##########################
      Roles:
        - !Ref VmClarityServerRole
  # Create a IAM role which will contain the policy above.
  VmClarityServerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  # Create an InstanceProfile which binds the role to the VmClarityServer.
  VmClarityServerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref VmClarityServerRole
Parameters:
  # Provide some choice of instance type, these are all 2 VCPU 8GB RAM systems
  # and should perform similarly.
  InstanceType:
    Description: VmClarity Server Instance Type
    Type: String
    Default: t2.large
    AllowedValues:
      - m6i.large
      - t2.large
      - t3.large
    ConstraintDescription: must be a valid EC2 instance type.
  ScannerInstanceType:
    Description: VmClarity Scanner Instance Type
    Type: String
    Default: t2.large
    AllowedValues:
      - m6i.large
      - t2.large
      - t3.large
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an EC2 KeyPair to enable SSH access to the instance.
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: "The IP address range that can be used to access the web server using SSH."
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  BackendContainerImageOverride:
    Description: >
      Name of the container image used for deploying VMClarity server.
      "ghcr.io/openclarity/vmclarity-backend:latest" will be used if not overridden.
    Type: String
    Default: ''
  ScannerContainerImageOverride:
    Description: >
      Name of the container image used for running scans on targets.
      "ghcr.io/openclarity/vmclarity-cli:latest" will be used if not overridden.
    Type: String
    Default: ''
  FreshclamMirrorContainerImageOverride:
    Description: >
      Name of the container image used for the freshclam mirror server.
      "ghcr.io/openclarity/freshclam-mirror:v0.1.0" will be used if not overridden.
    Type: String
    Default: ''
  TrivyServerContainerImageOverride:
    Description: >
      Name of the container image used for the trivy server.
      "docker.io/aquasec/trivy:0.41.0" will be used if not overridden.
    Type: String
    Default: ''
  GrypeServerContainerImageOverride:
    Description: >
      Name of the container image used for the grype server.
      "ghcr.io/openclarity/grype-server:v0.2.0" will be used if not overridden.
    Type: String
    Default: ''
  ExploitDBServerContainerImageOverride:
    Description: >
      Name of the container image used for the grype server.
      "ghcr.io/openclarity/exploit-db-server:v0.1.2" will be used if not overridden.
    Type: String
    Default: ''
  PostgresqlContainerImageOverride:
    Description: >
      Name of the container image used for the postgres database server.
      "bitnami/postgresql:12.14.0-debian-11-r28" will be used if not overridden.
    Type: String
    Default: ''
  AssetScanDeletePolicy:
    Description: When VMClarity should delete resources after a completed asset scan.
    Type: String
    Default: Always
    AllowedValues:
      - Always
      - OnSuccess
      - Never
  DatabaseToUse:
    Description: Database VMClarity should use to store its objects.
    Type: String
    Default: Postgresql
    AllowedValues:
      - Postgresql
      - External Postgresql
      - SQLite
  PostgresDBPassword:
    Description: >
      Password to configure Postgresql with on first install.
      Required if Postgres is selected as the Database To Use.
      Do not change this on stack update.
    Type: String
    Default: password123
  ExternalDBHost:
    Description: Hostname or IP address of the External DB to connect to. Required if an external database type is selected as the Database To Use.
    Type: String
  ExternalDBPort:
    Description: Network Port of the External DB to connect to. Required if an external database type is selected as the Database To Use.
    Type: Number
    MinValue: 0
    Default: 0
  ExternalDBName:
    Description: Name of the Database to use on the External DB. Required if an external database type is selected as the Database To Use.
    Type: String
  ExternalDBUsername:
    Description: Username to use to connect to the External DB. Required if an external database type is selected as the Database To Use.
    Type: String
  ExternalDBPassword:
    Description: Password to use to connect to the External DB. Required if an external database type is selected as the Database To Use.
    Type: String
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2 Configuration
        Parameters:
          - InstanceType
          - ScannerInstanceType
          - KeyName
      - Label:
          default: Network Configuration
        Parameters:
          - SSHLocation
      - Label:
          default: Database Configuration
        Parameters:
          - DatabaseToUse
          - PostgresDBPassword
          - ExternalDBHost
          - ExternalDBPort
          - ExternalDBName
          - ExternalDBUsername
          - ExternalDBPassword
      - Label:
          default: Advanced Configuration
        Parameters:
          - BackendContainerImageOverride
          - ScannerContainerImageOverride
          - TrivyServerContainerImageOverride
          - GrypeServerContainerImageOverride
          - ExploitDBServerContainerImageOverride
          - PostgresqlContainerImageOverride
          - FreshclamMirrorContainerImageOverride
          - AssetScanDeletePolicy
    ParameterLabels:
      InstanceType:
        default: VMClarity Server Instance Type
      ScannerInstanceType:
        default: Scanner Job Instance Type
      BackendContainerImageOverride:
        default: Backend Container Image Override
      ScannerContainerImageOverride:
        default: Scanner Container Image Override
      TrivyServerContainerImageOverride:
        default: Trivy Server Container Image Override
      GrypeServerContainerImageOverride:
        default: Grype Server Container Image Override
      ExploitDBServerContainerImageOverride:
        default: Exploit DB Server Container Image Override
      FreshclamMirrorContainerImageOverride:
        default: freshclam-mirror Container Image Override
      PostgresqlContainerImageOverride:
        default: Postgresql Container Image Override
      AssetScanDeletePolicy:
        default: Asset Scan Delete Policy
      DatabaseToUse:
        default: Database To Use
      PostgresDBPassword:
        default: Postgresql DB Password
      ExternalDBHost:
        default: External DB Hostname or IP
      ExternalDBPort:
        default: External DB Port
      ExternalDBName:
        default: External DB Database Name
      ExternalDBUsername:
        default: External DB Username
      ExternalDBPassword:
        default: External DB Password
Mappings:
  # For every type we want AWS hardware virtualisation on amd64 (HVM64)
  AWSInstanceType2Arch:
    t2.large:
      Arch: HVM64
    t3.large:
      Arch: HVM64
    m6i.large:
      Arch: HVM64
  # These are all Ubuntu 20.04 LTS AMIs in the different regions.
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-01d08089481510ba2
    us-west-2:
      HVM64: ami-0e6dff8bde9a09539
    us-west-1:
      HVM64: ami-064562725417500be
    eu-west-1:
      HVM64: ami-04e2e94de097d3986
    eu-west-2:
      HVM64: ami-08d3a4ad06c8a70fe
    eu-west-3:
      HVM64: ami-018de3a6e45331551
    eu-central-1:
      HVM64: ami-0d0dd86aa7fe3c8a9
    ap-northeast-1:
      HVM64: ami-0d745f1ee4bb88b89
    ap-northeast-2:
      HVM64: ami-05a5333b72d3d1c93
    ap-northeast-3:
      HVM64: ami-0eb4557358e2c9386
    ap-southeast-1:
      HVM64: ami-0fbb51b4aa5671449
    ap-southeast-2:
      HVM64: ami-030a8d0e06463671c
    ap-south-1:
      HVM64: ami-0340ea71c538887c3
    us-east-2:
      HVM64: ami-0066d036f9777ec38
    ca-central-1:
      HVM64: ami-0ab6f6340b2a4fb77
    sa-east-1:
      HVM64: ami-07e7afb5e1e58e8da
    cn-north-1:
      HVM64: ami-0741e7b8b4fb0001c
    cn-northwest-1:
      HVM64: ami-0883e8062ff31f727
Conditions:
  BackendContainerImageOverridden: !Not
    - !Equals
      - !Ref BackendContainerImageOverride
      - ''
  ScannerContainerImageOverridden: !Not
    - !Equals
      - !Ref ScannerContainerImageOverride
      - ''
  TrivyServerContainerImageOverridden: !Not
    - !Equals
      - !Ref TrivyServerContainerImageOverride
      - ''
  FreshclamMirrorContainerImageOverridden: !Not
    - !Equals
      - !Ref FreshclamMirrorContainerImageOverride
      - ''
  GrypeServerContainerImageOverridden: !Not
    - !Equals
      - !Ref GrypeServerContainerImageOverride
      - ''
  ExploitDBServerContainerImageOverridden: !Not
    - !Equals
      - !Ref ExploitDBServerContainerImageOverride
      - ''
  PostgresqlContainerImageOverridden: !Not
    - !Equals
      - !Ref PostgresqlContainerImageOverride
      - ''
Outputs:
  URL:
    Value: !Sub "${VmClarityServer.PublicIp}"
    Description: VmClarity SSH Address

