// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openclarity/vmclarity/backend/pkg/database (interfaces: TargetTable)

// Package database is a generated GoMock package.
package database

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/openclarity/vmclarity/api/models"
	reflect "reflect"
)

// MockTargetTable is a mock of TargetTable interface
type MockTargetTable struct {
	ctrl     *gomock.Controller
	recorder *MockTargetTableMockRecorder
}

// MockTargetTableMockRecorder is the mock recorder for MockTargetTable
type MockTargetTableMockRecorder struct {
	mock *MockTargetTable
}

// NewMockTargetTable creates a new mock instance
func NewMockTargetTable(ctrl *gomock.Controller) *MockTargetTable {
	mock := &MockTargetTable{ctrl: ctrl}
	mock.recorder = &MockTargetTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTargetTable) EXPECT() *MockTargetTableMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTargetTable) Create(arg0 *Target) (models.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(models.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTargetTableMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTargetTable)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockTargetTable) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTargetTableMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTargetTable)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockTargetTable) Get(arg0 string) (models.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(models.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockTargetTableMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTargetTable)(nil).Get), arg0)
}

// List mocks base method
func (m *MockTargetTable) List(arg0 models.GetTargetsParams) ([]models.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]models.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockTargetTableMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTargetTable)(nil).List), arg0)
}

// Update mocks base method
func (m *MockTargetTable) Update(arg0 *Target, arg1 string) (models.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(models.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockTargetTableMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTargetTable)(nil).Update), arg0, arg1)
}
