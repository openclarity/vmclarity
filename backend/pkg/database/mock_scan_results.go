// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openclarity/vmclarity/backend/pkg/database (interfaces: ScanResultsTable)

// Package database is a generated GoMock package.
package database

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/openclarity/vmclarity/api/models"
	reflect "reflect"
)

// MockScanResultsTable is a mock of ScanResultsTable interface
type MockScanResultsTable struct {
	ctrl     *gomock.Controller
	recorder *MockScanResultsTableMockRecorder
}

// MockScanResultsTableMockRecorder is the mock recorder for MockScanResultsTable
type MockScanResultsTableMockRecorder struct {
	mock *MockScanResultsTable
}

// NewMockScanResultsTable creates a new mock instance
func NewMockScanResultsTable(ctrl *gomock.Controller) *MockScanResultsTable {
	mock := &MockScanResultsTable{ctrl: ctrl}
	mock.recorder = &MockScanResultsTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScanResultsTable) EXPECT() *MockScanResultsTableMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockScanResultsTable) Create(arg0 string, arg1 *ScanResults) (*models.ScanResultsSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.ScanResultsSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockScanResultsTableMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScanResultsTable)(nil).Create), arg0, arg1)
}

// GetExploits mocks base method
func (m *MockScanResultsTable) GetExploits(arg0, arg1 string) (*models.ExploitScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExploits", arg0, arg1)
	ret0, _ := ret[0].(*models.ExploitScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExploits indicates an expected call of GetExploits
func (mr *MockScanResultsTableMockRecorder) GetExploits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExploits", reflect.TypeOf((*MockScanResultsTable)(nil).GetExploits), arg0, arg1)
}

// GetMalwares mocks base method
func (m *MockScanResultsTable) GetMalwares(arg0, arg1 string) (*models.MalwareScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMalwares", arg0, arg1)
	ret0, _ := ret[0].(*models.MalwareScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMalwares indicates an expected call of GetMalwares
func (mr *MockScanResultsTableMockRecorder) GetMalwares(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMalwares", reflect.TypeOf((*MockScanResultsTable)(nil).GetMalwares), arg0, arg1)
}

// GetMisconfigurations mocks base method
func (m *MockScanResultsTable) GetMisconfigurations(arg0, arg1 string) (*models.MisconfigurationScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMisconfigurations", arg0, arg1)
	ret0, _ := ret[0].(*models.MisconfigurationScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMisconfigurations indicates an expected call of GetMisconfigurations
func (mr *MockScanResultsTableMockRecorder) GetMisconfigurations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMisconfigurations", reflect.TypeOf((*MockScanResultsTable)(nil).GetMisconfigurations), arg0, arg1)
}

// GetRootkits mocks base method
func (m *MockScanResultsTable) GetRootkits(arg0, arg1 string) (*models.RootkitScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootkits", arg0, arg1)
	ret0, _ := ret[0].(*models.RootkitScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootkits indicates an expected call of GetRootkits
func (mr *MockScanResultsTableMockRecorder) GetRootkits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootkits", reflect.TypeOf((*MockScanResultsTable)(nil).GetRootkits), arg0, arg1)
}

// GetSBOM mocks base method
func (m *MockScanResultsTable) GetSBOM(arg0, arg1 string) (*models.SbomScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSBOM", arg0, arg1)
	ret0, _ := ret[0].(*models.SbomScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSBOM indicates an expected call of GetSBOM
func (mr *MockScanResultsTableMockRecorder) GetSBOM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSBOM", reflect.TypeOf((*MockScanResultsTable)(nil).GetSBOM), arg0, arg1)
}

// GetSecrets mocks base method
func (m *MockScanResultsTable) GetSecrets(arg0, arg1 string) (*models.SecretScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecrets", arg0, arg1)
	ret0, _ := ret[0].(*models.SecretScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecrets indicates an expected call of GetSecrets
func (mr *MockScanResultsTableMockRecorder) GetSecrets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecrets", reflect.TypeOf((*MockScanResultsTable)(nil).GetSecrets), arg0, arg1)
}

// GetSummary mocks base method
func (m *MockScanResultsTable) GetSummary(arg0, arg1 string) (*models.ScanResultsSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummary", arg0, arg1)
	ret0, _ := ret[0].(*models.ScanResultsSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummary indicates an expected call of GetSummary
func (mr *MockScanResultsTableMockRecorder) GetSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummary", reflect.TypeOf((*MockScanResultsTable)(nil).GetSummary), arg0, arg1)
}

// GetVulnerabilities mocks base method
func (m *MockScanResultsTable) GetVulnerabilities(arg0, arg1 string) (*models.VulnerabilityScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnerabilities", arg0, arg1)
	ret0, _ := ret[0].(*models.VulnerabilityScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVulnerabilities indicates an expected call of GetVulnerabilities
func (mr *MockScanResultsTableMockRecorder) GetVulnerabilities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnerabilities", reflect.TypeOf((*MockScanResultsTable)(nil).GetVulnerabilities), arg0, arg1)
}

// List mocks base method
func (m *MockScanResultsTable) List(arg0 string, arg1 models.GetTargetsTargetIDScanResultsParams) (*[]models.ScanResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*[]models.ScanResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockScanResultsTableMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockScanResultsTable)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockScanResultsTable) Update(arg0, arg1 string, arg2 *ScanResults) (*models.ScanResultsSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.ScanResultsSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockScanResultsTableMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScanResultsTable)(nil).Update), arg0, arg1, arg2)
}
