// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openclarity/vmclarity/backend/pkg/database (interfaces: ScanResultsTable)

// Package database is a generated GoMock package.
package database

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/openclarity/vmclarity/api/models"
	reflect "reflect"
)

// MockScanResultsTable is a mock of ScanResultsTable interface
type MockScanResultsTable struct {
	ctrl     *gomock.Controller
	recorder *MockScanResultsTableMockRecorder
}

// MockScanResultsTableMockRecorder is the mock recorder for MockScanResultsTable
type MockScanResultsTableMockRecorder struct {
	mock *MockScanResultsTable
}

// NewMockScanResultsTable creates a new mock instance
func NewMockScanResultsTable(ctrl *gomock.Controller) *MockScanResultsTable {
	mock := &MockScanResultsTable{ctrl: ctrl}
	mock.recorder = &MockScanResultsTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScanResultsTable) EXPECT() *MockScanResultsTableMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockScanResultsTable) Create(arg0 string, arg1 *ScanResults) (models.ScanResultsSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(models.ScanResultsSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockScanResultsTableMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScanResultsTable)(nil).Create), arg0, arg1)
}

// Get mocks base method
func (m *MockScanResultsTable) Get(arg0, arg1 string, arg2 models.GetTargetsTargetIDScanresultsScanIDParams) (ScanResultsInt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(ScanResultsInt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockScanResultsTableMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockScanResultsTable)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method
func (m *MockScanResultsTable) List(arg0 string, arg1 models.GetTargetsTargetIDScanresultsParams) ([]models.ScanResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]models.ScanResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockScanResultsTableMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockScanResultsTable)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockScanResultsTable) Update(arg0, arg1 string, arg2 *ScanResults) (models.ScanResultsSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.ScanResultsSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockScanResultsTableMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScanResultsTable)(nil).Update), arg0, arg1, arg2)
}
