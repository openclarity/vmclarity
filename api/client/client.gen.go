// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	. "github.com/openclarity/vmclarity/api/models"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetScanConfigs request
	GetScanConfigs(ctx context.Context, params *GetScanConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScanConfigs request with any body
	PostScanConfigsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScanConfigs(ctx context.Context, body PostScanConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScanConfigsScanConfigID request
	DeleteScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScanConfigsScanConfigID request
	GetScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScanConfigsScanConfigID request with any body
	PatchScanConfigsScanConfigIDWithBody(ctx context.Context, scanConfigID ScanConfigID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, body PatchScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutScanConfigsScanConfigID request with any body
	PutScanConfigsScanConfigIDWithBody(ctx context.Context, scanConfigID ScanConfigID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, body PutScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScans request
	GetScans(ctx context.Context, params *GetScansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScans request with any body
	PostScansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScans(ctx context.Context, body PostScansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScansScanID request
	DeleteScansScanID(ctx context.Context, scanID ScanID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScansScanID request
	GetScansScanID(ctx context.Context, scanID ScanID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScansScanID request with any body
	PatchScansScanIDWithBody(ctx context.Context, scanID ScanID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScansScanID(ctx context.Context, scanID ScanID, body PatchScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutScansScanID request with any body
	PutScansScanIDWithBody(ctx context.Context, scanID ScanID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutScansScanID(ctx context.Context, scanID ScanID, body PutScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScansScanIDTargetsTargetIDScanResults request
	GetScansScanIDTargetsTargetIDScanResults(ctx context.Context, scanID ScanID, targetID TargetID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScansScanIDTargetsTargetIDScanResults request with any body
	PatchScansScanIDTargetsTargetIDScanResultsWithBody(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScansScanIDTargetsTargetIDScanResults(ctx context.Context, scanID ScanID, targetID TargetID, body PatchScansScanIDTargetsTargetIDScanResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScansScanIDTargetsTargetIDScanResults request with any body
	PostScansScanIDTargetsTargetIDScanResultsWithBody(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScansScanIDTargetsTargetIDScanResults(ctx context.Context, scanID ScanID, targetID TargetID, body PostScansScanIDTargetsTargetIDScanResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutScansScanIDTargetsTargetIDScanResults request with any body
	PutScansScanIDTargetsTargetIDScanResultsWithBody(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutScansScanIDTargetsTargetIDScanResults(ctx context.Context, scanID ScanID, targetID TargetID, body PutScansScanIDTargetsTargetIDScanResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScansScanIDTargetsTargetIDScanStatus request
	GetScansScanIDTargetsTargetIDScanStatus(ctx context.Context, scanID ScanID, targetID TargetID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScansScanIDTargetsTargetIDScanStatus request with any body
	PatchScansScanIDTargetsTargetIDScanStatusWithBody(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScansScanIDTargetsTargetIDScanStatus(ctx context.Context, scanID ScanID, targetID TargetID, body PatchScansScanIDTargetsTargetIDScanStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScansScanIDTargetsTargetIDScanStatus request with any body
	PostScansScanIDTargetsTargetIDScanStatusWithBody(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScansScanIDTargetsTargetIDScanStatus(ctx context.Context, scanID ScanID, targetID TargetID, body PostScansScanIDTargetsTargetIDScanStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutScansScanIDTargetsTargetIDScanStatus request with any body
	PutScansScanIDTargetsTargetIDScanStatusWithBody(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutScansScanIDTargetsTargetIDScanStatus(ctx context.Context, scanID ScanID, targetID TargetID, body PutScansScanIDTargetsTargetIDScanStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTargets request
	GetTargets(ctx context.Context, params *GetTargetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTargets request with any body
	PostTargetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTargets(ctx context.Context, body PostTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTargetsTargetID request
	DeleteTargetsTargetID(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTargetsTargetID request
	GetTargetsTargetID(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTargetsTargetID request with any body
	PutTargetsTargetIDWithBody(ctx context.Context, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTargetsTargetID(ctx context.Context, targetID TargetID, body PutTargetsTargetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetScanConfigs(ctx context.Context, params *GetScanConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScanConfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScanConfigsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScanConfigsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScanConfigs(ctx context.Context, body PostScanConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScanConfigsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScanConfigsScanConfigIDRequest(c.Server, scanConfigID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScanConfigsScanConfigIDRequest(c.Server, scanConfigID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScanConfigsScanConfigIDWithBody(ctx context.Context, scanConfigID ScanConfigID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScanConfigsScanConfigIDRequestWithBody(c.Server, scanConfigID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, body PatchScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScanConfigsScanConfigIDRequest(c.Server, scanConfigID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScanConfigsScanConfigIDWithBody(ctx context.Context, scanConfigID ScanConfigID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScanConfigsScanConfigIDRequestWithBody(c.Server, scanConfigID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, body PutScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScanConfigsScanConfigIDRequest(c.Server, scanConfigID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScans(ctx context.Context, params *GetScansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScansRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScans(ctx context.Context, body PostScansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScansRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScansScanID(ctx context.Context, scanID ScanID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScansScanIDRequest(c.Server, scanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScansScanID(ctx context.Context, scanID ScanID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScansScanIDRequest(c.Server, scanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScansScanIDWithBody(ctx context.Context, scanID ScanID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScansScanIDRequestWithBody(c.Server, scanID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScansScanID(ctx context.Context, scanID ScanID, body PatchScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScansScanIDRequest(c.Server, scanID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScansScanIDWithBody(ctx context.Context, scanID ScanID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScansScanIDRequestWithBody(c.Server, scanID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScansScanID(ctx context.Context, scanID ScanID, body PutScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScansScanIDRequest(c.Server, scanID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScansScanIDTargetsTargetIDScanResults(ctx context.Context, scanID ScanID, targetID TargetID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScansScanIDTargetsTargetIDScanResultsRequest(c.Server, scanID, targetID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScansScanIDTargetsTargetIDScanResultsWithBody(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScansScanIDTargetsTargetIDScanResultsRequestWithBody(c.Server, scanID, targetID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScansScanIDTargetsTargetIDScanResults(ctx context.Context, scanID ScanID, targetID TargetID, body PatchScansScanIDTargetsTargetIDScanResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScansScanIDTargetsTargetIDScanResultsRequest(c.Server, scanID, targetID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScansScanIDTargetsTargetIDScanResultsWithBody(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScansScanIDTargetsTargetIDScanResultsRequestWithBody(c.Server, scanID, targetID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScansScanIDTargetsTargetIDScanResults(ctx context.Context, scanID ScanID, targetID TargetID, body PostScansScanIDTargetsTargetIDScanResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScansScanIDTargetsTargetIDScanResultsRequest(c.Server, scanID, targetID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScansScanIDTargetsTargetIDScanResultsWithBody(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScansScanIDTargetsTargetIDScanResultsRequestWithBody(c.Server, scanID, targetID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScansScanIDTargetsTargetIDScanResults(ctx context.Context, scanID ScanID, targetID TargetID, body PutScansScanIDTargetsTargetIDScanResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScansScanIDTargetsTargetIDScanResultsRequest(c.Server, scanID, targetID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScansScanIDTargetsTargetIDScanStatus(ctx context.Context, scanID ScanID, targetID TargetID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScansScanIDTargetsTargetIDScanStatusRequest(c.Server, scanID, targetID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScansScanIDTargetsTargetIDScanStatusWithBody(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScansScanIDTargetsTargetIDScanStatusRequestWithBody(c.Server, scanID, targetID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScansScanIDTargetsTargetIDScanStatus(ctx context.Context, scanID ScanID, targetID TargetID, body PatchScansScanIDTargetsTargetIDScanStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScansScanIDTargetsTargetIDScanStatusRequest(c.Server, scanID, targetID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScansScanIDTargetsTargetIDScanStatusWithBody(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScansScanIDTargetsTargetIDScanStatusRequestWithBody(c.Server, scanID, targetID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScansScanIDTargetsTargetIDScanStatus(ctx context.Context, scanID ScanID, targetID TargetID, body PostScansScanIDTargetsTargetIDScanStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScansScanIDTargetsTargetIDScanStatusRequest(c.Server, scanID, targetID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScansScanIDTargetsTargetIDScanStatusWithBody(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScansScanIDTargetsTargetIDScanStatusRequestWithBody(c.Server, scanID, targetID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScansScanIDTargetsTargetIDScanStatus(ctx context.Context, scanID ScanID, targetID TargetID, body PutScansScanIDTargetsTargetIDScanStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScansScanIDTargetsTargetIDScanStatusRequest(c.Server, scanID, targetID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargets(ctx context.Context, params *GetTargetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTargetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTargetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTargets(ctx context.Context, body PostTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTargetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTargetsTargetID(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTargetsTargetIDRequest(c.Server, targetID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetsTargetID(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetsTargetIDRequest(c.Server, targetID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTargetsTargetIDWithBody(ctx context.Context, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTargetsTargetIDRequestWithBody(c.Server, targetID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTargetsTargetID(ctx context.Context, targetID TargetID, body PutTargetsTargetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTargetsTargetIDRequest(c.Server, targetID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetScanConfigsRequest generates requests for GetScanConfigs
func NewGetScanConfigsRequest(server string, params *GetScanConfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanConfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostScanConfigsRequest calls the generic PostScanConfigs builder with application/json body
func NewPostScanConfigsRequest(server string, body PostScanConfigsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostScanConfigsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostScanConfigsRequestWithBody generates requests for PostScanConfigs with any type of body
func NewPostScanConfigsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanConfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScanConfigsScanConfigIDRequest generates requests for DeleteScanConfigsScanConfigID
func NewDeleteScanConfigsScanConfigIDRequest(server string, scanConfigID ScanConfigID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, scanConfigID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanConfigs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScanConfigsScanConfigIDRequest generates requests for GetScanConfigsScanConfigID
func NewGetScanConfigsScanConfigIDRequest(server string, scanConfigID ScanConfigID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, scanConfigID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanConfigs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScanConfigsScanConfigIDRequest calls the generic PatchScanConfigsScanConfigID builder with application/json body
func NewPatchScanConfigsScanConfigIDRequest(server string, scanConfigID ScanConfigID, body PatchScanConfigsScanConfigIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScanConfigsScanConfigIDRequestWithBody(server, scanConfigID, "application/json", bodyReader)
}

// NewPatchScanConfigsScanConfigIDRequestWithBody generates requests for PatchScanConfigsScanConfigID with any type of body
func NewPatchScanConfigsScanConfigIDRequestWithBody(server string, scanConfigID ScanConfigID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, scanConfigID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanConfigs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutScanConfigsScanConfigIDRequest calls the generic PutScanConfigsScanConfigID builder with application/json body
func NewPutScanConfigsScanConfigIDRequest(server string, scanConfigID ScanConfigID, body PutScanConfigsScanConfigIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutScanConfigsScanConfigIDRequestWithBody(server, scanConfigID, "application/json", bodyReader)
}

// NewPutScanConfigsScanConfigIDRequestWithBody generates requests for PutScanConfigsScanConfigID with any type of body
func NewPutScanConfigsScanConfigIDRequestWithBody(server string, scanConfigID ScanConfigID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, scanConfigID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanConfigs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetScansRequest generates requests for GetScans
func NewGetScansRequest(server string, params *GetScansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostScansRequest calls the generic PostScans builder with application/json body
func NewPostScansRequest(server string, body PostScansJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostScansRequestWithBody(server, "application/json", bodyReader)
}

// NewPostScansRequestWithBody generates requests for PostScans with any type of body
func NewPostScansRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScansScanIDRequest generates requests for DeleteScansScanID
func NewDeleteScansScanIDRequest(server string, scanID ScanID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScansScanIDRequest generates requests for GetScansScanID
func NewGetScansScanIDRequest(server string, scanID ScanID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScansScanIDRequest calls the generic PatchScansScanID builder with application/json body
func NewPatchScansScanIDRequest(server string, scanID ScanID, body PatchScansScanIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScansScanIDRequestWithBody(server, scanID, "application/json", bodyReader)
}

// NewPatchScansScanIDRequestWithBody generates requests for PatchScansScanID with any type of body
func NewPatchScansScanIDRequestWithBody(server string, scanID ScanID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutScansScanIDRequest calls the generic PutScansScanID builder with application/json body
func NewPutScansScanIDRequest(server string, scanID ScanID, body PutScansScanIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutScansScanIDRequestWithBody(server, scanID, "application/json", bodyReader)
}

// NewPutScansScanIDRequestWithBody generates requests for PutScansScanID with any type of body
func NewPutScansScanIDRequestWithBody(server string, scanID ScanID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetScansScanIDTargetsTargetIDScanResultsRequest generates requests for GetScansScanIDTargetsTargetIDScanResults
func NewGetScansScanIDTargetsTargetIDScanResultsRequest(server string, scanID ScanID, targetID TargetID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s/targets/%s/scanResults", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScansScanIDTargetsTargetIDScanResultsRequest calls the generic PatchScansScanIDTargetsTargetIDScanResults builder with application/json body
func NewPatchScansScanIDTargetsTargetIDScanResultsRequest(server string, scanID ScanID, targetID TargetID, body PatchScansScanIDTargetsTargetIDScanResultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScansScanIDTargetsTargetIDScanResultsRequestWithBody(server, scanID, targetID, "application/json", bodyReader)
}

// NewPatchScansScanIDTargetsTargetIDScanResultsRequestWithBody generates requests for PatchScansScanIDTargetsTargetIDScanResults with any type of body
func NewPatchScansScanIDTargetsTargetIDScanResultsRequestWithBody(server string, scanID ScanID, targetID TargetID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s/targets/%s/scanResults", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostScansScanIDTargetsTargetIDScanResultsRequest calls the generic PostScansScanIDTargetsTargetIDScanResults builder with application/json body
func NewPostScansScanIDTargetsTargetIDScanResultsRequest(server string, scanID ScanID, targetID TargetID, body PostScansScanIDTargetsTargetIDScanResultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostScansScanIDTargetsTargetIDScanResultsRequestWithBody(server, scanID, targetID, "application/json", bodyReader)
}

// NewPostScansScanIDTargetsTargetIDScanResultsRequestWithBody generates requests for PostScansScanIDTargetsTargetIDScanResults with any type of body
func NewPostScansScanIDTargetsTargetIDScanResultsRequestWithBody(server string, scanID ScanID, targetID TargetID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s/targets/%s/scanResults", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutScansScanIDTargetsTargetIDScanResultsRequest calls the generic PutScansScanIDTargetsTargetIDScanResults builder with application/json body
func NewPutScansScanIDTargetsTargetIDScanResultsRequest(server string, scanID ScanID, targetID TargetID, body PutScansScanIDTargetsTargetIDScanResultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutScansScanIDTargetsTargetIDScanResultsRequestWithBody(server, scanID, targetID, "application/json", bodyReader)
}

// NewPutScansScanIDTargetsTargetIDScanResultsRequestWithBody generates requests for PutScansScanIDTargetsTargetIDScanResults with any type of body
func NewPutScansScanIDTargetsTargetIDScanResultsRequestWithBody(server string, scanID ScanID, targetID TargetID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s/targets/%s/scanResults", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetScansScanIDTargetsTargetIDScanStatusRequest generates requests for GetScansScanIDTargetsTargetIDScanStatus
func NewGetScansScanIDTargetsTargetIDScanStatusRequest(server string, scanID ScanID, targetID TargetID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s/targets/%s/scanStatus", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScansScanIDTargetsTargetIDScanStatusRequest calls the generic PatchScansScanIDTargetsTargetIDScanStatus builder with application/json body
func NewPatchScansScanIDTargetsTargetIDScanStatusRequest(server string, scanID ScanID, targetID TargetID, body PatchScansScanIDTargetsTargetIDScanStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScansScanIDTargetsTargetIDScanStatusRequestWithBody(server, scanID, targetID, "application/json", bodyReader)
}

// NewPatchScansScanIDTargetsTargetIDScanStatusRequestWithBody generates requests for PatchScansScanIDTargetsTargetIDScanStatus with any type of body
func NewPatchScansScanIDTargetsTargetIDScanStatusRequestWithBody(server string, scanID ScanID, targetID TargetID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s/targets/%s/scanStatus", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostScansScanIDTargetsTargetIDScanStatusRequest calls the generic PostScansScanIDTargetsTargetIDScanStatus builder with application/json body
func NewPostScansScanIDTargetsTargetIDScanStatusRequest(server string, scanID ScanID, targetID TargetID, body PostScansScanIDTargetsTargetIDScanStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostScansScanIDTargetsTargetIDScanStatusRequestWithBody(server, scanID, targetID, "application/json", bodyReader)
}

// NewPostScansScanIDTargetsTargetIDScanStatusRequestWithBody generates requests for PostScansScanIDTargetsTargetIDScanStatus with any type of body
func NewPostScansScanIDTargetsTargetIDScanStatusRequestWithBody(server string, scanID ScanID, targetID TargetID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s/targets/%s/scanStatus", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutScansScanIDTargetsTargetIDScanStatusRequest calls the generic PutScansScanIDTargetsTargetIDScanStatus builder with application/json body
func NewPutScansScanIDTargetsTargetIDScanStatusRequest(server string, scanID ScanID, targetID TargetID, body PutScansScanIDTargetsTargetIDScanStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutScansScanIDTargetsTargetIDScanStatusRequestWithBody(server, scanID, targetID, "application/json", bodyReader)
}

// NewPutScansScanIDTargetsTargetIDScanStatusRequestWithBody generates requests for PutScansScanIDTargetsTargetIDScanStatus with any type of body
func NewPutScansScanIDTargetsTargetIDScanStatusRequestWithBody(server string, scanID ScanID, targetID TargetID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s/targets/%s/scanStatus", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTargetsRequest generates requests for GetTargets
func NewGetTargetsRequest(server string, params *GetTargetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTargetsRequest calls the generic PostTargets builder with application/json body
func NewPostTargetsRequest(server string, body PostTargetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTargetsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTargetsRequestWithBody generates requests for PostTargets with any type of body
func NewPostTargetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTargetsTargetIDRequest generates requests for DeleteTargetsTargetID
func NewDeleteTargetsTargetIDRequest(server string, targetID TargetID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTargetsTargetIDRequest generates requests for GetTargetsTargetID
func NewGetTargetsTargetIDRequest(server string, targetID TargetID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTargetsTargetIDRequest calls the generic PutTargetsTargetID builder with application/json body
func NewPutTargetsTargetIDRequest(server string, targetID TargetID, body PutTargetsTargetIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTargetsTargetIDRequestWithBody(server, targetID, "application/json", bodyReader)
}

// NewPutTargetsTargetIDRequestWithBody generates requests for PutTargetsTargetID with any type of body
func NewPutTargetsTargetIDRequestWithBody(server string, targetID TargetID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetScanConfigs request
	GetScanConfigsWithResponse(ctx context.Context, params *GetScanConfigsParams, reqEditors ...RequestEditorFn) (*GetScanConfigsResponse, error)

	// PostScanConfigs request with any body
	PostScanConfigsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScanConfigsResponse, error)

	PostScanConfigsWithResponse(ctx context.Context, body PostScanConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScanConfigsResponse, error)

	// DeleteScanConfigsScanConfigID request
	DeleteScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, reqEditors ...RequestEditorFn) (*DeleteScanConfigsScanConfigIDResponse, error)

	// GetScanConfigsScanConfigID request
	GetScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, reqEditors ...RequestEditorFn) (*GetScanConfigsScanConfigIDResponse, error)

	// PatchScanConfigsScanConfigID request with any body
	PatchScanConfigsScanConfigIDWithBodyWithResponse(ctx context.Context, scanConfigID ScanConfigID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScanConfigsScanConfigIDResponse, error)

	PatchScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, body PatchScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScanConfigsScanConfigIDResponse, error)

	// PutScanConfigsScanConfigID request with any body
	PutScanConfigsScanConfigIDWithBodyWithResponse(ctx context.Context, scanConfigID ScanConfigID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScanConfigsScanConfigIDResponse, error)

	PutScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, body PutScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScanConfigsScanConfigIDResponse, error)

	// GetScans request
	GetScansWithResponse(ctx context.Context, params *GetScansParams, reqEditors ...RequestEditorFn) (*GetScansResponse, error)

	// PostScans request with any body
	PostScansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScansResponse, error)

	PostScansWithResponse(ctx context.Context, body PostScansJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScansResponse, error)

	// DeleteScansScanID request
	DeleteScansScanIDWithResponse(ctx context.Context, scanID ScanID, reqEditors ...RequestEditorFn) (*DeleteScansScanIDResponse, error)

	// GetScansScanID request
	GetScansScanIDWithResponse(ctx context.Context, scanID ScanID, reqEditors ...RequestEditorFn) (*GetScansScanIDResponse, error)

	// PatchScansScanID request with any body
	PatchScansScanIDWithBodyWithResponse(ctx context.Context, scanID ScanID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScansScanIDResponse, error)

	PatchScansScanIDWithResponse(ctx context.Context, scanID ScanID, body PatchScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScansScanIDResponse, error)

	// PutScansScanID request with any body
	PutScansScanIDWithBodyWithResponse(ctx context.Context, scanID ScanID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScansScanIDResponse, error)

	PutScansScanIDWithResponse(ctx context.Context, scanID ScanID, body PutScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScansScanIDResponse, error)

	// GetScansScanIDTargetsTargetIDScanResults request
	GetScansScanIDTargetsTargetIDScanResultsWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, reqEditors ...RequestEditorFn) (*GetScansScanIDTargetsTargetIDScanResultsResponse, error)

	// PatchScansScanIDTargetsTargetIDScanResults request with any body
	PatchScansScanIDTargetsTargetIDScanResultsWithBodyWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScansScanIDTargetsTargetIDScanResultsResponse, error)

	PatchScansScanIDTargetsTargetIDScanResultsWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, body PatchScansScanIDTargetsTargetIDScanResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScansScanIDTargetsTargetIDScanResultsResponse, error)

	// PostScansScanIDTargetsTargetIDScanResults request with any body
	PostScansScanIDTargetsTargetIDScanResultsWithBodyWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScansScanIDTargetsTargetIDScanResultsResponse, error)

	PostScansScanIDTargetsTargetIDScanResultsWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, body PostScansScanIDTargetsTargetIDScanResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScansScanIDTargetsTargetIDScanResultsResponse, error)

	// PutScansScanIDTargetsTargetIDScanResults request with any body
	PutScansScanIDTargetsTargetIDScanResultsWithBodyWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScansScanIDTargetsTargetIDScanResultsResponse, error)

	PutScansScanIDTargetsTargetIDScanResultsWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, body PutScansScanIDTargetsTargetIDScanResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScansScanIDTargetsTargetIDScanResultsResponse, error)

	// GetScansScanIDTargetsTargetIDScanStatus request
	GetScansScanIDTargetsTargetIDScanStatusWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, reqEditors ...RequestEditorFn) (*GetScansScanIDTargetsTargetIDScanStatusResponse, error)

	// PatchScansScanIDTargetsTargetIDScanStatus request with any body
	PatchScansScanIDTargetsTargetIDScanStatusWithBodyWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScansScanIDTargetsTargetIDScanStatusResponse, error)

	PatchScansScanIDTargetsTargetIDScanStatusWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, body PatchScansScanIDTargetsTargetIDScanStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScansScanIDTargetsTargetIDScanStatusResponse, error)

	// PostScansScanIDTargetsTargetIDScanStatus request with any body
	PostScansScanIDTargetsTargetIDScanStatusWithBodyWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScansScanIDTargetsTargetIDScanStatusResponse, error)

	PostScansScanIDTargetsTargetIDScanStatusWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, body PostScansScanIDTargetsTargetIDScanStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScansScanIDTargetsTargetIDScanStatusResponse, error)

	// PutScansScanIDTargetsTargetIDScanStatus request with any body
	PutScansScanIDTargetsTargetIDScanStatusWithBodyWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScansScanIDTargetsTargetIDScanStatusResponse, error)

	PutScansScanIDTargetsTargetIDScanStatusWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, body PutScansScanIDTargetsTargetIDScanStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScansScanIDTargetsTargetIDScanStatusResponse, error)

	// GetTargets request
	GetTargetsWithResponse(ctx context.Context, params *GetTargetsParams, reqEditors ...RequestEditorFn) (*GetTargetsResponse, error)

	// PostTargets request with any body
	PostTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTargetsResponse, error)

	PostTargetsWithResponse(ctx context.Context, body PostTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTargetsResponse, error)

	// DeleteTargetsTargetID request
	DeleteTargetsTargetIDWithResponse(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*DeleteTargetsTargetIDResponse, error)

	// GetTargetsTargetID request
	GetTargetsTargetIDWithResponse(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*GetTargetsTargetIDResponse, error)

	// PutTargetsTargetID request with any body
	PutTargetsTargetIDWithBodyWithResponse(ctx context.Context, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTargetsTargetIDResponse, error)

	PutTargetsTargetIDWithResponse(ctx context.Context, targetID TargetID, body PutTargetsTargetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTargetsTargetIDResponse, error)
}

type GetScanConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Items List of scan configs according to the given filters and page. List length must be lower or equal to pageSize.
		Items *[]ScanConfig `json:"items,omitempty"`

		// Total Total scan config count according to the given filters
		Total int `json:"total"`
	}
	JSONDefault *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetScanConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScanConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScanConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ScanConfig
	JSON409      *ScanConfig
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostScanConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScanConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScanConfigsScanConfigIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *SuccessResponse
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r DeleteScanConfigsScanConfigIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScanConfigsScanConfigIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScanConfigsScanConfigIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScanConfig
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetScanConfigsScanConfigIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScanConfigsScanConfigIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScanConfigsScanConfigIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScanConfig
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PatchScanConfigsScanConfigIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScanConfigsScanConfigIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutScanConfigsScanConfigIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScanConfig
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutScanConfigsScanConfigIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutScanConfigsScanConfigIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Items List of scans according to the given filters and page. List length must be lower or equal to pageSize.
		Items *[]Scan `json:"items,omitempty"`

		// Total Total scans count according to the given filters
		Total int `json:"total"`
	}
	JSONDefault *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Scan
	JSON409      *Scan
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScansScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *SuccessResponse
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r DeleteScansScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScansScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScansScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scan
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetScansScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScansScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScansScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scan
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PatchScansScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScansScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutScansScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scan
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutScansScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutScansScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScansScanIDTargetsTargetIDScanResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TargetScanResults
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetScansScanIDTargetsTargetIDScanResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScansScanIDTargetsTargetIDScanResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScansScanIDTargetsTargetIDScanResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TargetScanResults
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PatchScansScanIDTargetsTargetIDScanResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScansScanIDTargetsTargetIDScanResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScansScanIDTargetsTargetIDScanResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TargetScanResults
	JSON409      *TargetScanResults
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostScansScanIDTargetsTargetIDScanResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScansScanIDTargetsTargetIDScanResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutScansScanIDTargetsTargetIDScanResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TargetScanResults
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutScansScanIDTargetsTargetIDScanResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutScansScanIDTargetsTargetIDScanResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScansScanIDTargetsTargetIDScanStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TargetScanStatus
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetScansScanIDTargetsTargetIDScanStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScansScanIDTargetsTargetIDScanStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScansScanIDTargetsTargetIDScanStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TargetScanResults
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PatchScansScanIDTargetsTargetIDScanStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScansScanIDTargetsTargetIDScanStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScansScanIDTargetsTargetIDScanStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TargetScanStatus
	JSON409      *TargetScanStatus
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostScansScanIDTargetsTargetIDScanStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScansScanIDTargetsTargetIDScanStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutScansScanIDTargetsTargetIDScanStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TargetScanStatus
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutScansScanIDTargetsTargetIDScanStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutScansScanIDTargetsTargetIDScanStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Items List of targets in the given filters and page. List length must be lower or equal to pageSize.
		Items *[]Target `json:"items,omitempty"`

		// Total Total targets count according the given filters
		Total int `json:"total"`
	}
	JSONDefault *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetTargetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTargetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Target
	JSON409      *Target
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostTargetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTargetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTargetsTargetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *SuccessResponse
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTargetsTargetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTargetsTargetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetsTargetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Target
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetTargetsTargetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetsTargetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTargetsTargetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Target
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutTargetsTargetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTargetsTargetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetScanConfigsWithResponse request returning *GetScanConfigsResponse
func (c *ClientWithResponses) GetScanConfigsWithResponse(ctx context.Context, params *GetScanConfigsParams, reqEditors ...RequestEditorFn) (*GetScanConfigsResponse, error) {
	rsp, err := c.GetScanConfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScanConfigsResponse(rsp)
}

// PostScanConfigsWithBodyWithResponse request with arbitrary body returning *PostScanConfigsResponse
func (c *ClientWithResponses) PostScanConfigsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScanConfigsResponse, error) {
	rsp, err := c.PostScanConfigsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScanConfigsResponse(rsp)
}

func (c *ClientWithResponses) PostScanConfigsWithResponse(ctx context.Context, body PostScanConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScanConfigsResponse, error) {
	rsp, err := c.PostScanConfigs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScanConfigsResponse(rsp)
}

// DeleteScanConfigsScanConfigIDWithResponse request returning *DeleteScanConfigsScanConfigIDResponse
func (c *ClientWithResponses) DeleteScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, reqEditors ...RequestEditorFn) (*DeleteScanConfigsScanConfigIDResponse, error) {
	rsp, err := c.DeleteScanConfigsScanConfigID(ctx, scanConfigID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScanConfigsScanConfigIDResponse(rsp)
}

// GetScanConfigsScanConfigIDWithResponse request returning *GetScanConfigsScanConfigIDResponse
func (c *ClientWithResponses) GetScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, reqEditors ...RequestEditorFn) (*GetScanConfigsScanConfigIDResponse, error) {
	rsp, err := c.GetScanConfigsScanConfigID(ctx, scanConfigID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScanConfigsScanConfigIDResponse(rsp)
}

// PatchScanConfigsScanConfigIDWithBodyWithResponse request with arbitrary body returning *PatchScanConfigsScanConfigIDResponse
func (c *ClientWithResponses) PatchScanConfigsScanConfigIDWithBodyWithResponse(ctx context.Context, scanConfigID ScanConfigID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScanConfigsScanConfigIDResponse, error) {
	rsp, err := c.PatchScanConfigsScanConfigIDWithBody(ctx, scanConfigID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScanConfigsScanConfigIDResponse(rsp)
}

func (c *ClientWithResponses) PatchScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, body PatchScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScanConfigsScanConfigIDResponse, error) {
	rsp, err := c.PatchScanConfigsScanConfigID(ctx, scanConfigID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScanConfigsScanConfigIDResponse(rsp)
}

// PutScanConfigsScanConfigIDWithBodyWithResponse request with arbitrary body returning *PutScanConfigsScanConfigIDResponse
func (c *ClientWithResponses) PutScanConfigsScanConfigIDWithBodyWithResponse(ctx context.Context, scanConfigID ScanConfigID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScanConfigsScanConfigIDResponse, error) {
	rsp, err := c.PutScanConfigsScanConfigIDWithBody(ctx, scanConfigID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScanConfigsScanConfigIDResponse(rsp)
}

func (c *ClientWithResponses) PutScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, body PutScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScanConfigsScanConfigIDResponse, error) {
	rsp, err := c.PutScanConfigsScanConfigID(ctx, scanConfigID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScanConfigsScanConfigIDResponse(rsp)
}

// GetScansWithResponse request returning *GetScansResponse
func (c *ClientWithResponses) GetScansWithResponse(ctx context.Context, params *GetScansParams, reqEditors ...RequestEditorFn) (*GetScansResponse, error) {
	rsp, err := c.GetScans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScansResponse(rsp)
}

// PostScansWithBodyWithResponse request with arbitrary body returning *PostScansResponse
func (c *ClientWithResponses) PostScansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScansResponse, error) {
	rsp, err := c.PostScansWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScansResponse(rsp)
}

func (c *ClientWithResponses) PostScansWithResponse(ctx context.Context, body PostScansJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScansResponse, error) {
	rsp, err := c.PostScans(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScansResponse(rsp)
}

// DeleteScansScanIDWithResponse request returning *DeleteScansScanIDResponse
func (c *ClientWithResponses) DeleteScansScanIDWithResponse(ctx context.Context, scanID ScanID, reqEditors ...RequestEditorFn) (*DeleteScansScanIDResponse, error) {
	rsp, err := c.DeleteScansScanID(ctx, scanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScansScanIDResponse(rsp)
}

// GetScansScanIDWithResponse request returning *GetScansScanIDResponse
func (c *ClientWithResponses) GetScansScanIDWithResponse(ctx context.Context, scanID ScanID, reqEditors ...RequestEditorFn) (*GetScansScanIDResponse, error) {
	rsp, err := c.GetScansScanID(ctx, scanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScansScanIDResponse(rsp)
}

// PatchScansScanIDWithBodyWithResponse request with arbitrary body returning *PatchScansScanIDResponse
func (c *ClientWithResponses) PatchScansScanIDWithBodyWithResponse(ctx context.Context, scanID ScanID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScansScanIDResponse, error) {
	rsp, err := c.PatchScansScanIDWithBody(ctx, scanID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScansScanIDResponse(rsp)
}

func (c *ClientWithResponses) PatchScansScanIDWithResponse(ctx context.Context, scanID ScanID, body PatchScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScansScanIDResponse, error) {
	rsp, err := c.PatchScansScanID(ctx, scanID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScansScanIDResponse(rsp)
}

// PutScansScanIDWithBodyWithResponse request with arbitrary body returning *PutScansScanIDResponse
func (c *ClientWithResponses) PutScansScanIDWithBodyWithResponse(ctx context.Context, scanID ScanID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScansScanIDResponse, error) {
	rsp, err := c.PutScansScanIDWithBody(ctx, scanID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScansScanIDResponse(rsp)
}

func (c *ClientWithResponses) PutScansScanIDWithResponse(ctx context.Context, scanID ScanID, body PutScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScansScanIDResponse, error) {
	rsp, err := c.PutScansScanID(ctx, scanID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScansScanIDResponse(rsp)
}

// GetScansScanIDTargetsTargetIDScanResultsWithResponse request returning *GetScansScanIDTargetsTargetIDScanResultsResponse
func (c *ClientWithResponses) GetScansScanIDTargetsTargetIDScanResultsWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, reqEditors ...RequestEditorFn) (*GetScansScanIDTargetsTargetIDScanResultsResponse, error) {
	rsp, err := c.GetScansScanIDTargetsTargetIDScanResults(ctx, scanID, targetID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScansScanIDTargetsTargetIDScanResultsResponse(rsp)
}

// PatchScansScanIDTargetsTargetIDScanResultsWithBodyWithResponse request with arbitrary body returning *PatchScansScanIDTargetsTargetIDScanResultsResponse
func (c *ClientWithResponses) PatchScansScanIDTargetsTargetIDScanResultsWithBodyWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScansScanIDTargetsTargetIDScanResultsResponse, error) {
	rsp, err := c.PatchScansScanIDTargetsTargetIDScanResultsWithBody(ctx, scanID, targetID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScansScanIDTargetsTargetIDScanResultsResponse(rsp)
}

func (c *ClientWithResponses) PatchScansScanIDTargetsTargetIDScanResultsWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, body PatchScansScanIDTargetsTargetIDScanResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScansScanIDTargetsTargetIDScanResultsResponse, error) {
	rsp, err := c.PatchScansScanIDTargetsTargetIDScanResults(ctx, scanID, targetID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScansScanIDTargetsTargetIDScanResultsResponse(rsp)
}

// PostScansScanIDTargetsTargetIDScanResultsWithBodyWithResponse request with arbitrary body returning *PostScansScanIDTargetsTargetIDScanResultsResponse
func (c *ClientWithResponses) PostScansScanIDTargetsTargetIDScanResultsWithBodyWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScansScanIDTargetsTargetIDScanResultsResponse, error) {
	rsp, err := c.PostScansScanIDTargetsTargetIDScanResultsWithBody(ctx, scanID, targetID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScansScanIDTargetsTargetIDScanResultsResponse(rsp)
}

func (c *ClientWithResponses) PostScansScanIDTargetsTargetIDScanResultsWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, body PostScansScanIDTargetsTargetIDScanResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScansScanIDTargetsTargetIDScanResultsResponse, error) {
	rsp, err := c.PostScansScanIDTargetsTargetIDScanResults(ctx, scanID, targetID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScansScanIDTargetsTargetIDScanResultsResponse(rsp)
}

// PutScansScanIDTargetsTargetIDScanResultsWithBodyWithResponse request with arbitrary body returning *PutScansScanIDTargetsTargetIDScanResultsResponse
func (c *ClientWithResponses) PutScansScanIDTargetsTargetIDScanResultsWithBodyWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScansScanIDTargetsTargetIDScanResultsResponse, error) {
	rsp, err := c.PutScansScanIDTargetsTargetIDScanResultsWithBody(ctx, scanID, targetID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScansScanIDTargetsTargetIDScanResultsResponse(rsp)
}

func (c *ClientWithResponses) PutScansScanIDTargetsTargetIDScanResultsWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, body PutScansScanIDTargetsTargetIDScanResultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScansScanIDTargetsTargetIDScanResultsResponse, error) {
	rsp, err := c.PutScansScanIDTargetsTargetIDScanResults(ctx, scanID, targetID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScansScanIDTargetsTargetIDScanResultsResponse(rsp)
}

// GetScansScanIDTargetsTargetIDScanStatusWithResponse request returning *GetScansScanIDTargetsTargetIDScanStatusResponse
func (c *ClientWithResponses) GetScansScanIDTargetsTargetIDScanStatusWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, reqEditors ...RequestEditorFn) (*GetScansScanIDTargetsTargetIDScanStatusResponse, error) {
	rsp, err := c.GetScansScanIDTargetsTargetIDScanStatus(ctx, scanID, targetID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScansScanIDTargetsTargetIDScanStatusResponse(rsp)
}

// PatchScansScanIDTargetsTargetIDScanStatusWithBodyWithResponse request with arbitrary body returning *PatchScansScanIDTargetsTargetIDScanStatusResponse
func (c *ClientWithResponses) PatchScansScanIDTargetsTargetIDScanStatusWithBodyWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScansScanIDTargetsTargetIDScanStatusResponse, error) {
	rsp, err := c.PatchScansScanIDTargetsTargetIDScanStatusWithBody(ctx, scanID, targetID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScansScanIDTargetsTargetIDScanStatusResponse(rsp)
}

func (c *ClientWithResponses) PatchScansScanIDTargetsTargetIDScanStatusWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, body PatchScansScanIDTargetsTargetIDScanStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScansScanIDTargetsTargetIDScanStatusResponse, error) {
	rsp, err := c.PatchScansScanIDTargetsTargetIDScanStatus(ctx, scanID, targetID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScansScanIDTargetsTargetIDScanStatusResponse(rsp)
}

// PostScansScanIDTargetsTargetIDScanStatusWithBodyWithResponse request with arbitrary body returning *PostScansScanIDTargetsTargetIDScanStatusResponse
func (c *ClientWithResponses) PostScansScanIDTargetsTargetIDScanStatusWithBodyWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScansScanIDTargetsTargetIDScanStatusResponse, error) {
	rsp, err := c.PostScansScanIDTargetsTargetIDScanStatusWithBody(ctx, scanID, targetID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScansScanIDTargetsTargetIDScanStatusResponse(rsp)
}

func (c *ClientWithResponses) PostScansScanIDTargetsTargetIDScanStatusWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, body PostScansScanIDTargetsTargetIDScanStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScansScanIDTargetsTargetIDScanStatusResponse, error) {
	rsp, err := c.PostScansScanIDTargetsTargetIDScanStatus(ctx, scanID, targetID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScansScanIDTargetsTargetIDScanStatusResponse(rsp)
}

// PutScansScanIDTargetsTargetIDScanStatusWithBodyWithResponse request with arbitrary body returning *PutScansScanIDTargetsTargetIDScanStatusResponse
func (c *ClientWithResponses) PutScansScanIDTargetsTargetIDScanStatusWithBodyWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScansScanIDTargetsTargetIDScanStatusResponse, error) {
	rsp, err := c.PutScansScanIDTargetsTargetIDScanStatusWithBody(ctx, scanID, targetID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScansScanIDTargetsTargetIDScanStatusResponse(rsp)
}

func (c *ClientWithResponses) PutScansScanIDTargetsTargetIDScanStatusWithResponse(ctx context.Context, scanID ScanID, targetID TargetID, body PutScansScanIDTargetsTargetIDScanStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScansScanIDTargetsTargetIDScanStatusResponse, error) {
	rsp, err := c.PutScansScanIDTargetsTargetIDScanStatus(ctx, scanID, targetID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScansScanIDTargetsTargetIDScanStatusResponse(rsp)
}

// GetTargetsWithResponse request returning *GetTargetsResponse
func (c *ClientWithResponses) GetTargetsWithResponse(ctx context.Context, params *GetTargetsParams, reqEditors ...RequestEditorFn) (*GetTargetsResponse, error) {
	rsp, err := c.GetTargets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetsResponse(rsp)
}

// PostTargetsWithBodyWithResponse request with arbitrary body returning *PostTargetsResponse
func (c *ClientWithResponses) PostTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTargetsResponse, error) {
	rsp, err := c.PostTargetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTargetsResponse(rsp)
}

func (c *ClientWithResponses) PostTargetsWithResponse(ctx context.Context, body PostTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTargetsResponse, error) {
	rsp, err := c.PostTargets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTargetsResponse(rsp)
}

// DeleteTargetsTargetIDWithResponse request returning *DeleteTargetsTargetIDResponse
func (c *ClientWithResponses) DeleteTargetsTargetIDWithResponse(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*DeleteTargetsTargetIDResponse, error) {
	rsp, err := c.DeleteTargetsTargetID(ctx, targetID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTargetsTargetIDResponse(rsp)
}

// GetTargetsTargetIDWithResponse request returning *GetTargetsTargetIDResponse
func (c *ClientWithResponses) GetTargetsTargetIDWithResponse(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*GetTargetsTargetIDResponse, error) {
	rsp, err := c.GetTargetsTargetID(ctx, targetID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetsTargetIDResponse(rsp)
}

// PutTargetsTargetIDWithBodyWithResponse request with arbitrary body returning *PutTargetsTargetIDResponse
func (c *ClientWithResponses) PutTargetsTargetIDWithBodyWithResponse(ctx context.Context, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTargetsTargetIDResponse, error) {
	rsp, err := c.PutTargetsTargetIDWithBody(ctx, targetID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTargetsTargetIDResponse(rsp)
}

func (c *ClientWithResponses) PutTargetsTargetIDWithResponse(ctx context.Context, targetID TargetID, body PutTargetsTargetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTargetsTargetIDResponse, error) {
	rsp, err := c.PutTargetsTargetID(ctx, targetID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTargetsTargetIDResponse(rsp)
}

// ParseGetScanConfigsResponse parses an HTTP response from a GetScanConfigsWithResponse call
func ParseGetScanConfigsResponse(rsp *http.Response) (*GetScanConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScanConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Items List of scan configs according to the given filters and page. List length must be lower or equal to pageSize.
			Items *[]ScanConfig `json:"items,omitempty"`

			// Total Total scan config count according to the given filters
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostScanConfigsResponse parses an HTTP response from a PostScanConfigsWithResponse call
func ParsePostScanConfigsResponse(rsp *http.Response) (*PostScanConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScanConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScanConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ScanConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteScanConfigsScanConfigIDResponse parses an HTTP response from a DeleteScanConfigsScanConfigIDWithResponse call
func ParseDeleteScanConfigsScanConfigIDResponse(rsp *http.Response) (*DeleteScanConfigsScanConfigIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScanConfigsScanConfigIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetScanConfigsScanConfigIDResponse parses an HTTP response from a GetScanConfigsScanConfigIDWithResponse call
func ParseGetScanConfigsScanConfigIDResponse(rsp *http.Response) (*GetScanConfigsScanConfigIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScanConfigsScanConfigIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScanConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchScanConfigsScanConfigIDResponse parses an HTTP response from a PatchScanConfigsScanConfigIDWithResponse call
func ParsePatchScanConfigsScanConfigIDResponse(rsp *http.Response) (*PatchScanConfigsScanConfigIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScanConfigsScanConfigIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScanConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutScanConfigsScanConfigIDResponse parses an HTTP response from a PutScanConfigsScanConfigIDWithResponse call
func ParsePutScanConfigsScanConfigIDResponse(rsp *http.Response) (*PutScanConfigsScanConfigIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutScanConfigsScanConfigIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScanConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetScansResponse parses an HTTP response from a GetScansWithResponse call
func ParseGetScansResponse(rsp *http.Response) (*GetScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Items List of scans according to the given filters and page. List length must be lower or equal to pageSize.
			Items *[]Scan `json:"items,omitempty"`

			// Total Total scans count according to the given filters
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostScansResponse parses an HTTP response from a PostScansWithResponse call
func ParsePostScansResponse(rsp *http.Response) (*PostScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Scan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Scan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteScansScanIDResponse parses an HTTP response from a DeleteScansScanIDWithResponse call
func ParseDeleteScansScanIDResponse(rsp *http.Response) (*DeleteScansScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScansScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetScansScanIDResponse parses an HTTP response from a GetScansScanIDWithResponse call
func ParseGetScansScanIDResponse(rsp *http.Response) (*GetScansScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScansScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchScansScanIDResponse parses an HTTP response from a PatchScansScanIDWithResponse call
func ParsePatchScansScanIDResponse(rsp *http.Response) (*PatchScansScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScansScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutScansScanIDResponse parses an HTTP response from a PutScansScanIDWithResponse call
func ParsePutScansScanIDResponse(rsp *http.Response) (*PutScansScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutScansScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetScansScanIDTargetsTargetIDScanResultsResponse parses an HTTP response from a GetScansScanIDTargetsTargetIDScanResultsWithResponse call
func ParseGetScansScanIDTargetsTargetIDScanResultsResponse(rsp *http.Response) (*GetScansScanIDTargetsTargetIDScanResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScansScanIDTargetsTargetIDScanResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TargetScanResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchScansScanIDTargetsTargetIDScanResultsResponse parses an HTTP response from a PatchScansScanIDTargetsTargetIDScanResultsWithResponse call
func ParsePatchScansScanIDTargetsTargetIDScanResultsResponse(rsp *http.Response) (*PatchScansScanIDTargetsTargetIDScanResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScansScanIDTargetsTargetIDScanResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TargetScanResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostScansScanIDTargetsTargetIDScanResultsResponse parses an HTTP response from a PostScansScanIDTargetsTargetIDScanResultsWithResponse call
func ParsePostScansScanIDTargetsTargetIDScanResultsResponse(rsp *http.Response) (*PostScansScanIDTargetsTargetIDScanResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScansScanIDTargetsTargetIDScanResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TargetScanResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest TargetScanResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutScansScanIDTargetsTargetIDScanResultsResponse parses an HTTP response from a PutScansScanIDTargetsTargetIDScanResultsWithResponse call
func ParsePutScansScanIDTargetsTargetIDScanResultsResponse(rsp *http.Response) (*PutScansScanIDTargetsTargetIDScanResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutScansScanIDTargetsTargetIDScanResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TargetScanResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetScansScanIDTargetsTargetIDScanStatusResponse parses an HTTP response from a GetScansScanIDTargetsTargetIDScanStatusWithResponse call
func ParseGetScansScanIDTargetsTargetIDScanStatusResponse(rsp *http.Response) (*GetScansScanIDTargetsTargetIDScanStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScansScanIDTargetsTargetIDScanStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TargetScanStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchScansScanIDTargetsTargetIDScanStatusResponse parses an HTTP response from a PatchScansScanIDTargetsTargetIDScanStatusWithResponse call
func ParsePatchScansScanIDTargetsTargetIDScanStatusResponse(rsp *http.Response) (*PatchScansScanIDTargetsTargetIDScanStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScansScanIDTargetsTargetIDScanStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TargetScanResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostScansScanIDTargetsTargetIDScanStatusResponse parses an HTTP response from a PostScansScanIDTargetsTargetIDScanStatusWithResponse call
func ParsePostScansScanIDTargetsTargetIDScanStatusResponse(rsp *http.Response) (*PostScansScanIDTargetsTargetIDScanStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScansScanIDTargetsTargetIDScanStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TargetScanStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest TargetScanStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutScansScanIDTargetsTargetIDScanStatusResponse parses an HTTP response from a PutScansScanIDTargetsTargetIDScanStatusWithResponse call
func ParsePutScansScanIDTargetsTargetIDScanStatusResponse(rsp *http.Response) (*PutScansScanIDTargetsTargetIDScanStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutScansScanIDTargetsTargetIDScanStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TargetScanStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTargetsResponse parses an HTTP response from a GetTargetsWithResponse call
func ParseGetTargetsResponse(rsp *http.Response) (*GetTargetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Items List of targets in the given filters and page. List length must be lower or equal to pageSize.
			Items *[]Target `json:"items,omitempty"`

			// Total Total targets count according the given filters
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostTargetsResponse parses an HTTP response from a PostTargetsWithResponse call
func ParsePostTargetsResponse(rsp *http.Response) (*PostTargetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTargetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Target
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Target
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTargetsTargetIDResponse parses an HTTP response from a DeleteTargetsTargetIDWithResponse call
func ParseDeleteTargetsTargetIDResponse(rsp *http.Response) (*DeleteTargetsTargetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTargetsTargetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTargetsTargetIDResponse parses an HTTP response from a GetTargetsTargetIDWithResponse call
func ParseGetTargetsTargetIDResponse(rsp *http.Response) (*GetTargetsTargetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetsTargetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Target
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutTargetsTargetIDResponse parses an HTTP response from a PutTargetsTargetIDWithResponse call
func ParsePutTargetsTargetIDResponse(rsp *http.Response) (*PutTargetsTargetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTargetsTargetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Target
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
