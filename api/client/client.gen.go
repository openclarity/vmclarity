// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	. "github.com/openclarity/vmclarity/api/models"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetTargets request
	GetTargets(ctx context.Context, params *GetTargetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTargets request with any body
	PostTargetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTargets(ctx context.Context, body PostTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTargetsTargetID request
	DeleteTargetsTargetID(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTargetsTargetID request
	GetTargetsTargetID(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTargetsTargetID request with any body
	PutTargetsTargetIDWithBody(ctx context.Context, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTargetsTargetID(ctx context.Context, targetID TargetID, body PutTargetsTargetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTargetsTargetIDScanresults request
	GetTargetsTargetIDScanresults(ctx context.Context, targetID TargetID, params *GetTargetsTargetIDScanresultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTargetsTargetIDScanresults request with any body
	PostTargetsTargetIDScanresultsWithBody(ctx context.Context, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTargetsTargetIDScanresults(ctx context.Context, targetID TargetID, body PostTargetsTargetIDScanresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTargetsTargetIDScanresultsScanID request
	GetTargetsTargetIDScanresultsScanID(ctx context.Context, targetID TargetID, scanID ScanID, params *GetTargetsTargetIDScanresultsScanIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTargetsTargetIDScanresultsScanID request with any body
	PutTargetsTargetIDScanresultsScanIDWithBody(ctx context.Context, targetID TargetID, scanID ScanID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTargetsTargetIDScanresultsScanID(ctx context.Context, targetID TargetID, scanID ScanID, body PutTargetsTargetIDScanresultsScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetTargets(ctx context.Context, params *GetTargetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTargetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTargetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTargets(ctx context.Context, body PostTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTargetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTargetsTargetID(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTargetsTargetIDRequest(c.Server, targetID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetsTargetID(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetsTargetIDRequest(c.Server, targetID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTargetsTargetIDWithBody(ctx context.Context, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTargetsTargetIDRequestWithBody(c.Server, targetID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTargetsTargetID(ctx context.Context, targetID TargetID, body PutTargetsTargetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTargetsTargetIDRequest(c.Server, targetID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetsTargetIDScanresults(ctx context.Context, targetID TargetID, params *GetTargetsTargetIDScanresultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetsTargetIDScanresultsRequest(c.Server, targetID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTargetsTargetIDScanresultsWithBody(ctx context.Context, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTargetsTargetIDScanresultsRequestWithBody(c.Server, targetID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTargetsTargetIDScanresults(ctx context.Context, targetID TargetID, body PostTargetsTargetIDScanresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTargetsTargetIDScanresultsRequest(c.Server, targetID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetsTargetIDScanresultsScanID(ctx context.Context, targetID TargetID, scanID ScanID, params *GetTargetsTargetIDScanresultsScanIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetsTargetIDScanresultsScanIDRequest(c.Server, targetID, scanID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTargetsTargetIDScanresultsScanIDWithBody(ctx context.Context, targetID TargetID, scanID ScanID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTargetsTargetIDScanresultsScanIDRequestWithBody(c.Server, targetID, scanID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTargetsTargetIDScanresultsScanID(ctx context.Context, targetID TargetID, scanID ScanID, body PutTargetsTargetIDScanresultsScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTargetsTargetIDScanresultsScanIDRequest(c.Server, targetID, scanID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetTargetsRequest generates requests for GetTargets
func NewGetTargetsRequest(server string, params *GetTargetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTargetsRequest calls the generic PostTargets builder with application/json body
func NewPostTargetsRequest(server string, body PostTargetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTargetsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTargetsRequestWithBody generates requests for PostTargets with any type of body
func NewPostTargetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTargetsTargetIDRequest generates requests for DeleteTargetsTargetID
func NewDeleteTargetsTargetIDRequest(server string, targetID TargetID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTargetsTargetIDRequest generates requests for GetTargetsTargetID
func NewGetTargetsTargetIDRequest(server string, targetID TargetID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTargetsTargetIDRequest calls the generic PutTargetsTargetID builder with application/json body
func NewPutTargetsTargetIDRequest(server string, targetID TargetID, body PutTargetsTargetIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTargetsTargetIDRequestWithBody(server, targetID, "application/json", bodyReader)
}

// NewPutTargetsTargetIDRequestWithBody generates requests for PutTargetsTargetID with any type of body
func NewPutTargetsTargetIDRequestWithBody(server string, targetID TargetID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTargetsTargetIDScanresultsRequest generates requests for GetTargetsTargetIDScanresults
func NewGetTargetsTargetIDScanresultsRequest(server string, targetID TargetID, params *GetTargetsTargetIDScanresultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/targets/%s/scanresults", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTargetsTargetIDScanresultsRequest calls the generic PostTargetsTargetIDScanresults builder with application/json body
func NewPostTargetsTargetIDScanresultsRequest(server string, targetID TargetID, body PostTargetsTargetIDScanresultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTargetsTargetIDScanresultsRequestWithBody(server, targetID, "application/json", bodyReader)
}

// NewPostTargetsTargetIDScanresultsRequestWithBody generates requests for PostTargetsTargetIDScanresults with any type of body
func NewPostTargetsTargetIDScanresultsRequestWithBody(server string, targetID TargetID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/targets/%s/scanresults", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTargetsTargetIDScanresultsScanIDRequest generates requests for GetTargetsTargetIDScanresultsScanID
func NewGetTargetsTargetIDScanresultsScanIDRequest(server string, targetID TargetID, scanID ScanID, params *GetTargetsTargetIDScanresultsScanIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/targets/%s/scanresults/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ScanType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanType", runtime.ParamLocationQuery, *params.ScanType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTargetsTargetIDScanresultsScanIDRequest calls the generic PutTargetsTargetIDScanresultsScanID builder with application/json body
func NewPutTargetsTargetIDScanresultsScanIDRequest(server string, targetID TargetID, scanID ScanID, body PutTargetsTargetIDScanresultsScanIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTargetsTargetIDScanresultsScanIDRequestWithBody(server, targetID, scanID, "application/json", bodyReader)
}

// NewPutTargetsTargetIDScanresultsScanIDRequestWithBody generates requests for PutTargetsTargetIDScanresultsScanID with any type of body
func NewPutTargetsTargetIDScanresultsScanIDRequestWithBody(server string, targetID TargetID, scanID ScanID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetID", runtime.ParamLocationPath, targetID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/targets/%s/scanresults/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetTargets request
	GetTargetsWithResponse(ctx context.Context, params *GetTargetsParams, reqEditors ...RequestEditorFn) (*GetTargetsResponse, error)

	// PostTargets request with any body
	PostTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTargetsResponse, error)

	PostTargetsWithResponse(ctx context.Context, body PostTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTargetsResponse, error)

	// DeleteTargetsTargetID request
	DeleteTargetsTargetIDWithResponse(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*DeleteTargetsTargetIDResponse, error)

	// GetTargetsTargetID request
	GetTargetsTargetIDWithResponse(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*GetTargetsTargetIDResponse, error)

	// PutTargetsTargetID request with any body
	PutTargetsTargetIDWithBodyWithResponse(ctx context.Context, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTargetsTargetIDResponse, error)

	PutTargetsTargetIDWithResponse(ctx context.Context, targetID TargetID, body PutTargetsTargetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTargetsTargetIDResponse, error)

	// GetTargetsTargetIDScanresults request
	GetTargetsTargetIDScanresultsWithResponse(ctx context.Context, targetID TargetID, params *GetTargetsTargetIDScanresultsParams, reqEditors ...RequestEditorFn) (*GetTargetsTargetIDScanresultsResponse, error)

	// PostTargetsTargetIDScanresults request with any body
	PostTargetsTargetIDScanresultsWithBodyWithResponse(ctx context.Context, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTargetsTargetIDScanresultsResponse, error)

	PostTargetsTargetIDScanresultsWithResponse(ctx context.Context, targetID TargetID, body PostTargetsTargetIDScanresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTargetsTargetIDScanresultsResponse, error)

	// GetTargetsTargetIDScanresultsScanID request
	GetTargetsTargetIDScanresultsScanIDWithResponse(ctx context.Context, targetID TargetID, scanID ScanID, params *GetTargetsTargetIDScanresultsScanIDParams, reqEditors ...RequestEditorFn) (*GetTargetsTargetIDScanresultsScanIDResponse, error)

	// PutTargetsTargetIDScanresultsScanID request with any body
	PutTargetsTargetIDScanresultsScanIDWithBodyWithResponse(ctx context.Context, targetID TargetID, scanID ScanID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTargetsTargetIDScanresultsScanIDResponse, error)

	PutTargetsTargetIDScanresultsScanIDWithResponse(ctx context.Context, targetID TargetID, scanID ScanID, body PutTargetsTargetIDScanresultsScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTargetsTargetIDScanresultsScanIDResponse, error)
}

type GetTargetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Items List of targets in the given filters and page. List length must be lower or equal to pageSize.
		Items *[]Target `json:"items,omitempty"`

		// Total Total targets count under the given filters
		Total int `json:"total"`
	}
	JSONDefault *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetTargetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTargetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Target
	JSON409      *Target
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostTargetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTargetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTargetsTargetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *SuccessResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTargetsTargetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTargetsTargetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetsTargetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Target
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetTargetsTargetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetsTargetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTargetsTargetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Target
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutTargetsTargetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTargetsTargetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetsTargetIDScanresultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Items List of scan results for a specified target in the given filters and page. List length must be lower or equal to pageSize.
		Items *[]ScanResults `json:"items,omitempty"`

		// Total Total scan results count under the given filters
		Total int `json:"total"`
	}
	JSONDefault *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetTargetsTargetIDScanresultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetsTargetIDScanresultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTargetsTargetIDScanresultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ScanResultsSummary
	JSON409      *ScanResultsSummary
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostTargetsTargetIDScanresultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTargetsTargetIDScanresultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetsTargetIDScanresultsScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSONDefault *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetTargetsTargetIDScanresultsScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetsTargetIDScanresultsScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTargetsTargetIDScanresultsScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScanResultsSummary
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutTargetsTargetIDScanresultsScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTargetsTargetIDScanresultsScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetTargetsWithResponse request returning *GetTargetsResponse
func (c *ClientWithResponses) GetTargetsWithResponse(ctx context.Context, params *GetTargetsParams, reqEditors ...RequestEditorFn) (*GetTargetsResponse, error) {
	rsp, err := c.GetTargets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetsResponse(rsp)
}

// PostTargetsWithBodyWithResponse request with arbitrary body returning *PostTargetsResponse
func (c *ClientWithResponses) PostTargetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTargetsResponse, error) {
	rsp, err := c.PostTargetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTargetsResponse(rsp)
}

func (c *ClientWithResponses) PostTargetsWithResponse(ctx context.Context, body PostTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTargetsResponse, error) {
	rsp, err := c.PostTargets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTargetsResponse(rsp)
}

// DeleteTargetsTargetIDWithResponse request returning *DeleteTargetsTargetIDResponse
func (c *ClientWithResponses) DeleteTargetsTargetIDWithResponse(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*DeleteTargetsTargetIDResponse, error) {
	rsp, err := c.DeleteTargetsTargetID(ctx, targetID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTargetsTargetIDResponse(rsp)
}

// GetTargetsTargetIDWithResponse request returning *GetTargetsTargetIDResponse
func (c *ClientWithResponses) GetTargetsTargetIDWithResponse(ctx context.Context, targetID TargetID, reqEditors ...RequestEditorFn) (*GetTargetsTargetIDResponse, error) {
	rsp, err := c.GetTargetsTargetID(ctx, targetID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetsTargetIDResponse(rsp)
}

// PutTargetsTargetIDWithBodyWithResponse request with arbitrary body returning *PutTargetsTargetIDResponse
func (c *ClientWithResponses) PutTargetsTargetIDWithBodyWithResponse(ctx context.Context, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTargetsTargetIDResponse, error) {
	rsp, err := c.PutTargetsTargetIDWithBody(ctx, targetID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTargetsTargetIDResponse(rsp)
}

func (c *ClientWithResponses) PutTargetsTargetIDWithResponse(ctx context.Context, targetID TargetID, body PutTargetsTargetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTargetsTargetIDResponse, error) {
	rsp, err := c.PutTargetsTargetID(ctx, targetID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTargetsTargetIDResponse(rsp)
}

// GetTargetsTargetIDScanresultsWithResponse request returning *GetTargetsTargetIDScanresultsResponse
func (c *ClientWithResponses) GetTargetsTargetIDScanresultsWithResponse(ctx context.Context, targetID TargetID, params *GetTargetsTargetIDScanresultsParams, reqEditors ...RequestEditorFn) (*GetTargetsTargetIDScanresultsResponse, error) {
	rsp, err := c.GetTargetsTargetIDScanresults(ctx, targetID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetsTargetIDScanresultsResponse(rsp)
}

// PostTargetsTargetIDScanresultsWithBodyWithResponse request with arbitrary body returning *PostTargetsTargetIDScanresultsResponse
func (c *ClientWithResponses) PostTargetsTargetIDScanresultsWithBodyWithResponse(ctx context.Context, targetID TargetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTargetsTargetIDScanresultsResponse, error) {
	rsp, err := c.PostTargetsTargetIDScanresultsWithBody(ctx, targetID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTargetsTargetIDScanresultsResponse(rsp)
}

func (c *ClientWithResponses) PostTargetsTargetIDScanresultsWithResponse(ctx context.Context, targetID TargetID, body PostTargetsTargetIDScanresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTargetsTargetIDScanresultsResponse, error) {
	rsp, err := c.PostTargetsTargetIDScanresults(ctx, targetID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTargetsTargetIDScanresultsResponse(rsp)
}

// GetTargetsTargetIDScanresultsScanIDWithResponse request returning *GetTargetsTargetIDScanresultsScanIDResponse
func (c *ClientWithResponses) GetTargetsTargetIDScanresultsScanIDWithResponse(ctx context.Context, targetID TargetID, scanID ScanID, params *GetTargetsTargetIDScanresultsScanIDParams, reqEditors ...RequestEditorFn) (*GetTargetsTargetIDScanresultsScanIDResponse, error) {
	rsp, err := c.GetTargetsTargetIDScanresultsScanID(ctx, targetID, scanID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetsTargetIDScanresultsScanIDResponse(rsp)
}

// PutTargetsTargetIDScanresultsScanIDWithBodyWithResponse request with arbitrary body returning *PutTargetsTargetIDScanresultsScanIDResponse
func (c *ClientWithResponses) PutTargetsTargetIDScanresultsScanIDWithBodyWithResponse(ctx context.Context, targetID TargetID, scanID ScanID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTargetsTargetIDScanresultsScanIDResponse, error) {
	rsp, err := c.PutTargetsTargetIDScanresultsScanIDWithBody(ctx, targetID, scanID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTargetsTargetIDScanresultsScanIDResponse(rsp)
}

func (c *ClientWithResponses) PutTargetsTargetIDScanresultsScanIDWithResponse(ctx context.Context, targetID TargetID, scanID ScanID, body PutTargetsTargetIDScanresultsScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTargetsTargetIDScanresultsScanIDResponse, error) {
	rsp, err := c.PutTargetsTargetIDScanresultsScanID(ctx, targetID, scanID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTargetsTargetIDScanresultsScanIDResponse(rsp)
}

// ParseGetTargetsResponse parses an HTTP response from a GetTargetsWithResponse call
func ParseGetTargetsResponse(rsp *http.Response) (*GetTargetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Items List of targets in the given filters and page. List length must be lower or equal to pageSize.
			Items *[]Target `json:"items,omitempty"`

			// Total Total targets count under the given filters
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostTargetsResponse parses an HTTP response from a PostTargetsWithResponse call
func ParsePostTargetsResponse(rsp *http.Response) (*PostTargetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTargetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Target
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Target
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTargetsTargetIDResponse parses an HTTP response from a DeleteTargetsTargetIDWithResponse call
func ParseDeleteTargetsTargetIDResponse(rsp *http.Response) (*DeleteTargetsTargetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTargetsTargetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTargetsTargetIDResponse parses an HTTP response from a GetTargetsTargetIDWithResponse call
func ParseGetTargetsTargetIDResponse(rsp *http.Response) (*GetTargetsTargetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetsTargetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Target
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutTargetsTargetIDResponse parses an HTTP response from a PutTargetsTargetIDWithResponse call
func ParsePutTargetsTargetIDResponse(rsp *http.Response) (*PutTargetsTargetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTargetsTargetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Target
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTargetsTargetIDScanresultsResponse parses an HTTP response from a GetTargetsTargetIDScanresultsWithResponse call
func ParseGetTargetsTargetIDScanresultsResponse(rsp *http.Response) (*GetTargetsTargetIDScanresultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetsTargetIDScanresultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Items List of scan results for a specified target in the given filters and page. List length must be lower or equal to pageSize.
			Items *[]ScanResults `json:"items,omitempty"`

			// Total Total scan results count under the given filters
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostTargetsTargetIDScanresultsResponse parses an HTTP response from a PostTargetsTargetIDScanresultsWithResponse call
func ParsePostTargetsTargetIDScanresultsResponse(rsp *http.Response) (*PostTargetsTargetIDScanresultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTargetsTargetIDScanresultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScanResultsSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ScanResultsSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTargetsTargetIDScanresultsScanIDResponse parses an HTTP response from a GetTargetsTargetIDScanresultsScanIDWithResponse call
func ParseGetTargetsTargetIDScanresultsScanIDResponse(rsp *http.Response) (*GetTargetsTargetIDScanresultsScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetsTargetIDScanresultsScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutTargetsTargetIDScanresultsScanIDResponse parses an HTTP response from a PutTargetsTargetIDScanresultsScanIDWithResponse call
func ParsePutTargetsTargetIDScanresultsScanIDResponse(rsp *http.Response) (*PutTargetsTargetIDScanresultsScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTargetsTargetIDScanresultsScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScanResultsSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
