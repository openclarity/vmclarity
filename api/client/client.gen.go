// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	. "github.com/openclarity/vmclarity/api/models"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAssetScans request
	GetAssetScans(ctx context.Context, params *GetAssetScansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAssetScans request with any body
	PostAssetScansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAssetScans(ctx context.Context, body PostAssetScansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetScansAssetScanID request
	GetAssetScansAssetScanID(ctx context.Context, assetScanID AssetScanID, params *GetAssetScansAssetScanIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAssetScansAssetScanID request with any body
	PatchAssetScansAssetScanIDWithBody(ctx context.Context, assetScanID AssetScanID, params *PatchAssetScansAssetScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAssetScansAssetScanID(ctx context.Context, assetScanID AssetScanID, params *PatchAssetScansAssetScanIDParams, body PatchAssetScansAssetScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAssetScansAssetScanID request with any body
	PutAssetScansAssetScanIDWithBody(ctx context.Context, assetScanID AssetScanID, params *PutAssetScansAssetScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAssetScansAssetScanID(ctx context.Context, assetScanID AssetScanID, params *PutAssetScansAssetScanIDParams, body PutAssetScansAssetScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssets request
	GetAssets(ctx context.Context, params *GetAssetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAssets request with any body
	PostAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAssets(ctx context.Context, body PostAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAssetsAssetID request
	DeleteAssetsAssetID(ctx context.Context, assetID AssetID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetsAssetID request
	GetAssetsAssetID(ctx context.Context, assetID AssetID, params *GetAssetsAssetIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAssetsAssetID request with any body
	PatchAssetsAssetIDWithBody(ctx context.Context, assetID AssetID, params *PatchAssetsAssetIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAssetsAssetID(ctx context.Context, assetID AssetID, params *PatchAssetsAssetIDParams, body PatchAssetsAssetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAssetsAssetID request with any body
	PutAssetsAssetIDWithBody(ctx context.Context, assetID AssetID, params *PutAssetsAssetIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAssetsAssetID(ctx context.Context, assetID AssetID, params *PutAssetsAssetIDParams, body PutAssetsAssetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFindings request
	GetFindings(ctx context.Context, params *GetFindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFindings request with any body
	PostFindingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFindings(ctx context.Context, body PostFindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFindingsFindingID request
	DeleteFindingsFindingID(ctx context.Context, findingID FindingID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFindingsFindingID request
	GetFindingsFindingID(ctx context.Context, findingID FindingID, params *GetFindingsFindingIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchFindingsFindingID request with any body
	PatchFindingsFindingIDWithBody(ctx context.Context, findingID FindingID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchFindingsFindingID(ctx context.Context, findingID FindingID, body PatchFindingsFindingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFindingsFindingID request with any body
	PutFindingsFindingIDWithBody(ctx context.Context, findingID FindingID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFindingsFindingID(ctx context.Context, findingID FindingID, body PutFindingsFindingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenAPISpec request
	GetOpenAPISpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScanConfigs request
	GetScanConfigs(ctx context.Context, params *GetScanConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScanConfigs request with any body
	PostScanConfigsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScanConfigs(ctx context.Context, body PostScanConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScanConfigsScanConfigID request
	DeleteScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScanConfigsScanConfigID request
	GetScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, params *GetScanConfigsScanConfigIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScanConfigsScanConfigID request with any body
	PatchScanConfigsScanConfigIDWithBody(ctx context.Context, scanConfigID ScanConfigID, params *PatchScanConfigsScanConfigIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, params *PatchScanConfigsScanConfigIDParams, body PatchScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutScanConfigsScanConfigID request with any body
	PutScanConfigsScanConfigIDWithBody(ctx context.Context, scanConfigID ScanConfigID, params *PutScanConfigsScanConfigIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, params *PutScanConfigsScanConfigIDParams, body PutScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScans request
	GetScans(ctx context.Context, params *GetScansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScans request with any body
	PostScansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScans(ctx context.Context, body PostScansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScansScanID request
	DeleteScansScanID(ctx context.Context, scanID ScanID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScansScanID request
	GetScansScanID(ctx context.Context, scanID ScanID, params *GetScansScanIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScansScanID request with any body
	PatchScansScanIDWithBody(ctx context.Context, scanID ScanID, params *PatchScansScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScansScanID(ctx context.Context, scanID ScanID, params *PatchScansScanIDParams, body PatchScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutScansScanID request with any body
	PutScansScanIDWithBody(ctx context.Context, scanID ScanID, params *PutScansScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutScansScanID(ctx context.Context, scanID ScanID, params *PutScansScanIDParams, body PutScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAssetScans(ctx context.Context, params *GetAssetScansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetScansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAssetScansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAssetScansRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAssetScans(ctx context.Context, body PostAssetScansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAssetScansRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetScansAssetScanID(ctx context.Context, assetScanID AssetScanID, params *GetAssetScansAssetScanIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetScansAssetScanIDRequest(c.Server, assetScanID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAssetScansAssetScanIDWithBody(ctx context.Context, assetScanID AssetScanID, params *PatchAssetScansAssetScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAssetScansAssetScanIDRequestWithBody(c.Server, assetScanID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAssetScansAssetScanID(ctx context.Context, assetScanID AssetScanID, params *PatchAssetScansAssetScanIDParams, body PatchAssetScansAssetScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAssetScansAssetScanIDRequest(c.Server, assetScanID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAssetScansAssetScanIDWithBody(ctx context.Context, assetScanID AssetScanID, params *PutAssetScansAssetScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAssetScansAssetScanIDRequestWithBody(c.Server, assetScanID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAssetScansAssetScanID(ctx context.Context, assetScanID AssetScanID, params *PutAssetScansAssetScanIDParams, body PutAssetScansAssetScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAssetScansAssetScanIDRequest(c.Server, assetScanID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssets(ctx context.Context, params *GetAssetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAssetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAssets(ctx context.Context, body PostAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAssetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAssetsAssetID(ctx context.Context, assetID AssetID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAssetsAssetIDRequest(c.Server, assetID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetsAssetID(ctx context.Context, assetID AssetID, params *GetAssetsAssetIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetsAssetIDRequest(c.Server, assetID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAssetsAssetIDWithBody(ctx context.Context, assetID AssetID, params *PatchAssetsAssetIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAssetsAssetIDRequestWithBody(c.Server, assetID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAssetsAssetID(ctx context.Context, assetID AssetID, params *PatchAssetsAssetIDParams, body PatchAssetsAssetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAssetsAssetIDRequest(c.Server, assetID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAssetsAssetIDWithBody(ctx context.Context, assetID AssetID, params *PutAssetsAssetIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAssetsAssetIDRequestWithBody(c.Server, assetID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAssetsAssetID(ctx context.Context, assetID AssetID, params *PutAssetsAssetIDParams, body PutAssetsAssetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAssetsAssetIDRequest(c.Server, assetID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFindings(ctx context.Context, params *GetFindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFindingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFindingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFindingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFindings(ctx context.Context, body PostFindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFindingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFindingsFindingID(ctx context.Context, findingID FindingID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFindingsFindingIDRequest(c.Server, findingID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFindingsFindingID(ctx context.Context, findingID FindingID, params *GetFindingsFindingIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFindingsFindingIDRequest(c.Server, findingID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFindingsFindingIDWithBody(ctx context.Context, findingID FindingID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFindingsFindingIDRequestWithBody(c.Server, findingID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFindingsFindingID(ctx context.Context, findingID FindingID, body PatchFindingsFindingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFindingsFindingIDRequest(c.Server, findingID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFindingsFindingIDWithBody(ctx context.Context, findingID FindingID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFindingsFindingIDRequestWithBody(c.Server, findingID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFindingsFindingID(ctx context.Context, findingID FindingID, body PutFindingsFindingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFindingsFindingIDRequest(c.Server, findingID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenAPISpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenAPISpecRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScanConfigs(ctx context.Context, params *GetScanConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScanConfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScanConfigsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScanConfigsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScanConfigs(ctx context.Context, body PostScanConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScanConfigsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScanConfigsScanConfigIDRequest(c.Server, scanConfigID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, params *GetScanConfigsScanConfigIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScanConfigsScanConfigIDRequest(c.Server, scanConfigID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScanConfigsScanConfigIDWithBody(ctx context.Context, scanConfigID ScanConfigID, params *PatchScanConfigsScanConfigIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScanConfigsScanConfigIDRequestWithBody(c.Server, scanConfigID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, params *PatchScanConfigsScanConfigIDParams, body PatchScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScanConfigsScanConfigIDRequest(c.Server, scanConfigID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScanConfigsScanConfigIDWithBody(ctx context.Context, scanConfigID ScanConfigID, params *PutScanConfigsScanConfigIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScanConfigsScanConfigIDRequestWithBody(c.Server, scanConfigID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScanConfigsScanConfigID(ctx context.Context, scanConfigID ScanConfigID, params *PutScanConfigsScanConfigIDParams, body PutScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScanConfigsScanConfigIDRequest(c.Server, scanConfigID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScans(ctx context.Context, params *GetScansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScansRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScans(ctx context.Context, body PostScansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScansRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScansScanID(ctx context.Context, scanID ScanID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScansScanIDRequest(c.Server, scanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScansScanID(ctx context.Context, scanID ScanID, params *GetScansScanIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScansScanIDRequest(c.Server, scanID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScansScanIDWithBody(ctx context.Context, scanID ScanID, params *PatchScansScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScansScanIDRequestWithBody(c.Server, scanID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScansScanID(ctx context.Context, scanID ScanID, params *PatchScansScanIDParams, body PatchScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScansScanIDRequest(c.Server, scanID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScansScanIDWithBody(ctx context.Context, scanID ScanID, params *PutScansScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScansScanIDRequestWithBody(c.Server, scanID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScansScanID(ctx context.Context, scanID ScanID, params *PutScansScanIDParams, body PutScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScansScanIDRequest(c.Server, scanID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAssetScansRequest generates requests for GetAssetScans
func NewGetAssetScansRequest(server string, params *GetAssetScansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assetScans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Top != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Skip != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$orderby", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAssetScansRequest calls the generic PostAssetScans builder with application/json body
func NewPostAssetScansRequest(server string, body PostAssetScansJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAssetScansRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAssetScansRequestWithBody generates requests for PostAssetScans with any type of body
func NewPostAssetScansRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assetScans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAssetScansAssetScanIDRequest generates requests for GetAssetScansAssetScanID
func NewGetAssetScansAssetScanIDRequest(server string, assetScanID AssetScanID, params *GetAssetScansAssetScanIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assetScanID", runtime.ParamLocationPath, assetScanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assetScans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAssetScansAssetScanIDRequest calls the generic PatchAssetScansAssetScanID builder with application/json body
func NewPatchAssetScansAssetScanIDRequest(server string, assetScanID AssetScanID, params *PatchAssetScansAssetScanIDParams, body PatchAssetScansAssetScanIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAssetScansAssetScanIDRequestWithBody(server, assetScanID, params, "application/json", bodyReader)
}

// NewPatchAssetScansAssetScanIDRequestWithBody generates requests for PatchAssetScansAssetScanID with any type of body
func NewPatchAssetScansAssetScanIDRequestWithBody(server string, assetScanID AssetScanID, params *PatchAssetScansAssetScanIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assetScanID", runtime.ParamLocationPath, assetScanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assetScans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewPutAssetScansAssetScanIDRequest calls the generic PutAssetScansAssetScanID builder with application/json body
func NewPutAssetScansAssetScanIDRequest(server string, assetScanID AssetScanID, params *PutAssetScansAssetScanIDParams, body PutAssetScansAssetScanIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAssetScansAssetScanIDRequestWithBody(server, assetScanID, params, "application/json", bodyReader)
}

// NewPutAssetScansAssetScanIDRequestWithBody generates requests for PutAssetScansAssetScanID with any type of body
func NewPutAssetScansAssetScanIDRequestWithBody(server string, assetScanID AssetScanID, params *PutAssetScansAssetScanIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assetScanID", runtime.ParamLocationPath, assetScanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assetScans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewGetAssetsRequest generates requests for GetAssets
func NewGetAssetsRequest(server string, params *GetAssetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Top != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Skip != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$orderby", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAssetsRequest calls the generic PostAssets builder with application/json body
func NewPostAssetsRequest(server string, body PostAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAssetsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAssetsRequestWithBody generates requests for PostAssets with any type of body
func NewPostAssetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAssetsAssetIDRequest generates requests for DeleteAssetsAssetID
func NewDeleteAssetsAssetIDRequest(server string, assetID AssetID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assetID", runtime.ParamLocationPath, assetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssetsAssetIDRequest generates requests for GetAssetsAssetID
func NewGetAssetsAssetIDRequest(server string, assetID AssetID, params *GetAssetsAssetIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assetID", runtime.ParamLocationPath, assetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAssetsAssetIDRequest calls the generic PatchAssetsAssetID builder with application/json body
func NewPatchAssetsAssetIDRequest(server string, assetID AssetID, params *PatchAssetsAssetIDParams, body PatchAssetsAssetIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAssetsAssetIDRequestWithBody(server, assetID, params, "application/json", bodyReader)
}

// NewPatchAssetsAssetIDRequestWithBody generates requests for PatchAssetsAssetID with any type of body
func NewPatchAssetsAssetIDRequestWithBody(server string, assetID AssetID, params *PatchAssetsAssetIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assetID", runtime.ParamLocationPath, assetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewPutAssetsAssetIDRequest calls the generic PutAssetsAssetID builder with application/json body
func NewPutAssetsAssetIDRequest(server string, assetID AssetID, params *PutAssetsAssetIDParams, body PutAssetsAssetIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAssetsAssetIDRequestWithBody(server, assetID, params, "application/json", bodyReader)
}

// NewPutAssetsAssetIDRequestWithBody generates requests for PutAssetsAssetID with any type of body
func NewPutAssetsAssetIDRequestWithBody(server string, assetID AssetID, params *PutAssetsAssetIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assetID", runtime.ParamLocationPath, assetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewGetFindingsRequest generates requests for GetFindings
func NewGetFindingsRequest(server string, params *GetFindingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/findings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Top != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Skip != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$orderby", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFindingsRequest calls the generic PostFindings builder with application/json body
func NewPostFindingsRequest(server string, body PostFindingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFindingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFindingsRequestWithBody generates requests for PostFindings with any type of body
func NewPostFindingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/findings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFindingsFindingIDRequest generates requests for DeleteFindingsFindingID
func NewDeleteFindingsFindingIDRequest(server string, findingID FindingID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "findingID", runtime.ParamLocationPath, findingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/findings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFindingsFindingIDRequest generates requests for GetFindingsFindingID
func NewGetFindingsFindingIDRequest(server string, findingID FindingID, params *GetFindingsFindingIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "findingID", runtime.ParamLocationPath, findingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/findings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchFindingsFindingIDRequest calls the generic PatchFindingsFindingID builder with application/json body
func NewPatchFindingsFindingIDRequest(server string, findingID FindingID, body PatchFindingsFindingIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchFindingsFindingIDRequestWithBody(server, findingID, "application/json", bodyReader)
}

// NewPatchFindingsFindingIDRequestWithBody generates requests for PatchFindingsFindingID with any type of body
func NewPatchFindingsFindingIDRequestWithBody(server string, findingID FindingID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "findingID", runtime.ParamLocationPath, findingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/findings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutFindingsFindingIDRequest calls the generic PutFindingsFindingID builder with application/json body
func NewPutFindingsFindingIDRequest(server string, findingID FindingID, body PutFindingsFindingIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFindingsFindingIDRequestWithBody(server, findingID, "application/json", bodyReader)
}

// NewPutFindingsFindingIDRequestWithBody generates requests for PutFindingsFindingID with any type of body
func NewPutFindingsFindingIDRequestWithBody(server string, findingID FindingID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "findingID", runtime.ParamLocationPath, findingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/findings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOpenAPISpecRequest generates requests for GetOpenAPISpec
func NewGetOpenAPISpecRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScanConfigsRequest generates requests for GetScanConfigs
func NewGetScanConfigsRequest(server string, params *GetScanConfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanConfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Top != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Skip != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$orderby", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostScanConfigsRequest calls the generic PostScanConfigs builder with application/json body
func NewPostScanConfigsRequest(server string, body PostScanConfigsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostScanConfigsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostScanConfigsRequestWithBody generates requests for PostScanConfigs with any type of body
func NewPostScanConfigsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanConfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScanConfigsScanConfigIDRequest generates requests for DeleteScanConfigsScanConfigID
func NewDeleteScanConfigsScanConfigIDRequest(server string, scanConfigID ScanConfigID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, scanConfigID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanConfigs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScanConfigsScanConfigIDRequest generates requests for GetScanConfigsScanConfigID
func NewGetScanConfigsScanConfigIDRequest(server string, scanConfigID ScanConfigID, params *GetScanConfigsScanConfigIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, scanConfigID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanConfigs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScanConfigsScanConfigIDRequest calls the generic PatchScanConfigsScanConfigID builder with application/json body
func NewPatchScanConfigsScanConfigIDRequest(server string, scanConfigID ScanConfigID, params *PatchScanConfigsScanConfigIDParams, body PatchScanConfigsScanConfigIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScanConfigsScanConfigIDRequestWithBody(server, scanConfigID, params, "application/json", bodyReader)
}

// NewPatchScanConfigsScanConfigIDRequestWithBody generates requests for PatchScanConfigsScanConfigID with any type of body
func NewPatchScanConfigsScanConfigIDRequestWithBody(server string, scanConfigID ScanConfigID, params *PatchScanConfigsScanConfigIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, scanConfigID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanConfigs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewPutScanConfigsScanConfigIDRequest calls the generic PutScanConfigsScanConfigID builder with application/json body
func NewPutScanConfigsScanConfigIDRequest(server string, scanConfigID ScanConfigID, params *PutScanConfigsScanConfigIDParams, body PutScanConfigsScanConfigIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutScanConfigsScanConfigIDRequestWithBody(server, scanConfigID, params, "application/json", bodyReader)
}

// NewPutScanConfigsScanConfigIDRequestWithBody generates requests for PutScanConfigsScanConfigID with any type of body
func NewPutScanConfigsScanConfigIDRequestWithBody(server string, scanConfigID ScanConfigID, params *PutScanConfigsScanConfigIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, scanConfigID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanConfigs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewGetScansRequest generates requests for GetScans
func NewGetScansRequest(server string, params *GetScansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Top != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Skip != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$orderby", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostScansRequest calls the generic PostScans builder with application/json body
func NewPostScansRequest(server string, body PostScansJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostScansRequestWithBody(server, "application/json", bodyReader)
}

// NewPostScansRequestWithBody generates requests for PostScans with any type of body
func NewPostScansRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScansScanIDRequest generates requests for DeleteScansScanID
func NewDeleteScansScanIDRequest(server string, scanID ScanID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScansScanIDRequest generates requests for GetScansScanID
func NewGetScansScanIDRequest(server string, scanID ScanID, params *GetScansScanIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScansScanIDRequest calls the generic PatchScansScanID builder with application/json body
func NewPatchScansScanIDRequest(server string, scanID ScanID, params *PatchScansScanIDParams, body PatchScansScanIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScansScanIDRequestWithBody(server, scanID, params, "application/json", bodyReader)
}

// NewPatchScansScanIDRequestWithBody generates requests for PatchScansScanID with any type of body
func NewPatchScansScanIDRequestWithBody(server string, scanID ScanID, params *PatchScansScanIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewPutScansScanIDRequest calls the generic PutScansScanID builder with application/json body
func NewPutScansScanIDRequest(server string, scanID ScanID, params *PutScansScanIDParams, body PutScansScanIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutScansScanIDRequestWithBody(server, scanID, params, "application/json", bodyReader)
}

// NewPutScansScanIDRequestWithBody generates requests for PutScansScanID with any type of body
func NewPutScansScanIDRequestWithBody(server string, scanID ScanID, params *PutScansScanIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAssetScans request
	GetAssetScansWithResponse(ctx context.Context, params *GetAssetScansParams, reqEditors ...RequestEditorFn) (*GetAssetScansResponse, error)

	// PostAssetScans request with any body
	PostAssetScansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAssetScansResponse, error)

	PostAssetScansWithResponse(ctx context.Context, body PostAssetScansJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAssetScansResponse, error)

	// GetAssetScansAssetScanID request
	GetAssetScansAssetScanIDWithResponse(ctx context.Context, assetScanID AssetScanID, params *GetAssetScansAssetScanIDParams, reqEditors ...RequestEditorFn) (*GetAssetScansAssetScanIDResponse, error)

	// PatchAssetScansAssetScanID request with any body
	PatchAssetScansAssetScanIDWithBodyWithResponse(ctx context.Context, assetScanID AssetScanID, params *PatchAssetScansAssetScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAssetScansAssetScanIDResponse, error)

	PatchAssetScansAssetScanIDWithResponse(ctx context.Context, assetScanID AssetScanID, params *PatchAssetScansAssetScanIDParams, body PatchAssetScansAssetScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAssetScansAssetScanIDResponse, error)

	// PutAssetScansAssetScanID request with any body
	PutAssetScansAssetScanIDWithBodyWithResponse(ctx context.Context, assetScanID AssetScanID, params *PutAssetScansAssetScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAssetScansAssetScanIDResponse, error)

	PutAssetScansAssetScanIDWithResponse(ctx context.Context, assetScanID AssetScanID, params *PutAssetScansAssetScanIDParams, body PutAssetScansAssetScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAssetScansAssetScanIDResponse, error)

	// GetAssets request
	GetAssetsWithResponse(ctx context.Context, params *GetAssetsParams, reqEditors ...RequestEditorFn) (*GetAssetsResponse, error)

	// PostAssets request with any body
	PostAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAssetsResponse, error)

	PostAssetsWithResponse(ctx context.Context, body PostAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAssetsResponse, error)

	// DeleteAssetsAssetID request
	DeleteAssetsAssetIDWithResponse(ctx context.Context, assetID AssetID, reqEditors ...RequestEditorFn) (*DeleteAssetsAssetIDResponse, error)

	// GetAssetsAssetID request
	GetAssetsAssetIDWithResponse(ctx context.Context, assetID AssetID, params *GetAssetsAssetIDParams, reqEditors ...RequestEditorFn) (*GetAssetsAssetIDResponse, error)

	// PatchAssetsAssetID request with any body
	PatchAssetsAssetIDWithBodyWithResponse(ctx context.Context, assetID AssetID, params *PatchAssetsAssetIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAssetsAssetIDResponse, error)

	PatchAssetsAssetIDWithResponse(ctx context.Context, assetID AssetID, params *PatchAssetsAssetIDParams, body PatchAssetsAssetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAssetsAssetIDResponse, error)

	// PutAssetsAssetID request with any body
	PutAssetsAssetIDWithBodyWithResponse(ctx context.Context, assetID AssetID, params *PutAssetsAssetIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAssetsAssetIDResponse, error)

	PutAssetsAssetIDWithResponse(ctx context.Context, assetID AssetID, params *PutAssetsAssetIDParams, body PutAssetsAssetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAssetsAssetIDResponse, error)

	// GetFindings request
	GetFindingsWithResponse(ctx context.Context, params *GetFindingsParams, reqEditors ...RequestEditorFn) (*GetFindingsResponse, error)

	// PostFindings request with any body
	PostFindingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFindingsResponse, error)

	PostFindingsWithResponse(ctx context.Context, body PostFindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFindingsResponse, error)

	// DeleteFindingsFindingID request
	DeleteFindingsFindingIDWithResponse(ctx context.Context, findingID FindingID, reqEditors ...RequestEditorFn) (*DeleteFindingsFindingIDResponse, error)

	// GetFindingsFindingID request
	GetFindingsFindingIDWithResponse(ctx context.Context, findingID FindingID, params *GetFindingsFindingIDParams, reqEditors ...RequestEditorFn) (*GetFindingsFindingIDResponse, error)

	// PatchFindingsFindingID request with any body
	PatchFindingsFindingIDWithBodyWithResponse(ctx context.Context, findingID FindingID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFindingsFindingIDResponse, error)

	PatchFindingsFindingIDWithResponse(ctx context.Context, findingID FindingID, body PatchFindingsFindingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFindingsFindingIDResponse, error)

	// PutFindingsFindingID request with any body
	PutFindingsFindingIDWithBodyWithResponse(ctx context.Context, findingID FindingID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFindingsFindingIDResponse, error)

	PutFindingsFindingIDWithResponse(ctx context.Context, findingID FindingID, body PutFindingsFindingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFindingsFindingIDResponse, error)

	// GetOpenAPISpec request
	GetOpenAPISpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenAPISpecResponse, error)

	// GetScanConfigs request
	GetScanConfigsWithResponse(ctx context.Context, params *GetScanConfigsParams, reqEditors ...RequestEditorFn) (*GetScanConfigsResponse, error)

	// PostScanConfigs request with any body
	PostScanConfigsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScanConfigsResponse, error)

	PostScanConfigsWithResponse(ctx context.Context, body PostScanConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScanConfigsResponse, error)

	// DeleteScanConfigsScanConfigID request
	DeleteScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, reqEditors ...RequestEditorFn) (*DeleteScanConfigsScanConfigIDResponse, error)

	// GetScanConfigsScanConfigID request
	GetScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, params *GetScanConfigsScanConfigIDParams, reqEditors ...RequestEditorFn) (*GetScanConfigsScanConfigIDResponse, error)

	// PatchScanConfigsScanConfigID request with any body
	PatchScanConfigsScanConfigIDWithBodyWithResponse(ctx context.Context, scanConfigID ScanConfigID, params *PatchScanConfigsScanConfigIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScanConfigsScanConfigIDResponse, error)

	PatchScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, params *PatchScanConfigsScanConfigIDParams, body PatchScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScanConfigsScanConfigIDResponse, error)

	// PutScanConfigsScanConfigID request with any body
	PutScanConfigsScanConfigIDWithBodyWithResponse(ctx context.Context, scanConfigID ScanConfigID, params *PutScanConfigsScanConfigIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScanConfigsScanConfigIDResponse, error)

	PutScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, params *PutScanConfigsScanConfigIDParams, body PutScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScanConfigsScanConfigIDResponse, error)

	// GetScans request
	GetScansWithResponse(ctx context.Context, params *GetScansParams, reqEditors ...RequestEditorFn) (*GetScansResponse, error)

	// PostScans request with any body
	PostScansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScansResponse, error)

	PostScansWithResponse(ctx context.Context, body PostScansJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScansResponse, error)

	// DeleteScansScanID request
	DeleteScansScanIDWithResponse(ctx context.Context, scanID ScanID, reqEditors ...RequestEditorFn) (*DeleteScansScanIDResponse, error)

	// GetScansScanID request
	GetScansScanIDWithResponse(ctx context.Context, scanID ScanID, params *GetScansScanIDParams, reqEditors ...RequestEditorFn) (*GetScansScanIDResponse, error)

	// PatchScansScanID request with any body
	PatchScansScanIDWithBodyWithResponse(ctx context.Context, scanID ScanID, params *PatchScansScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScansScanIDResponse, error)

	PatchScansScanIDWithResponse(ctx context.Context, scanID ScanID, params *PatchScansScanIDParams, body PatchScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScansScanIDResponse, error)

	// PutScansScanID request with any body
	PutScansScanIDWithBodyWithResponse(ctx context.Context, scanID ScanID, params *PutScansScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScansScanIDResponse, error)

	PutScansScanIDWithResponse(ctx context.Context, scanID ScanID, params *PutScansScanIDParams, body PutScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScansScanIDResponse, error)
}

type GetAssetScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetScans
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetAssetScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAssetScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AssetScan
	JSON400      *ApiResponse
	JSON409      *AssetScanExists
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostAssetScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAssetScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetScansAssetScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetScan
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetAssetScansAssetScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetScansAssetScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAssetScansAssetScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetScan
	JSON400      *ApiResponse
	JSON404      *ApiResponse
	JSON409      *AssetScanExists
	JSON412      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PatchAssetScansAssetScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAssetScansAssetScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAssetScansAssetScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetScan
	JSON400      *ApiResponse
	JSON404      *ApiResponse
	JSON409      *AssetScanExists
	JSON412      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutAssetScansAssetScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAssetScansAssetScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Assets
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Asset
	JSON400      *ApiResponse
	JSON409      *AssetExists
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAssetsAssetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
	JSON400      *ApiResponse
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r DeleteAssetsAssetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAssetsAssetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetsAssetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Asset
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetAssetsAssetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetsAssetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAssetsAssetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Asset
	JSON404      *ApiResponse
	JSON409      *AssetExists
	JSON412      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PatchAssetsAssetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAssetsAssetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAssetsAssetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Asset
	JSON400      *ApiResponse
	JSON404      *ApiResponse
	JSON409      *AssetExists
	JSON412      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutAssetsAssetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAssetsAssetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Findings
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetFindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Finding
	JSON400      *ApiResponse
	JSON409      *FindingExists
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostFindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFindingsFindingIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r DeleteFindingsFindingIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFindingsFindingIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFindingsFindingIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Finding
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetFindingsFindingIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFindingsFindingIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchFindingsFindingIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Finding
	JSON400      *ApiResponse
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PatchFindingsFindingIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchFindingsFindingIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFindingsFindingIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Finding
	JSON400      *ApiResponse
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutFindingsFindingIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFindingsFindingIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenAPISpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *json.RawMessage
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetOpenAPISpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenAPISpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScanConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScanConfigs
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetScanConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScanConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScanConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ScanConfig
	JSON400      *ApiResponse
	JSON409      *ScanConfigExists
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostScanConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScanConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScanConfigsScanConfigIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r DeleteScanConfigsScanConfigIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScanConfigsScanConfigIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScanConfigsScanConfigIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScanConfig
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetScanConfigsScanConfigIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScanConfigsScanConfigIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScanConfigsScanConfigIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScanConfig
	JSON400      *ApiResponse
	JSON404      *ApiResponse
	JSON409      *ScanConfigExists
	JSON412      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PatchScanConfigsScanConfigIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScanConfigsScanConfigIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutScanConfigsScanConfigIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScanConfig
	JSON400      *ApiResponse
	JSON404      *ApiResponse
	JSON409      *ScanConfigExists
	JSON412      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutScanConfigsScanConfigIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutScanConfigsScanConfigIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scans
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Scan
	JSON400      *ApiResponse
	JSON409      *ScanExists
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScansScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r DeleteScansScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScansScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScansScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scan
	JSON404      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetScansScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScansScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScansScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scan
	JSON400      *ApiResponse
	JSON404      *ApiResponse
	JSON409      *ScanExists
	JSON412      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PatchScansScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScansScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutScansScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scan
	JSON400      *ApiResponse
	JSON404      *ApiResponse
	JSON409      *ScanExists
	JSON412      *ApiResponse
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutScansScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutScansScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAssetScansWithResponse request returning *GetAssetScansResponse
func (c *ClientWithResponses) GetAssetScansWithResponse(ctx context.Context, params *GetAssetScansParams, reqEditors ...RequestEditorFn) (*GetAssetScansResponse, error) {
	rsp, err := c.GetAssetScans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetScansResponse(rsp)
}

// PostAssetScansWithBodyWithResponse request with arbitrary body returning *PostAssetScansResponse
func (c *ClientWithResponses) PostAssetScansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAssetScansResponse, error) {
	rsp, err := c.PostAssetScansWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAssetScansResponse(rsp)
}

func (c *ClientWithResponses) PostAssetScansWithResponse(ctx context.Context, body PostAssetScansJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAssetScansResponse, error) {
	rsp, err := c.PostAssetScans(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAssetScansResponse(rsp)
}

// GetAssetScansAssetScanIDWithResponse request returning *GetAssetScansAssetScanIDResponse
func (c *ClientWithResponses) GetAssetScansAssetScanIDWithResponse(ctx context.Context, assetScanID AssetScanID, params *GetAssetScansAssetScanIDParams, reqEditors ...RequestEditorFn) (*GetAssetScansAssetScanIDResponse, error) {
	rsp, err := c.GetAssetScansAssetScanID(ctx, assetScanID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetScansAssetScanIDResponse(rsp)
}

// PatchAssetScansAssetScanIDWithBodyWithResponse request with arbitrary body returning *PatchAssetScansAssetScanIDResponse
func (c *ClientWithResponses) PatchAssetScansAssetScanIDWithBodyWithResponse(ctx context.Context, assetScanID AssetScanID, params *PatchAssetScansAssetScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAssetScansAssetScanIDResponse, error) {
	rsp, err := c.PatchAssetScansAssetScanIDWithBody(ctx, assetScanID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAssetScansAssetScanIDResponse(rsp)
}

func (c *ClientWithResponses) PatchAssetScansAssetScanIDWithResponse(ctx context.Context, assetScanID AssetScanID, params *PatchAssetScansAssetScanIDParams, body PatchAssetScansAssetScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAssetScansAssetScanIDResponse, error) {
	rsp, err := c.PatchAssetScansAssetScanID(ctx, assetScanID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAssetScansAssetScanIDResponse(rsp)
}

// PutAssetScansAssetScanIDWithBodyWithResponse request with arbitrary body returning *PutAssetScansAssetScanIDResponse
func (c *ClientWithResponses) PutAssetScansAssetScanIDWithBodyWithResponse(ctx context.Context, assetScanID AssetScanID, params *PutAssetScansAssetScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAssetScansAssetScanIDResponse, error) {
	rsp, err := c.PutAssetScansAssetScanIDWithBody(ctx, assetScanID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAssetScansAssetScanIDResponse(rsp)
}

func (c *ClientWithResponses) PutAssetScansAssetScanIDWithResponse(ctx context.Context, assetScanID AssetScanID, params *PutAssetScansAssetScanIDParams, body PutAssetScansAssetScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAssetScansAssetScanIDResponse, error) {
	rsp, err := c.PutAssetScansAssetScanID(ctx, assetScanID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAssetScansAssetScanIDResponse(rsp)
}

// GetAssetsWithResponse request returning *GetAssetsResponse
func (c *ClientWithResponses) GetAssetsWithResponse(ctx context.Context, params *GetAssetsParams, reqEditors ...RequestEditorFn) (*GetAssetsResponse, error) {
	rsp, err := c.GetAssets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetsResponse(rsp)
}

// PostAssetsWithBodyWithResponse request with arbitrary body returning *PostAssetsResponse
func (c *ClientWithResponses) PostAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAssetsResponse, error) {
	rsp, err := c.PostAssetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAssetsResponse(rsp)
}

func (c *ClientWithResponses) PostAssetsWithResponse(ctx context.Context, body PostAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAssetsResponse, error) {
	rsp, err := c.PostAssets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAssetsResponse(rsp)
}

// DeleteAssetsAssetIDWithResponse request returning *DeleteAssetsAssetIDResponse
func (c *ClientWithResponses) DeleteAssetsAssetIDWithResponse(ctx context.Context, assetID AssetID, reqEditors ...RequestEditorFn) (*DeleteAssetsAssetIDResponse, error) {
	rsp, err := c.DeleteAssetsAssetID(ctx, assetID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAssetsAssetIDResponse(rsp)
}

// GetAssetsAssetIDWithResponse request returning *GetAssetsAssetIDResponse
func (c *ClientWithResponses) GetAssetsAssetIDWithResponse(ctx context.Context, assetID AssetID, params *GetAssetsAssetIDParams, reqEditors ...RequestEditorFn) (*GetAssetsAssetIDResponse, error) {
	rsp, err := c.GetAssetsAssetID(ctx, assetID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetsAssetIDResponse(rsp)
}

// PatchAssetsAssetIDWithBodyWithResponse request with arbitrary body returning *PatchAssetsAssetIDResponse
func (c *ClientWithResponses) PatchAssetsAssetIDWithBodyWithResponse(ctx context.Context, assetID AssetID, params *PatchAssetsAssetIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAssetsAssetIDResponse, error) {
	rsp, err := c.PatchAssetsAssetIDWithBody(ctx, assetID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAssetsAssetIDResponse(rsp)
}

func (c *ClientWithResponses) PatchAssetsAssetIDWithResponse(ctx context.Context, assetID AssetID, params *PatchAssetsAssetIDParams, body PatchAssetsAssetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAssetsAssetIDResponse, error) {
	rsp, err := c.PatchAssetsAssetID(ctx, assetID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAssetsAssetIDResponse(rsp)
}

// PutAssetsAssetIDWithBodyWithResponse request with arbitrary body returning *PutAssetsAssetIDResponse
func (c *ClientWithResponses) PutAssetsAssetIDWithBodyWithResponse(ctx context.Context, assetID AssetID, params *PutAssetsAssetIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAssetsAssetIDResponse, error) {
	rsp, err := c.PutAssetsAssetIDWithBody(ctx, assetID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAssetsAssetIDResponse(rsp)
}

func (c *ClientWithResponses) PutAssetsAssetIDWithResponse(ctx context.Context, assetID AssetID, params *PutAssetsAssetIDParams, body PutAssetsAssetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAssetsAssetIDResponse, error) {
	rsp, err := c.PutAssetsAssetID(ctx, assetID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAssetsAssetIDResponse(rsp)
}

// GetFindingsWithResponse request returning *GetFindingsResponse
func (c *ClientWithResponses) GetFindingsWithResponse(ctx context.Context, params *GetFindingsParams, reqEditors ...RequestEditorFn) (*GetFindingsResponse, error) {
	rsp, err := c.GetFindings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFindingsResponse(rsp)
}

// PostFindingsWithBodyWithResponse request with arbitrary body returning *PostFindingsResponse
func (c *ClientWithResponses) PostFindingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFindingsResponse, error) {
	rsp, err := c.PostFindingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFindingsResponse(rsp)
}

func (c *ClientWithResponses) PostFindingsWithResponse(ctx context.Context, body PostFindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFindingsResponse, error) {
	rsp, err := c.PostFindings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFindingsResponse(rsp)
}

// DeleteFindingsFindingIDWithResponse request returning *DeleteFindingsFindingIDResponse
func (c *ClientWithResponses) DeleteFindingsFindingIDWithResponse(ctx context.Context, findingID FindingID, reqEditors ...RequestEditorFn) (*DeleteFindingsFindingIDResponse, error) {
	rsp, err := c.DeleteFindingsFindingID(ctx, findingID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFindingsFindingIDResponse(rsp)
}

// GetFindingsFindingIDWithResponse request returning *GetFindingsFindingIDResponse
func (c *ClientWithResponses) GetFindingsFindingIDWithResponse(ctx context.Context, findingID FindingID, params *GetFindingsFindingIDParams, reqEditors ...RequestEditorFn) (*GetFindingsFindingIDResponse, error) {
	rsp, err := c.GetFindingsFindingID(ctx, findingID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFindingsFindingIDResponse(rsp)
}

// PatchFindingsFindingIDWithBodyWithResponse request with arbitrary body returning *PatchFindingsFindingIDResponse
func (c *ClientWithResponses) PatchFindingsFindingIDWithBodyWithResponse(ctx context.Context, findingID FindingID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFindingsFindingIDResponse, error) {
	rsp, err := c.PatchFindingsFindingIDWithBody(ctx, findingID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFindingsFindingIDResponse(rsp)
}

func (c *ClientWithResponses) PatchFindingsFindingIDWithResponse(ctx context.Context, findingID FindingID, body PatchFindingsFindingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFindingsFindingIDResponse, error) {
	rsp, err := c.PatchFindingsFindingID(ctx, findingID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFindingsFindingIDResponse(rsp)
}

// PutFindingsFindingIDWithBodyWithResponse request with arbitrary body returning *PutFindingsFindingIDResponse
func (c *ClientWithResponses) PutFindingsFindingIDWithBodyWithResponse(ctx context.Context, findingID FindingID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFindingsFindingIDResponse, error) {
	rsp, err := c.PutFindingsFindingIDWithBody(ctx, findingID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFindingsFindingIDResponse(rsp)
}

func (c *ClientWithResponses) PutFindingsFindingIDWithResponse(ctx context.Context, findingID FindingID, body PutFindingsFindingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFindingsFindingIDResponse, error) {
	rsp, err := c.PutFindingsFindingID(ctx, findingID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFindingsFindingIDResponse(rsp)
}

// GetOpenAPISpecWithResponse request returning *GetOpenAPISpecResponse
func (c *ClientWithResponses) GetOpenAPISpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenAPISpecResponse, error) {
	rsp, err := c.GetOpenAPISpec(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenAPISpecResponse(rsp)
}

// GetScanConfigsWithResponse request returning *GetScanConfigsResponse
func (c *ClientWithResponses) GetScanConfigsWithResponse(ctx context.Context, params *GetScanConfigsParams, reqEditors ...RequestEditorFn) (*GetScanConfigsResponse, error) {
	rsp, err := c.GetScanConfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScanConfigsResponse(rsp)
}

// PostScanConfigsWithBodyWithResponse request with arbitrary body returning *PostScanConfigsResponse
func (c *ClientWithResponses) PostScanConfigsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScanConfigsResponse, error) {
	rsp, err := c.PostScanConfigsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScanConfigsResponse(rsp)
}

func (c *ClientWithResponses) PostScanConfigsWithResponse(ctx context.Context, body PostScanConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScanConfigsResponse, error) {
	rsp, err := c.PostScanConfigs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScanConfigsResponse(rsp)
}

// DeleteScanConfigsScanConfigIDWithResponse request returning *DeleteScanConfigsScanConfigIDResponse
func (c *ClientWithResponses) DeleteScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, reqEditors ...RequestEditorFn) (*DeleteScanConfigsScanConfigIDResponse, error) {
	rsp, err := c.DeleteScanConfigsScanConfigID(ctx, scanConfigID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScanConfigsScanConfigIDResponse(rsp)
}

// GetScanConfigsScanConfigIDWithResponse request returning *GetScanConfigsScanConfigIDResponse
func (c *ClientWithResponses) GetScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, params *GetScanConfigsScanConfigIDParams, reqEditors ...RequestEditorFn) (*GetScanConfigsScanConfigIDResponse, error) {
	rsp, err := c.GetScanConfigsScanConfigID(ctx, scanConfigID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScanConfigsScanConfigIDResponse(rsp)
}

// PatchScanConfigsScanConfigIDWithBodyWithResponse request with arbitrary body returning *PatchScanConfigsScanConfigIDResponse
func (c *ClientWithResponses) PatchScanConfigsScanConfigIDWithBodyWithResponse(ctx context.Context, scanConfigID ScanConfigID, params *PatchScanConfigsScanConfigIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScanConfigsScanConfigIDResponse, error) {
	rsp, err := c.PatchScanConfigsScanConfigIDWithBody(ctx, scanConfigID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScanConfigsScanConfigIDResponse(rsp)
}

func (c *ClientWithResponses) PatchScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, params *PatchScanConfigsScanConfigIDParams, body PatchScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScanConfigsScanConfigIDResponse, error) {
	rsp, err := c.PatchScanConfigsScanConfigID(ctx, scanConfigID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScanConfigsScanConfigIDResponse(rsp)
}

// PutScanConfigsScanConfigIDWithBodyWithResponse request with arbitrary body returning *PutScanConfigsScanConfigIDResponse
func (c *ClientWithResponses) PutScanConfigsScanConfigIDWithBodyWithResponse(ctx context.Context, scanConfigID ScanConfigID, params *PutScanConfigsScanConfigIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScanConfigsScanConfigIDResponse, error) {
	rsp, err := c.PutScanConfigsScanConfigIDWithBody(ctx, scanConfigID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScanConfigsScanConfigIDResponse(rsp)
}

func (c *ClientWithResponses) PutScanConfigsScanConfigIDWithResponse(ctx context.Context, scanConfigID ScanConfigID, params *PutScanConfigsScanConfigIDParams, body PutScanConfigsScanConfigIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScanConfigsScanConfigIDResponse, error) {
	rsp, err := c.PutScanConfigsScanConfigID(ctx, scanConfigID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScanConfigsScanConfigIDResponse(rsp)
}

// GetScansWithResponse request returning *GetScansResponse
func (c *ClientWithResponses) GetScansWithResponse(ctx context.Context, params *GetScansParams, reqEditors ...RequestEditorFn) (*GetScansResponse, error) {
	rsp, err := c.GetScans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScansResponse(rsp)
}

// PostScansWithBodyWithResponse request with arbitrary body returning *PostScansResponse
func (c *ClientWithResponses) PostScansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScansResponse, error) {
	rsp, err := c.PostScansWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScansResponse(rsp)
}

func (c *ClientWithResponses) PostScansWithResponse(ctx context.Context, body PostScansJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScansResponse, error) {
	rsp, err := c.PostScans(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScansResponse(rsp)
}

// DeleteScansScanIDWithResponse request returning *DeleteScansScanIDResponse
func (c *ClientWithResponses) DeleteScansScanIDWithResponse(ctx context.Context, scanID ScanID, reqEditors ...RequestEditorFn) (*DeleteScansScanIDResponse, error) {
	rsp, err := c.DeleteScansScanID(ctx, scanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScansScanIDResponse(rsp)
}

// GetScansScanIDWithResponse request returning *GetScansScanIDResponse
func (c *ClientWithResponses) GetScansScanIDWithResponse(ctx context.Context, scanID ScanID, params *GetScansScanIDParams, reqEditors ...RequestEditorFn) (*GetScansScanIDResponse, error) {
	rsp, err := c.GetScansScanID(ctx, scanID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScansScanIDResponse(rsp)
}

// PatchScansScanIDWithBodyWithResponse request with arbitrary body returning *PatchScansScanIDResponse
func (c *ClientWithResponses) PatchScansScanIDWithBodyWithResponse(ctx context.Context, scanID ScanID, params *PatchScansScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScansScanIDResponse, error) {
	rsp, err := c.PatchScansScanIDWithBody(ctx, scanID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScansScanIDResponse(rsp)
}

func (c *ClientWithResponses) PatchScansScanIDWithResponse(ctx context.Context, scanID ScanID, params *PatchScansScanIDParams, body PatchScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScansScanIDResponse, error) {
	rsp, err := c.PatchScansScanID(ctx, scanID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScansScanIDResponse(rsp)
}

// PutScansScanIDWithBodyWithResponse request with arbitrary body returning *PutScansScanIDResponse
func (c *ClientWithResponses) PutScansScanIDWithBodyWithResponse(ctx context.Context, scanID ScanID, params *PutScansScanIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScansScanIDResponse, error) {
	rsp, err := c.PutScansScanIDWithBody(ctx, scanID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScansScanIDResponse(rsp)
}

func (c *ClientWithResponses) PutScansScanIDWithResponse(ctx context.Context, scanID ScanID, params *PutScansScanIDParams, body PutScansScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScansScanIDResponse, error) {
	rsp, err := c.PutScansScanID(ctx, scanID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScansScanIDResponse(rsp)
}

// ParseGetAssetScansResponse parses an HTTP response from a GetAssetScansWithResponse call
func ParseGetAssetScansResponse(rsp *http.Response) (*GetAssetScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetScans
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAssetScansResponse parses an HTTP response from a PostAssetScansWithResponse call
func ParsePostAssetScansResponse(rsp *http.Response) (*PostAssetScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAssetScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AssetScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AssetScanExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAssetScansAssetScanIDResponse parses an HTTP response from a GetAssetScansAssetScanIDWithResponse call
func ParseGetAssetScansAssetScanIDResponse(rsp *http.Response) (*GetAssetScansAssetScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetScansAssetScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchAssetScansAssetScanIDResponse parses an HTTP response from a PatchAssetScansAssetScanIDWithResponse call
func ParsePatchAssetScansAssetScanIDResponse(rsp *http.Response) (*PatchAssetScansAssetScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAssetScansAssetScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AssetScanExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutAssetScansAssetScanIDResponse parses an HTTP response from a PutAssetScansAssetScanIDWithResponse call
func ParsePutAssetScansAssetScanIDResponse(rsp *http.Response) (*PutAssetScansAssetScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAssetScansAssetScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AssetScanExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAssetsResponse parses an HTTP response from a GetAssetsWithResponse call
func ParseGetAssetsResponse(rsp *http.Response) (*GetAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Assets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAssetsResponse parses an HTTP response from a PostAssetsWithResponse call
func ParsePostAssetsResponse(rsp *http.Response) (*PostAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Asset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AssetExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAssetsAssetIDResponse parses an HTTP response from a DeleteAssetsAssetIDWithResponse call
func ParseDeleteAssetsAssetIDResponse(rsp *http.Response) (*DeleteAssetsAssetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAssetsAssetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAssetsAssetIDResponse parses an HTTP response from a GetAssetsAssetIDWithResponse call
func ParseGetAssetsAssetIDResponse(rsp *http.Response) (*GetAssetsAssetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetsAssetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Asset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchAssetsAssetIDResponse parses an HTTP response from a PatchAssetsAssetIDWithResponse call
func ParsePatchAssetsAssetIDResponse(rsp *http.Response) (*PatchAssetsAssetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAssetsAssetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Asset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AssetExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutAssetsAssetIDResponse parses an HTTP response from a PutAssetsAssetIDWithResponse call
func ParsePutAssetsAssetIDResponse(rsp *http.Response) (*PutAssetsAssetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAssetsAssetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Asset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest AssetExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFindingsResponse parses an HTTP response from a GetFindingsWithResponse call
func ParseGetFindingsResponse(rsp *http.Response) (*GetFindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Findings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostFindingsResponse parses an HTTP response from a PostFindingsWithResponse call
func ParsePostFindingsResponse(rsp *http.Response) (*PostFindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Finding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest FindingExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFindingsFindingIDResponse parses an HTTP response from a DeleteFindingsFindingIDWithResponse call
func ParseDeleteFindingsFindingIDResponse(rsp *http.Response) (*DeleteFindingsFindingIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFindingsFindingIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFindingsFindingIDResponse parses an HTTP response from a GetFindingsFindingIDWithResponse call
func ParseGetFindingsFindingIDResponse(rsp *http.Response) (*GetFindingsFindingIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFindingsFindingIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Finding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchFindingsFindingIDResponse parses an HTTP response from a PatchFindingsFindingIDWithResponse call
func ParsePatchFindingsFindingIDResponse(rsp *http.Response) (*PatchFindingsFindingIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchFindingsFindingIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Finding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutFindingsFindingIDResponse parses an HTTP response from a PutFindingsFindingIDWithResponse call
func ParsePutFindingsFindingIDResponse(rsp *http.Response) (*PutFindingsFindingIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFindingsFindingIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Finding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOpenAPISpecResponse parses an HTTP response from a GetOpenAPISpecWithResponse call
func ParseGetOpenAPISpecResponse(rsp *http.Response) (*GetOpenAPISpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenAPISpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest json.RawMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetScanConfigsResponse parses an HTTP response from a GetScanConfigsWithResponse call
func ParseGetScanConfigsResponse(rsp *http.Response) (*GetScanConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScanConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScanConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostScanConfigsResponse parses an HTTP response from a PostScanConfigsWithResponse call
func ParsePostScanConfigsResponse(rsp *http.Response) (*PostScanConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScanConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScanConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ScanConfigExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteScanConfigsScanConfigIDResponse parses an HTTP response from a DeleteScanConfigsScanConfigIDWithResponse call
func ParseDeleteScanConfigsScanConfigIDResponse(rsp *http.Response) (*DeleteScanConfigsScanConfigIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScanConfigsScanConfigIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetScanConfigsScanConfigIDResponse parses an HTTP response from a GetScanConfigsScanConfigIDWithResponse call
func ParseGetScanConfigsScanConfigIDResponse(rsp *http.Response) (*GetScanConfigsScanConfigIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScanConfigsScanConfigIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScanConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchScanConfigsScanConfigIDResponse parses an HTTP response from a PatchScanConfigsScanConfigIDWithResponse call
func ParsePatchScanConfigsScanConfigIDResponse(rsp *http.Response) (*PatchScanConfigsScanConfigIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScanConfigsScanConfigIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScanConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ScanConfigExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutScanConfigsScanConfigIDResponse parses an HTTP response from a PutScanConfigsScanConfigIDWithResponse call
func ParsePutScanConfigsScanConfigIDResponse(rsp *http.Response) (*PutScanConfigsScanConfigIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutScanConfigsScanConfigIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScanConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ScanConfigExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetScansResponse parses an HTTP response from a GetScansWithResponse call
func ParseGetScansResponse(rsp *http.Response) (*GetScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scans
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostScansResponse parses an HTTP response from a PostScansWithResponse call
func ParsePostScansResponse(rsp *http.Response) (*PostScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Scan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ScanExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteScansScanIDResponse parses an HTTP response from a DeleteScansScanIDWithResponse call
func ParseDeleteScansScanIDResponse(rsp *http.Response) (*DeleteScansScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScansScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetScansScanIDResponse parses an HTTP response from a GetScansScanIDWithResponse call
func ParseGetScansScanIDResponse(rsp *http.Response) (*GetScansScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScansScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchScansScanIDResponse parses an HTTP response from a PatchScansScanIDWithResponse call
func ParsePatchScansScanIDResponse(rsp *http.Response) (*PatchScansScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScansScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ScanExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutScansScanIDResponse parses an HTTP response from a PutScansScanIDWithResponse call
func ParsePutScansScanIDResponse(rsp *http.Response) (*PutScansScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutScansScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ScanExists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
