// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	. "github.com/vmclarity/api/models"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetInstances request
	GetInstances(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstances request with any body
	PostInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstances(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInstancesInstanceID request
	DeleteInstancesInstanceID(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstancesInstanceID request
	GetInstancesInstanceID(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInstancesInstanceID request with any body
	PutInstancesInstanceIDWithBody(ctx context.Context, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInstancesInstanceID(ctx context.Context, instanceID string, body PutInstancesInstanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstancesInstanceIDScanresults request
	GetInstancesInstanceIDScanresults(ctx context.Context, instanceID string, params *GetInstancesInstanceIDScanresultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesInstanceIDScanresults request with any body
	PostInstancesInstanceIDScanresultsWithBody(ctx context.Context, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstancesInstanceIDScanresults(ctx context.Context, instanceID string, body PostInstancesInstanceIDScanresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstancesInstanceIDScanresultsScanID request
	GetInstancesInstanceIDScanresultsScanID(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInstancesInstanceIDScanresultsScanID request with any body
	PutInstancesInstanceIDScanresultsScanIDWithBody(ctx context.Context, instanceID string, scanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInstancesInstanceIDScanresultsScanID(ctx context.Context, instanceID string, scanID string, body PutInstancesInstanceIDScanresultsScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstancesInstanceIDScanresultsScanIDExploits request
	GetInstancesInstanceIDScanresultsScanIDExploits(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstancesInstanceIDScanresultsScanIDMalwares request
	GetInstancesInstanceIDScanresultsScanIDMalwares(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstancesInstanceIDScanresultsScanIDMisconfiguration request
	GetInstancesInstanceIDScanresultsScanIDMisconfiguration(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstancesInstanceIDScanresultsScanIDRootkits request
	GetInstancesInstanceIDScanresultsScanIDRootkits(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstancesInstanceIDScanresultsScanIDSbom request
	GetInstancesInstanceIDScanresultsScanIDSbom(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstancesInstanceIDScanresultsScanIDSecrets request
	GetInstancesInstanceIDScanresultsScanIDSecrets(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstancesInstanceIDScanresultsScanIDVulnerabilities request
	GetInstancesInstanceIDScanresultsScanIDVulnerabilities(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetInstances(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstances(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInstancesInstanceID(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInstancesInstanceIDRequest(c.Server, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstancesInstanceID(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesInstanceIDRequest(c.Server, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInstancesInstanceIDWithBody(ctx context.Context, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInstancesInstanceIDRequestWithBody(c.Server, instanceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInstancesInstanceID(ctx context.Context, instanceID string, body PutInstancesInstanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInstancesInstanceIDRequest(c.Server, instanceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstancesInstanceIDScanresults(ctx context.Context, instanceID string, params *GetInstancesInstanceIDScanresultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesInstanceIDScanresultsRequest(c.Server, instanceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesInstanceIDScanresultsWithBody(ctx context.Context, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesInstanceIDScanresultsRequestWithBody(c.Server, instanceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesInstanceIDScanresults(ctx context.Context, instanceID string, body PostInstancesInstanceIDScanresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesInstanceIDScanresultsRequest(c.Server, instanceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstancesInstanceIDScanresultsScanID(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesInstanceIDScanresultsScanIDRequest(c.Server, instanceID, scanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInstancesInstanceIDScanresultsScanIDWithBody(ctx context.Context, instanceID string, scanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInstancesInstanceIDScanresultsScanIDRequestWithBody(c.Server, instanceID, scanID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInstancesInstanceIDScanresultsScanID(ctx context.Context, instanceID string, scanID string, body PutInstancesInstanceIDScanresultsScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInstancesInstanceIDScanresultsScanIDRequest(c.Server, instanceID, scanID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstancesInstanceIDScanresultsScanIDExploits(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesInstanceIDScanresultsScanIDExploitsRequest(c.Server, instanceID, scanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstancesInstanceIDScanresultsScanIDMalwares(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesInstanceIDScanresultsScanIDMalwaresRequest(c.Server, instanceID, scanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstancesInstanceIDScanresultsScanIDMisconfiguration(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesInstanceIDScanresultsScanIDMisconfigurationRequest(c.Server, instanceID, scanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstancesInstanceIDScanresultsScanIDRootkits(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesInstanceIDScanresultsScanIDRootkitsRequest(c.Server, instanceID, scanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstancesInstanceIDScanresultsScanIDSbom(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesInstanceIDScanresultsScanIDSbomRequest(c.Server, instanceID, scanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstancesInstanceIDScanresultsScanIDSecrets(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesInstanceIDScanresultsScanIDSecretsRequest(c.Server, instanceID, scanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstancesInstanceIDScanresultsScanIDVulnerabilities(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesInstanceIDScanresultsScanIDVulnerabilitiesRequest(c.Server, instanceID, scanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetInstancesRequest generates requests for GetInstances
func NewGetInstancesRequest(server string, params *GetInstancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, params.SortKey); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInstancesRequest calls the generic PostInstances builder with application/json body
func NewPostInstancesRequest(server string, body PostInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInstancesRequestWithBody generates requests for PostInstances with any type of body
func NewPostInstancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInstancesInstanceIDRequest generates requests for DeleteInstancesInstanceID
func NewDeleteInstancesInstanceIDRequest(server string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstancesInstanceIDRequest generates requests for GetInstancesInstanceID
func NewGetInstancesInstanceIDRequest(server string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutInstancesInstanceIDRequest calls the generic PutInstancesInstanceID builder with application/json body
func NewPutInstancesInstanceIDRequest(server string, instanceID string, body PutInstancesInstanceIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInstancesInstanceIDRequestWithBody(server, instanceID, "application/json", bodyReader)
}

// NewPutInstancesInstanceIDRequestWithBody generates requests for PutInstancesInstanceID with any type of body
func NewPutInstancesInstanceIDRequestWithBody(server string, instanceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInstancesInstanceIDScanresultsRequest generates requests for GetInstancesInstanceIDScanresults
func NewGetInstancesInstanceIDScanresultsRequest(server string, instanceID string, params *GetInstancesInstanceIDScanresultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/scanresults", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, params.SortKey); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInstancesInstanceIDScanresultsRequest calls the generic PostInstancesInstanceIDScanresults builder with application/json body
func NewPostInstancesInstanceIDScanresultsRequest(server string, instanceID string, body PostInstancesInstanceIDScanresultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesInstanceIDScanresultsRequestWithBody(server, instanceID, "application/json", bodyReader)
}

// NewPostInstancesInstanceIDScanresultsRequestWithBody generates requests for PostInstancesInstanceIDScanresults with any type of body
func NewPostInstancesInstanceIDScanresultsRequestWithBody(server string, instanceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/scanresults", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInstancesInstanceIDScanresultsScanIDRequest generates requests for GetInstancesInstanceIDScanresultsScanID
func NewGetInstancesInstanceIDScanresultsScanIDRequest(server string, instanceID string, scanID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/scanresults/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutInstancesInstanceIDScanresultsScanIDRequest calls the generic PutInstancesInstanceIDScanresultsScanID builder with application/json body
func NewPutInstancesInstanceIDScanresultsScanIDRequest(server string, instanceID string, scanID string, body PutInstancesInstanceIDScanresultsScanIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInstancesInstanceIDScanresultsScanIDRequestWithBody(server, instanceID, scanID, "application/json", bodyReader)
}

// NewPutInstancesInstanceIDScanresultsScanIDRequestWithBody generates requests for PutInstancesInstanceIDScanresultsScanID with any type of body
func NewPutInstancesInstanceIDScanresultsScanIDRequestWithBody(server string, instanceID string, scanID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/scanresults/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInstancesInstanceIDScanresultsScanIDExploitsRequest generates requests for GetInstancesInstanceIDScanresultsScanIDExploits
func NewGetInstancesInstanceIDScanresultsScanIDExploitsRequest(server string, instanceID string, scanID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/scanresults/%s/exploits", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstancesInstanceIDScanresultsScanIDMalwaresRequest generates requests for GetInstancesInstanceIDScanresultsScanIDMalwares
func NewGetInstancesInstanceIDScanresultsScanIDMalwaresRequest(server string, instanceID string, scanID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/scanresults/%s/malwares", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstancesInstanceIDScanresultsScanIDMisconfigurationRequest generates requests for GetInstancesInstanceIDScanresultsScanIDMisconfiguration
func NewGetInstancesInstanceIDScanresultsScanIDMisconfigurationRequest(server string, instanceID string, scanID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/scanresults/%s/misconfiguration", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstancesInstanceIDScanresultsScanIDRootkitsRequest generates requests for GetInstancesInstanceIDScanresultsScanIDRootkits
func NewGetInstancesInstanceIDScanresultsScanIDRootkitsRequest(server string, instanceID string, scanID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/scanresults/%s/rootkits", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstancesInstanceIDScanresultsScanIDSbomRequest generates requests for GetInstancesInstanceIDScanresultsScanIDSbom
func NewGetInstancesInstanceIDScanresultsScanIDSbomRequest(server string, instanceID string, scanID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/scanresults/%s/sbom", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstancesInstanceIDScanresultsScanIDSecretsRequest generates requests for GetInstancesInstanceIDScanresultsScanIDSecrets
func NewGetInstancesInstanceIDScanresultsScanIDSecretsRequest(server string, instanceID string, scanID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/scanresults/%s/secrets", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstancesInstanceIDScanresultsScanIDVulnerabilitiesRequest generates requests for GetInstancesInstanceIDScanresultsScanIDVulnerabilities
func NewGetInstancesInstanceIDScanresultsScanIDVulnerabilitiesRequest(server string, instanceID string, scanID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scanID", runtime.ParamLocationPath, scanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/scanresults/%s/vulnerabilities", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetInstances request
	GetInstancesWithResponse(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*GetInstancesResponse, error)

	// PostInstances request with any body
	PostInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error)

	PostInstancesWithResponse(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error)

	// DeleteInstancesInstanceID request
	DeleteInstancesInstanceIDWithResponse(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*DeleteInstancesInstanceIDResponse, error)

	// GetInstancesInstanceID request
	GetInstancesInstanceIDWithResponse(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDResponse, error)

	// PutInstancesInstanceID request with any body
	PutInstancesInstanceIDWithBodyWithResponse(ctx context.Context, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInstancesInstanceIDResponse, error)

	PutInstancesInstanceIDWithResponse(ctx context.Context, instanceID string, body PutInstancesInstanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInstancesInstanceIDResponse, error)

	// GetInstancesInstanceIDScanresults request
	GetInstancesInstanceIDScanresultsWithResponse(ctx context.Context, instanceID string, params *GetInstancesInstanceIDScanresultsParams, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsResponse, error)

	// PostInstancesInstanceIDScanresults request with any body
	PostInstancesInstanceIDScanresultsWithBodyWithResponse(ctx context.Context, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesInstanceIDScanresultsResponse, error)

	PostInstancesInstanceIDScanresultsWithResponse(ctx context.Context, instanceID string, body PostInstancesInstanceIDScanresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesInstanceIDScanresultsResponse, error)

	// GetInstancesInstanceIDScanresultsScanID request
	GetInstancesInstanceIDScanresultsScanIDWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDResponse, error)

	// PutInstancesInstanceIDScanresultsScanID request with any body
	PutInstancesInstanceIDScanresultsScanIDWithBodyWithResponse(ctx context.Context, instanceID string, scanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInstancesInstanceIDScanresultsScanIDResponse, error)

	PutInstancesInstanceIDScanresultsScanIDWithResponse(ctx context.Context, instanceID string, scanID string, body PutInstancesInstanceIDScanresultsScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInstancesInstanceIDScanresultsScanIDResponse, error)

	// GetInstancesInstanceIDScanresultsScanIDExploits request
	GetInstancesInstanceIDScanresultsScanIDExploitsWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDExploitsResponse, error)

	// GetInstancesInstanceIDScanresultsScanIDMalwares request
	GetInstancesInstanceIDScanresultsScanIDMalwaresWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDMalwaresResponse, error)

	// GetInstancesInstanceIDScanresultsScanIDMisconfiguration request
	GetInstancesInstanceIDScanresultsScanIDMisconfigurationWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDMisconfigurationResponse, error)

	// GetInstancesInstanceIDScanresultsScanIDRootkits request
	GetInstancesInstanceIDScanresultsScanIDRootkitsWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDRootkitsResponse, error)

	// GetInstancesInstanceIDScanresultsScanIDSbom request
	GetInstancesInstanceIDScanresultsScanIDSbomWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDSbomResponse, error)

	// GetInstancesInstanceIDScanresultsScanIDSecrets request
	GetInstancesInstanceIDScanresultsScanIDSecretsWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDSecretsResponse, error)

	// GetInstancesInstanceIDScanresultsScanIDVulnerabilities request
	GetInstancesInstanceIDScanresultsScanIDVulnerabilitiesWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDVulnerabilitiesResponse, error)
}

type GetInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Items List of instances in the given filters and page. List length must be lower or equal to pageSize.
		Items *[]Instance `json:"items,omitempty"`

		// Total Total instances count under the given filters
		Total int `json:"total"`
	}
	JSONDefault *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InstanceInfo
	JSON409      *InstanceInfo
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInstancesInstanceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r DeleteInstancesInstanceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInstancesInstanceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesInstanceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceInfo
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetInstancesInstanceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesInstanceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInstancesInstanceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceInfo
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutInstancesInstanceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInstancesInstanceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesInstanceIDScanresultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Items List of scan results for a specified instance in the given filters and page. List length must be lower or equal to pageSize.
		Items *[]ScanResults `json:"items,omitempty"`

		// Total Total scan results count under the given filters
		Total int `json:"total"`
	}
	JSONDefault *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetInstancesInstanceIDScanresultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesInstanceIDScanresultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesInstanceIDScanresultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ScanResultsSummary
	JSON409      *ScanResultsSummary
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostInstancesInstanceIDScanresultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesInstanceIDScanresultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesInstanceIDScanresultsScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScanResultsSummary
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetInstancesInstanceIDScanresultsScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesInstanceIDScanresultsScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInstancesInstanceIDScanresultsScanIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScanResultsSummary
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutInstancesInstanceIDScanresultsScanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInstancesInstanceIDScanresultsScanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesInstanceIDScanresultsScanIDExploitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExploitScan
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetInstancesInstanceIDScanresultsScanIDExploitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesInstanceIDScanresultsScanIDExploitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesInstanceIDScanresultsScanIDMalwaresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MalwareScan
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetInstancesInstanceIDScanresultsScanIDMalwaresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesInstanceIDScanresultsScanIDMalwaresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesInstanceIDScanresultsScanIDMisconfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MisconfigurationScan
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetInstancesInstanceIDScanresultsScanIDMisconfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesInstanceIDScanresultsScanIDMisconfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesInstanceIDScanresultsScanIDRootkitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RootkitScan
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetInstancesInstanceIDScanresultsScanIDRootkitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesInstanceIDScanresultsScanIDRootkitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesInstanceIDScanresultsScanIDSbomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SbomScan
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetInstancesInstanceIDScanresultsScanIDSbomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesInstanceIDScanresultsScanIDSbomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesInstanceIDScanresultsScanIDSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretScan
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetInstancesInstanceIDScanresultsScanIDSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesInstanceIDScanresultsScanIDSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesInstanceIDScanresultsScanIDVulnerabilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VulnerabilityScan
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetInstancesInstanceIDScanresultsScanIDVulnerabilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesInstanceIDScanresultsScanIDVulnerabilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetInstancesWithResponse request returning *GetInstancesResponse
func (c *ClientWithResponses) GetInstancesWithResponse(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*GetInstancesResponse, error) {
	rsp, err := c.GetInstances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesResponse(rsp)
}

// PostInstancesWithBodyWithResponse request with arbitrary body returning *PostInstancesResponse
func (c *ClientWithResponses) PostInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error) {
	rsp, err := c.PostInstancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesWithResponse(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error) {
	rsp, err := c.PostInstances(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesResponse(rsp)
}

// DeleteInstancesInstanceIDWithResponse request returning *DeleteInstancesInstanceIDResponse
func (c *ClientWithResponses) DeleteInstancesInstanceIDWithResponse(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*DeleteInstancesInstanceIDResponse, error) {
	rsp, err := c.DeleteInstancesInstanceID(ctx, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInstancesInstanceIDResponse(rsp)
}

// GetInstancesInstanceIDWithResponse request returning *GetInstancesInstanceIDResponse
func (c *ClientWithResponses) GetInstancesInstanceIDWithResponse(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDResponse, error) {
	rsp, err := c.GetInstancesInstanceID(ctx, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesInstanceIDResponse(rsp)
}

// PutInstancesInstanceIDWithBodyWithResponse request with arbitrary body returning *PutInstancesInstanceIDResponse
func (c *ClientWithResponses) PutInstancesInstanceIDWithBodyWithResponse(ctx context.Context, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInstancesInstanceIDResponse, error) {
	rsp, err := c.PutInstancesInstanceIDWithBody(ctx, instanceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInstancesInstanceIDResponse(rsp)
}

func (c *ClientWithResponses) PutInstancesInstanceIDWithResponse(ctx context.Context, instanceID string, body PutInstancesInstanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInstancesInstanceIDResponse, error) {
	rsp, err := c.PutInstancesInstanceID(ctx, instanceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInstancesInstanceIDResponse(rsp)
}

// GetInstancesInstanceIDScanresultsWithResponse request returning *GetInstancesInstanceIDScanresultsResponse
func (c *ClientWithResponses) GetInstancesInstanceIDScanresultsWithResponse(ctx context.Context, instanceID string, params *GetInstancesInstanceIDScanresultsParams, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsResponse, error) {
	rsp, err := c.GetInstancesInstanceIDScanresults(ctx, instanceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesInstanceIDScanresultsResponse(rsp)
}

// PostInstancesInstanceIDScanresultsWithBodyWithResponse request with arbitrary body returning *PostInstancesInstanceIDScanresultsResponse
func (c *ClientWithResponses) PostInstancesInstanceIDScanresultsWithBodyWithResponse(ctx context.Context, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesInstanceIDScanresultsResponse, error) {
	rsp, err := c.PostInstancesInstanceIDScanresultsWithBody(ctx, instanceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesInstanceIDScanresultsResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesInstanceIDScanresultsWithResponse(ctx context.Context, instanceID string, body PostInstancesInstanceIDScanresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesInstanceIDScanresultsResponse, error) {
	rsp, err := c.PostInstancesInstanceIDScanresults(ctx, instanceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesInstanceIDScanresultsResponse(rsp)
}

// GetInstancesInstanceIDScanresultsScanIDWithResponse request returning *GetInstancesInstanceIDScanresultsScanIDResponse
func (c *ClientWithResponses) GetInstancesInstanceIDScanresultsScanIDWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDResponse, error) {
	rsp, err := c.GetInstancesInstanceIDScanresultsScanID(ctx, instanceID, scanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesInstanceIDScanresultsScanIDResponse(rsp)
}

// PutInstancesInstanceIDScanresultsScanIDWithBodyWithResponse request with arbitrary body returning *PutInstancesInstanceIDScanresultsScanIDResponse
func (c *ClientWithResponses) PutInstancesInstanceIDScanresultsScanIDWithBodyWithResponse(ctx context.Context, instanceID string, scanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInstancesInstanceIDScanresultsScanIDResponse, error) {
	rsp, err := c.PutInstancesInstanceIDScanresultsScanIDWithBody(ctx, instanceID, scanID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInstancesInstanceIDScanresultsScanIDResponse(rsp)
}

func (c *ClientWithResponses) PutInstancesInstanceIDScanresultsScanIDWithResponse(ctx context.Context, instanceID string, scanID string, body PutInstancesInstanceIDScanresultsScanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInstancesInstanceIDScanresultsScanIDResponse, error) {
	rsp, err := c.PutInstancesInstanceIDScanresultsScanID(ctx, instanceID, scanID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInstancesInstanceIDScanresultsScanIDResponse(rsp)
}

// GetInstancesInstanceIDScanresultsScanIDExploitsWithResponse request returning *GetInstancesInstanceIDScanresultsScanIDExploitsResponse
func (c *ClientWithResponses) GetInstancesInstanceIDScanresultsScanIDExploitsWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDExploitsResponse, error) {
	rsp, err := c.GetInstancesInstanceIDScanresultsScanIDExploits(ctx, instanceID, scanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesInstanceIDScanresultsScanIDExploitsResponse(rsp)
}

// GetInstancesInstanceIDScanresultsScanIDMalwaresWithResponse request returning *GetInstancesInstanceIDScanresultsScanIDMalwaresResponse
func (c *ClientWithResponses) GetInstancesInstanceIDScanresultsScanIDMalwaresWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDMalwaresResponse, error) {
	rsp, err := c.GetInstancesInstanceIDScanresultsScanIDMalwares(ctx, instanceID, scanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesInstanceIDScanresultsScanIDMalwaresResponse(rsp)
}

// GetInstancesInstanceIDScanresultsScanIDMisconfigurationWithResponse request returning *GetInstancesInstanceIDScanresultsScanIDMisconfigurationResponse
func (c *ClientWithResponses) GetInstancesInstanceIDScanresultsScanIDMisconfigurationWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDMisconfigurationResponse, error) {
	rsp, err := c.GetInstancesInstanceIDScanresultsScanIDMisconfiguration(ctx, instanceID, scanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesInstanceIDScanresultsScanIDMisconfigurationResponse(rsp)
}

// GetInstancesInstanceIDScanresultsScanIDRootkitsWithResponse request returning *GetInstancesInstanceIDScanresultsScanIDRootkitsResponse
func (c *ClientWithResponses) GetInstancesInstanceIDScanresultsScanIDRootkitsWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDRootkitsResponse, error) {
	rsp, err := c.GetInstancesInstanceIDScanresultsScanIDRootkits(ctx, instanceID, scanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesInstanceIDScanresultsScanIDRootkitsResponse(rsp)
}

// GetInstancesInstanceIDScanresultsScanIDSbomWithResponse request returning *GetInstancesInstanceIDScanresultsScanIDSbomResponse
func (c *ClientWithResponses) GetInstancesInstanceIDScanresultsScanIDSbomWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDSbomResponse, error) {
	rsp, err := c.GetInstancesInstanceIDScanresultsScanIDSbom(ctx, instanceID, scanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesInstanceIDScanresultsScanIDSbomResponse(rsp)
}

// GetInstancesInstanceIDScanresultsScanIDSecretsWithResponse request returning *GetInstancesInstanceIDScanresultsScanIDSecretsResponse
func (c *ClientWithResponses) GetInstancesInstanceIDScanresultsScanIDSecretsWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDSecretsResponse, error) {
	rsp, err := c.GetInstancesInstanceIDScanresultsScanIDSecrets(ctx, instanceID, scanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesInstanceIDScanresultsScanIDSecretsResponse(rsp)
}

// GetInstancesInstanceIDScanresultsScanIDVulnerabilitiesWithResponse request returning *GetInstancesInstanceIDScanresultsScanIDVulnerabilitiesResponse
func (c *ClientWithResponses) GetInstancesInstanceIDScanresultsScanIDVulnerabilitiesWithResponse(ctx context.Context, instanceID string, scanID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDScanresultsScanIDVulnerabilitiesResponse, error) {
	rsp, err := c.GetInstancesInstanceIDScanresultsScanIDVulnerabilities(ctx, instanceID, scanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesInstanceIDScanresultsScanIDVulnerabilitiesResponse(rsp)
}

// ParseGetInstancesResponse parses an HTTP response from a GetInstancesWithResponse call
func ParseGetInstancesResponse(rsp *http.Response) (*GetInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Items List of instances in the given filters and page. List length must be lower or equal to pageSize.
			Items *[]Instance `json:"items,omitempty"`

			// Total Total instances count under the given filters
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostInstancesResponse parses an HTTP response from a PostInstancesWithResponse call
func ParsePostInstancesResponse(rsp *http.Response) (*PostInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InstanceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InstanceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteInstancesInstanceIDResponse parses an HTTP response from a DeleteInstancesInstanceIDWithResponse call
func ParseDeleteInstancesInstanceIDResponse(rsp *http.Response) (*DeleteInstancesInstanceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInstancesInstanceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInstancesInstanceIDResponse parses an HTTP response from a GetInstancesInstanceIDWithResponse call
func ParseGetInstancesInstanceIDResponse(rsp *http.Response) (*GetInstancesInstanceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesInstanceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutInstancesInstanceIDResponse parses an HTTP response from a PutInstancesInstanceIDWithResponse call
func ParsePutInstancesInstanceIDResponse(rsp *http.Response) (*PutInstancesInstanceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInstancesInstanceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInstancesInstanceIDScanresultsResponse parses an HTTP response from a GetInstancesInstanceIDScanresultsWithResponse call
func ParseGetInstancesInstanceIDScanresultsResponse(rsp *http.Response) (*GetInstancesInstanceIDScanresultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesInstanceIDScanresultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Items List of scan results for a specified instance in the given filters and page. List length must be lower or equal to pageSize.
			Items *[]ScanResults `json:"items,omitempty"`

			// Total Total scan results count under the given filters
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostInstancesInstanceIDScanresultsResponse parses an HTTP response from a PostInstancesInstanceIDScanresultsWithResponse call
func ParsePostInstancesInstanceIDScanresultsResponse(rsp *http.Response) (*PostInstancesInstanceIDScanresultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesInstanceIDScanresultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScanResultsSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ScanResultsSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInstancesInstanceIDScanresultsScanIDResponse parses an HTTP response from a GetInstancesInstanceIDScanresultsScanIDWithResponse call
func ParseGetInstancesInstanceIDScanresultsScanIDResponse(rsp *http.Response) (*GetInstancesInstanceIDScanresultsScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesInstanceIDScanresultsScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScanResultsSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutInstancesInstanceIDScanresultsScanIDResponse parses an HTTP response from a PutInstancesInstanceIDScanresultsScanIDWithResponse call
func ParsePutInstancesInstanceIDScanresultsScanIDResponse(rsp *http.Response) (*PutInstancesInstanceIDScanresultsScanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInstancesInstanceIDScanresultsScanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScanResultsSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInstancesInstanceIDScanresultsScanIDExploitsResponse parses an HTTP response from a GetInstancesInstanceIDScanresultsScanIDExploitsWithResponse call
func ParseGetInstancesInstanceIDScanresultsScanIDExploitsResponse(rsp *http.Response) (*GetInstancesInstanceIDScanresultsScanIDExploitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesInstanceIDScanresultsScanIDExploitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExploitScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInstancesInstanceIDScanresultsScanIDMalwaresResponse parses an HTTP response from a GetInstancesInstanceIDScanresultsScanIDMalwaresWithResponse call
func ParseGetInstancesInstanceIDScanresultsScanIDMalwaresResponse(rsp *http.Response) (*GetInstancesInstanceIDScanresultsScanIDMalwaresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesInstanceIDScanresultsScanIDMalwaresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MalwareScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInstancesInstanceIDScanresultsScanIDMisconfigurationResponse parses an HTTP response from a GetInstancesInstanceIDScanresultsScanIDMisconfigurationWithResponse call
func ParseGetInstancesInstanceIDScanresultsScanIDMisconfigurationResponse(rsp *http.Response) (*GetInstancesInstanceIDScanresultsScanIDMisconfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesInstanceIDScanresultsScanIDMisconfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MisconfigurationScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInstancesInstanceIDScanresultsScanIDRootkitsResponse parses an HTTP response from a GetInstancesInstanceIDScanresultsScanIDRootkitsWithResponse call
func ParseGetInstancesInstanceIDScanresultsScanIDRootkitsResponse(rsp *http.Response) (*GetInstancesInstanceIDScanresultsScanIDRootkitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesInstanceIDScanresultsScanIDRootkitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RootkitScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInstancesInstanceIDScanresultsScanIDSbomResponse parses an HTTP response from a GetInstancesInstanceIDScanresultsScanIDSbomWithResponse call
func ParseGetInstancesInstanceIDScanresultsScanIDSbomResponse(rsp *http.Response) (*GetInstancesInstanceIDScanresultsScanIDSbomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesInstanceIDScanresultsScanIDSbomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SbomScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInstancesInstanceIDScanresultsScanIDSecretsResponse parses an HTTP response from a GetInstancesInstanceIDScanresultsScanIDSecretsWithResponse call
func ParseGetInstancesInstanceIDScanresultsScanIDSecretsResponse(rsp *http.Response) (*GetInstancesInstanceIDScanresultsScanIDSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesInstanceIDScanresultsScanIDSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInstancesInstanceIDScanresultsScanIDVulnerabilitiesResponse parses an HTTP response from a GetInstancesInstanceIDScanresultsScanIDVulnerabilitiesWithResponse call
func ParseGetInstancesInstanceIDScanresultsScanIDVulnerabilitiesResponse(rsp *http.Response) (*GetInstancesInstanceIDScanresultsScanIDVulnerabilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesInstanceIDScanresultsScanIDVulnerabilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VulnerabilityScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
