// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Confidentiality confidentiality
//
// swagger:model Confidentiality
type Confidentiality string

func NewConfidentiality(value Confidentiality) *Confidentiality {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Confidentiality.
func (m Confidentiality) Pointer() *Confidentiality {
	return &m
}

const (

	// ConfidentialityNONE captures enum value "NONE"
	ConfidentialityNONE Confidentiality = "NONE"

	// ConfidentialityLOW captures enum value "LOW"
	ConfidentialityLOW Confidentiality = "LOW"

	// ConfidentialityHIGH captures enum value "HIGH"
	ConfidentialityHIGH Confidentiality = "HIGH"
)

// for schema
var confidentialityEnum []interface{}

func init() {
	var res []Confidentiality
	if err := json.Unmarshal([]byte(`["NONE","LOW","HIGH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		confidentialityEnum = append(confidentialityEnum, v)
	}
}

func (m Confidentiality) validateConfidentialityEnum(path, location string, value Confidentiality) error {
	if err := validate.EnumCase(path, location, value, confidentialityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this confidentiality
func (m Confidentiality) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfidentialityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this confidentiality based on context it is used
func (m Confidentiality) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
