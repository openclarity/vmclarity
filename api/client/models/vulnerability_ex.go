// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilityEx vulnerability ex
//
// swagger:model VulnerabilityEx
type VulnerabilityEx struct {

	// cvss
	Cvss *CVSS `json:"cvss,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// links
	Links []string `json:"links"`

	// scan date
	// Format: date-time
	ScanDate strfmt.DateTime `json:"scanDate,omitempty"`

	// vulnerability
	Vulnerability *Vulnerability `json:"vulnerability,omitempty"`
}

// Validate validates this vulnerability ex
func (m *VulnerabilityEx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCvss(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerability(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilityEx) validateCvss(formats strfmt.Registry) error {
	if swag.IsZero(m.Cvss) { // not required
		return nil
	}

	if m.Cvss != nil {
		if err := m.Cvss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilityEx) validateScanDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ScanDate) { // not required
		return nil
	}

	if err := validate.FormatOf("scanDate", "body", "date-time", m.ScanDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilityEx) validateVulnerability(formats strfmt.Registry) error {
	if swag.IsZero(m.Vulnerability) { // not required
		return nil
	}

	if m.Vulnerability != nil {
		if err := m.Vulnerability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vulnerability")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vulnerability")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vulnerability ex based on the context it is used
func (m *VulnerabilityEx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCvss(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVulnerability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilityEx) contextValidateCvss(ctx context.Context, formats strfmt.Registry) error {

	if m.Cvss != nil {
		if err := m.Cvss.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilityEx) contextValidateVulnerability(ctx context.Context, formats strfmt.Registry) error {

	if m.Vulnerability != nil {
		if err := m.Vulnerability.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vulnerability")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vulnerability")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilityEx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilityEx) UnmarshalBinary(b []byte) error {
	var res VulnerabilityEx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
