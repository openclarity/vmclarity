// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Availability availability
//
// swagger:model Availability
type Availability string

func NewAvailability(value Availability) *Availability {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Availability.
func (m Availability) Pointer() *Availability {
	return &m
}

const (

	// AvailabilityNONE captures enum value "NONE"
	AvailabilityNONE Availability = "NONE"

	// AvailabilityLOW captures enum value "LOW"
	AvailabilityLOW Availability = "LOW"

	// AvailabilityHIGH captures enum value "HIGH"
	AvailabilityHIGH Availability = "HIGH"
)

// for schema
var availabilityEnum []interface{}

func init() {
	var res []Availability
	if err := json.Unmarshal([]byte(`["NONE","LOW","HIGH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		availabilityEnum = append(availabilityEnum, v)
	}
}

func (m Availability) validateAvailabilityEnum(path, location string, value Availability) error {
	if err := validate.EnumCase(path, location, value, availabilityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this availability
func (m Availability) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAvailabilityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this availability based on context it is used
func (m Availability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
