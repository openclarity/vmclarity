// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RootkitType rootkit type
//
// swagger:model RootkitType
type RootkitType string

func NewRootkitType(value RootkitType) *RootkitType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RootkitType.
func (m RootkitType) Pointer() *RootkitType {
	return &m
}

const (

	// RootkitTypeMEMORY captures enum value "MEMORY"
	RootkitTypeMEMORY RootkitType = "MEMORY"

	// RootkitTypeKERNEL captures enum value "KERNEL"
	RootkitTypeKERNEL RootkitType = "KERNEL"

	// RootkitTypeAPPLICATION captures enum value "APPLICATION"
	RootkitTypeAPPLICATION RootkitType = "APPLICATION"

	// RootkitTypeFIRMWARE captures enum value "FIRMWARE"
	RootkitTypeFIRMWARE RootkitType = "FIRMWARE"
)

// for schema
var rootkitTypeEnum []interface{}

func init() {
	var res []RootkitType
	if err := json.Unmarshal([]byte(`["MEMORY","KERNEL","APPLICATION","FIRMWARE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rootkitTypeEnum = append(rootkitTypeEnum, v)
	}
}

func (m RootkitType) validateRootkitTypeEnum(path, location string, value RootkitType) error {
	if err := validate.EnumCase(path, location, value, rootkitTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this rootkit type
func (m RootkitType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRootkitTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this rootkit type based on context it is used
func (m RootkitType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
