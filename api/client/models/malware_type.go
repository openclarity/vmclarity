// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MalwareType malware type
//
// swagger:model MalwareType
type MalwareType string

func NewMalwareType(value MalwareType) *MalwareType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MalwareType.
func (m MalwareType) Pointer() *MalwareType {
	return &m
}

const (

	// MalwareTypeADWARE captures enum value "ADWARE"
	MalwareTypeADWARE MalwareType = "ADWARE"

	// MalwareTypeVIRUS captures enum value "VIRUS"
	MalwareTypeVIRUS MalwareType = "VIRUS"

	// MalwareTypeTROJAN captures enum value "TROJAN"
	MalwareTypeTROJAN MalwareType = "TROJAN"

	// MalwareTypeWORM captures enum value "WORM"
	MalwareTypeWORM MalwareType = "WORM"

	// MalwareTypeSPYWARE captures enum value "SPYWARE"
	MalwareTypeSPYWARE MalwareType = "SPYWARE"

	// MalwareTypeRANSOMWARE captures enum value "RANSOMWARE"
	MalwareTypeRANSOMWARE MalwareType = "RANSOMWARE"
)

// for schema
var malwareTypeEnum []interface{}

func init() {
	var res []MalwareType
	if err := json.Unmarshal([]byte(`["ADWARE","VIRUS","TROJAN","WORM","SPYWARE","RANSOMWARE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		malwareTypeEnum = append(malwareTypeEnum, v)
	}
}

func (m MalwareType) validateMalwareTypeEnum(path, location string, value MalwareType) error {
	if err := validate.EnumCase(path, location, value, malwareTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this malware type
func (m MalwareType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMalwareTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this malware type based on context it is used
func (m MalwareType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
