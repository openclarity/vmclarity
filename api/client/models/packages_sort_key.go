// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PackagesSortKey packages sort key
//
// swagger:model PackagesSortKey
type PackagesSortKey string

func NewPackagesSortKey(value PackagesSortKey) *PackagesSortKey {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PackagesSortKey.
func (m PackagesSortKey) Pointer() *PackagesSortKey {
	return &m
}

const (

	// PackagesSortKeyPackageName captures enum value "packageName"
	PackagesSortKeyPackageName PackagesSortKey = "packageName"

	// PackagesSortKeyInstances captures enum value "instances"
	PackagesSortKeyInstances PackagesSortKey = "instances"

	// PackagesSortKeyLanguage captures enum value "language"
	PackagesSortKeyLanguage PackagesSortKey = "language"

	// PackagesSortKeyVulnerabilities captures enum value "vulnerabilities"
	PackagesSortKeyVulnerabilities PackagesSortKey = "vulnerabilities"

	// PackagesSortKeyVersion captures enum value "version"
	PackagesSortKeyVersion PackagesSortKey = "version"

	// PackagesSortKeyLicense captures enum value "license"
	PackagesSortKeyLicense PackagesSortKey = "license"
)

// for schema
var packagesSortKeyEnum []interface{}

func init() {
	var res []PackagesSortKey
	if err := json.Unmarshal([]byte(`["packageName","instances","language","vulnerabilities","version","license"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packagesSortKeyEnum = append(packagesSortKeyEnum, v)
	}
}

func (m PackagesSortKey) validatePackagesSortKeyEnum(path, location string, value PackagesSortKey) error {
	if err := validate.EnumCase(path, location, value, packagesSortKeyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this packages sort key
func (m PackagesSortKey) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePackagesSortKeyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this packages sort key based on context it is used
func (m PackagesSortKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
