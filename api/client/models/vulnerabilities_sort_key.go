// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VulnerabilitiesSortKey vulnerabilities sort key
//
// swagger:model VulnerabilitiesSortKey
type VulnerabilitiesSortKey string

func NewVulnerabilitiesSortKey(value VulnerabilitiesSortKey) *VulnerabilitiesSortKey {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VulnerabilitiesSortKey.
func (m VulnerabilitiesSortKey) Pointer() *VulnerabilitiesSortKey {
	return &m
}

const (

	// VulnerabilitiesSortKeyVulnerabilityName captures enum value "vulnerabilityName"
	VulnerabilitiesSortKeyVulnerabilityName VulnerabilitiesSortKey = "vulnerabilityName"

	// VulnerabilitiesSortKeyPackageName captures enum value "packageName"
	VulnerabilitiesSortKeyPackageName VulnerabilitiesSortKey = "packageName"

	// VulnerabilitiesSortKeyPackageVersion captures enum value "packageVersion"
	VulnerabilitiesSortKeyPackageVersion VulnerabilitiesSortKey = "packageVersion"

	// VulnerabilitiesSortKeySeverity captures enum value "severity"
	VulnerabilitiesSortKeySeverity VulnerabilitiesSortKey = "severity"

	// VulnerabilitiesSortKeyInstances captures enum value "instances"
	VulnerabilitiesSortKeyInstances VulnerabilitiesSortKey = "instances"

	// VulnerabilitiesSortKeyFixVersion captures enum value "fixVersion"
	VulnerabilitiesSortKeyFixVersion VulnerabilitiesSortKey = "fixVersion"

	// VulnerabilitiesSortKeySource captures enum value "source"
	VulnerabilitiesSortKeySource VulnerabilitiesSortKey = "source"
)

// for schema
var vulnerabilitiesSortKeyEnum []interface{}

func init() {
	var res []VulnerabilitiesSortKey
	if err := json.Unmarshal([]byte(`["vulnerabilityName","packageName","packageVersion","severity","instances","fixVersion","source"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vulnerabilitiesSortKeyEnum = append(vulnerabilitiesSortKeyEnum, v)
	}
}

func (m VulnerabilitiesSortKey) validateVulnerabilitiesSortKeyEnum(path, location string, value VulnerabilitiesSortKey) error {
	if err := validate.EnumCase(path, location, value, vulnerabilitiesSortKeyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this vulnerabilities sort key
func (m VulnerabilitiesSortKey) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVulnerabilitiesSortKeyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this vulnerabilities sort key based on context it is used
func (m VulnerabilitiesSortKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
