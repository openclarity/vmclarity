// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AttackVector attack vector
//
// swagger:model AttackVector
type AttackVector string

func NewAttackVector(value AttackVector) *AttackVector {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AttackVector.
func (m AttackVector) Pointer() *AttackVector {
	return &m
}

const (

	// AttackVectorNETWORK captures enum value "NETWORK"
	AttackVectorNETWORK AttackVector = "NETWORK"

	// AttackVectorADJACENT captures enum value "ADJACENT"
	AttackVectorADJACENT AttackVector = "ADJACENT"

	// AttackVectorLOCAL captures enum value "LOCAL"
	AttackVectorLOCAL AttackVector = "LOCAL"

	// AttackVectorPHYSICAL captures enum value "PHYSICAL"
	AttackVectorPHYSICAL AttackVector = "PHYSICAL"
)

// for schema
var attackVectorEnum []interface{}

func init() {
	var res []AttackVector
	if err := json.Unmarshal([]byte(`["NETWORK","ADJACENT","LOCAL","PHYSICAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attackVectorEnum = append(attackVectorEnum, v)
	}
}

func (m AttackVector) validateAttackVectorEnum(path, location string, value AttackVector) error {
	if err := validate.EnumCase(path, location, value, attackVectorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this attack vector
func (m AttackVector) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAttackVectorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this attack vector based on context it is used
func (m AttackVector) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
