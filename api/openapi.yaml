openapi: 3.0.1

info:
  title: VMClarity APIs
  version: 1.0.0

servers:
  - url: /api

paths:
  /targets:
    get:
      summary: Get targets
      parameters:
        - $ref: '#/components/parameters/odataFilter'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Targets'
        default:
          $ref: '#/components/responses/UnknownError'
    post:
      summary: Create target
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Target'
        required: true
      responses:
        201:
          description: A new target was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
        409:
          description: Target already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetExists'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body

  /targets/{targetID}:
    get:
      summary: Get target.
      parameters:
        - $ref: '#/components/parameters/targetID'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
        404:
          description: Target ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
    put:
      summary: Update target.
      parameters:
        - $ref: '#/components/parameters/targetID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Target'
        required: true
      responses:
        200:
          description: Updated target successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
        404:
          description: Target ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    delete:
      summary: Delete target.
      parameters:
        - $ref: '#/components/parameters/targetID'
      responses:
        204:
          $ref: '#/components/responses/Success'
        404:
          description: Target ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'

  /scanResults:
    get:
      summary: Get scan results according to the given filters
      parameters:
        - $ref: '#/components/parameters/odataFilter'
        - $ref: '#/components/parameters/odataSelect'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetScanResults'

        default:
          $ref: '#/components/responses/UnknownError'
    post:
      summary: Create a scan result for a specific target for a specific scan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetScanResult'
        required: true
      responses:
        201:
          description: New results were added to the target for a specific scan.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetScanResult'
        409:
          description: Scan results already exist for target and scan.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetScanResultExists'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body

  /scanResults/{scanResultID}:
    get:
      summary: Get a scan result.
      parameters:
        - $ref: '#/components/parameters/scanResultID'
        - $ref: '#/components/parameters/odataSelect'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetScanResult'
        404:
          description: Scan result ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
    put:
      summary: Update a scan result.
      parameters:
        - $ref: '#/components/parameters/scanResultID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetScanResult'
        required: true
      responses:
        200:
          description: Updated a scan result successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetScanResult'
        404:
          description: Scan result ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    patch:
      summary: Patch a scan result
      parameters:
        - $ref: '#/components/parameters/scanResultID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetScanResult'
        required: true
      responses:
        200:
          description: Target scan results were patched for the target for a specific scan.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetScanResult'
        404:
          description: Scan result ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body

  /scans:
    get:
      summary: Get all scans. Each scan contaians details about a multi-target scheduled scan.
      parameters:
        - $ref: '#/components/parameters/odataFilter'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scans'
        default:
          $ref: '#/components/responses/UnknownError'
    post:
      summary: Create a multi-target scheduled scan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scan'
        required: true
      responses:
        201:
          description: A new scan was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
        409:
          description: Scan already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanExists'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body

  /scans/{scanID}:
    get:
      summary: Get the details for a given multi-target scheduled scan.
      parameters:
        - $ref: '#/components/parameters/scanID'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
        404:
          description: Scan ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
    put:
      summary: Update a scan.
      parameters:
        - $ref: '#/components/parameters/scanID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scan'
        required: true
      responses:
        200:
          description: Updated scan successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
        404:
          description: Scan ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    patch:
      summary: Patch a scan.
      parameters:
        - $ref: '#/components/parameters/scanID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scan'
        required: true
      responses:
        200:
          description: Patched scan successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
        404:
          description: Scan ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    delete:
      summary: Delete a scan.
      parameters:
        - $ref: '#/components/parameters/scanID'
      responses:
        204:
          $ref: '#/components/responses/Success'
        404:
          description: Scan ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'

  /scanConfigs:
    get:
      summary: Get all scan configs.
      parameters:
        - $ref: '#/components/parameters/odataFilter'
        - $ref: '#/components/parameters/odataSelect'
        - $ref: '#/components/parameters/odataCount'
        - $ref: '#/components/parameters/odataTop'
        - $ref: '#/components/parameters/odataSkip'
        - $ref: '#/components/parameters/odataExpand'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfigs'

        default:
          $ref: '#/components/responses/UnknownError'
    post:
      summary: Create a scan config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanConfig'
        required: true
      responses:
        201:
          description: A new scan config was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfig'
        409:
          description: Scan config already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfigExists'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body

  /scanConfigs/{scanConfigID}:
    get:
      summary: Get the details for a scan config.
      parameters:
        - $ref: '#/components/parameters/scanConfigID'
        - $ref: '#/components/parameters/odataSelect'
        - $ref: '#/components/parameters/odataExpand'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfig'
        404:
          description: Scan config ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
    put:
      summary: Update a scan config.
      parameters:
        - $ref: '#/components/parameters/scanConfigID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanConfig'
        required: true
      responses:
        200:
          description: Updated scan config successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfig'
        404:
          description: Scan config ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    patch:
      summary: Patch a scan config.
      parameters:
        - $ref: '#/components/parameters/scanConfigID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanConfig'
        required: true
      responses:
        200:
          description: Patched scan config successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfig'
        404:
          description: Scan config ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    delete:
      summary: Delete a scan config.
      parameters:
        - $ref: '#/components/parameters/scanConfigID'
      responses:
        204:
          $ref: '#/components/responses/Success'
        404:
          description: Scan config ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        message:
          type: string
          readOnly: true
      description: An object that is returned in all cases of failures.

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          readOnly: true
      description: An object that is returned in cases of success that returns nothing.

    CloudProvider:
      type: string
      enum:
        - AWS

    Scans:
      type: object
      properties:
        total:
          type: integer
          description: Total scans count according to the given filters
          readOnly: true
        items:
          type: array
          description: List of scans according to the given filters and page.
            List length must be lower or equal to pageSize.
          items:
            $ref: '#/components/schemas/Scan'
          readOnly: true
      required:
        - total

    Scan:
      type: object
      description: Describes a multi-target scheduled scan.
      properties:
        id:
          type: string
          readOnly: true
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        scanConfig:
          $ref: '#/components/schemas/ScanConfigRelationship'
        scanConfigSnapshot:
          $ref: '#/components/schemas/ScanConfigData'
        targetIDs:
          description: List of target IDs that are targeted for scanning as part of this scan
          type: array
          items:
            type: string
        state:
          description: The lifecycle state of this scan.
          type: string
          enum:
            - Pending
            - Discovered
            - InProgress
            - Failed
            - Done
        stateMessage:
          description: Human-readable message indicating details about the last state transition.
          type: string
        stateReason:
          description: Machine-readable, UpperCamelCase text indicating the reason for the condition's last transition.
          type: string
          enum:
            - Aborted
            - TimedOut
            - OneOrMoreTargetFailedToScan
            - DiscoveryFailed
            - Unexpected
            - NothingToScan
            - Success
        summary:
          $ref: '#/components/schemas/ScanSummary'

    ScanSummary:
      description: A summary of the progress of a scan for informational purposes.
      type: object
      properties:
        jobsLeftToRun:
          type: integer
        jobsCompleted:
          type: integer
        totalPackages:
          type: integer
        totalExploits:
          type: integer
        totalMalware:
          type: integer
        totalMisconfigurations:
          type: integer
        totalRootkits:
          type: integer
        totalSecrets:
          type: integer
        totalVulnerabilities:
          $ref: '#/components/schemas/VulnerabilityScanSummary'

    VulnerabilityScanSummary:
      description: A summary of number of vulnerabilities found per severity.
      type: object
      properties:
        totalCriticalVulnerabilities:
          type: integer
        totalHighVulnerabilities:
          type: integer
        totalMediumVulnerabilities:
          type: integer
        totalLowVulnerabilities:
          type: integer
        totalNegligibleVulnerabilities:
          type: integer

    ScanExists:
      type: object
      properties:
        message:
          description: Describes which unique constraint combination causes the conflict.
          type: string
          readOnly: true
        scan:
          $ref: '#/components/schemas/Scan'

    ScanFamiliesConfig:
      type: object
      description: The configuration of the scanner families within a scan config
      properties:
        sbom:
          $ref: '#/components/schemas/SBOMConfig'
        vulnerabilities:
          $ref: '#/components/schemas/VulnerabilitiesConfig'
        malware:
          $ref: '#/components/schemas/MalwareConfig'
        rootkits:
          $ref: '#/components/schemas/RootkitsConfig'
        secrets:
          $ref: '#/components/schemas/SecretsConfig'
        misconfigurations:
          $ref: '#/components/schemas/MisconfigurationsConfig'
        exploits:
          $ref: '#/components/schemas/ExploitsConfig'

    VulnerabilitiesConfig:
      type: object
      properties:
        enabled:
          type: boolean

    SBOMConfig:
      type: object
      properties:
        enabled:
          type: boolean

    MalwareConfig:
      type: object
      properties:
        enabled:
          type: boolean

    RootkitsConfig:
      type: object
      properties:
        enabled:
          type: boolean

    SecretsConfig:
      type: object
      properties:
        enabled:
          type: boolean

    MisconfigurationsConfig:
      type: object
      properties:
        enabled:
          type: boolean

    ExploitsConfig:
      type: object
      properties:
        enabled:
          type: boolean

    ScanConfigs:
      type: object
      properties:
        count:
          type: integer
          description: Total scan config count according to the given filters
          readOnly: true
        items:
          type: array
          description: List of scan configs according to the given filters and page.
            List length must be lower or equal to pageSize.
          items:
            $ref: '#/components/schemas/ScanConfig'
          readOnly: true

    ScanConfigData:
      type: object
      description: |
        Fields for a ScanConfig so they can be shared between the ScanConfig,
        ScanConfigRelationship and used for the ScanConfig snapshot in the
        scan.
      properties:
        name:
          type: string
        scanFamiliesConfig:
          $ref: '#/components/schemas/ScanFamiliesConfig'
        scope:
          $ref: '#/components/schemas/ScanScopeType'
        scheduled:
          $ref: '#/components/schemas/RuntimeScheduleScanConfigType'

    ScanConfigRelationship:
      type: object
      description: Describes a relationship to a scan config which can be expanded.
      allOf:
        - $ref: '#/components/schemas/ScanConfigData'
        - type: object
          properties:
            id:
              type: string
            name:
              readOnly: true
            scanFamiliesConfig:
              readOnly: true
            scope:
              readOnly: true
            scheduled:
              readOnly: true
          required: ['id']

    ScanConfig:
      type: object
      description: Describes a multi-target scheduled scan config.
      allOf:
        - $ref: '#/components/schemas/ScanConfigData'
        - type: object
          properties:
            id:
              type: string
              readOnly: true
          required:
            - name

    ScanConfigExists:
      type: object
      properties:
        message:
          description: Describes which unique constraint combination causes the conflict.
          type: string
          readOnly: true
        scanConfig:
          $ref: '#/components/schemas/ScanConfig'

    ScanScopeType:
      type: object
      anyOf:
        - $ref: '#/components/schemas/AwsScanScope'
      discriminator:
        propertyName: objectType
        mapping:
          AwsScanScope: '#/components/schemas/AwsScanScope'

    AwsScanScope:
      type: object
      description: The scope of a configured scan.
      properties:
        objectType:
          type: string
        allRegions:
          description: Scan all regions, if set will override anything set in regions.
          type: boolean
        regions:
          type: array
          items:
            $ref: '#/components/schemas/AwsRegion'
        shouldScanStoppedInstances:
          type: boolean
        instanceTagSelector:
          type: array
          description: VM instances will be scanned if they contain all of these tags. If empty, not taken into account.
          items:
            $ref: '#/components/schemas/Tag'
        instanceTagExclusion:
          type: array
          description: VM instances will not be scanned if they contain all of these tags (even if they match instanceTagSelector). If empty, not taken into account.
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - objectType
      additionalProperties: false

    AwsRegion:
      type: object
      description: AWS region
      properties:
        name:
          type: string
        vpcs:
          type: array
          items:
            $ref: '#/components/schemas/AwsVPC'
      required:
        - name
      additionalProperties: false

    AwsVPC:
      type: object
      description: AWS VPC
      properties:
        id:
          type: string
        securityGroups:
          type: array
          items:
            $ref: '#/components/schemas/AwsSecurityGroup'
      required:
        - id
      additionalProperties: false

    AwsSecurityGroup:
      type: object
      description: AWS security group
      properties:
        id:
          type: string
      required:
        - id
      additionalProperties: false

    Tag:
      type: object
      description: AWS tag
      properties:
        key:
          type: string
        value:
          type: string
      required:
        - key
        - value
      additionalProperties: false

    RuntimeScheduleScanConfigType:
      type: object
      anyOf:
        - $ref: '#/components/schemas/SingleScheduleScanConfig'
        - $ref: '#/components/schemas/ByHoursScheduleScanConfig'
        - $ref: '#/components/schemas/ByDaysScheduleScanConfig'
        - $ref: '#/components/schemas/WeeklyScheduleScanConfig'
      discriminator:
        propertyName: objectType
        mapping:
          SingleScheduleScanConfig: '#/components/schemas/SingleScheduleScanConfig'
          ByHoursScheduleScanConfig: '#/components/schemas/ByHoursScheduleScanConfig'
          ByDaysScheduleScanConfig: '#/components/schemas/ByDaysScheduleScanConfig'
          WeeklyScheduleScanConfig: '#/components/schemas/WeeklyScheduleScanConfig'

    SingleScheduleScanConfig:
      type: 'object'
      properties:
        objectType:
          type: string
        operationTime:
          type: 'string'
          format: 'date-time'
      required:
        - operationTime
        - objectType

    ByHoursScheduleScanConfig:
      type: 'object'
      properties:
        objectType:
          type: string
        hoursInterval:
          type: 'integer'
          minimum: 1
          default: 1
      required:
        - objectType

    ByDaysScheduleScanConfig:
      type: 'object'
      properties:
        objectType:
          type: string
        daysInterval:
          type: 'integer'
          minimum: 1
          default: 1
        timeOfDay:
          $ref: '#/components/schemas/TimeOfDay'
      required:
        - objectType

    WeeklyScheduleScanConfig:
      type: 'object'
      properties:
        objectType:
          type: string
        dayInWeek:
          description: '1 - 7 which represents sun- sat'
          type: 'integer'
          minimum: 1
          maximum: 7
          default: 1
        timeOfDay:
          $ref: '#/components/schemas/TimeOfDay'
      required:
        - objectType

    TimeOfDay:
      type: 'object'
      properties:
        hour:
          type: 'integer'
          minimum: 0
          maximum: 23
          default: 0
        minute:
          type: 'integer'
          minimum: 0
          maximum: 59
          default: 0

    Targets:
      type: object
      properties:
        total:
          type: integer
          description: Total targets count according the given filters
          readOnly: true
        items:
          type: array
          description: List of targets in the given filters and page.
            List length must be lower or equal to pageSize.
          items:
            $ref: '#/components/schemas/Target'
          readOnly: true
      required:
        - total

    Target:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        targetInfo:
          $ref: '#/components/schemas/TargetType'

    TargetExists:
      type: object
      properties:
        message:
          description: Describes which unique constraint combination causes the conflict.
          type: string
          readOnly: true
        target:
          $ref: '#/components/schemas/Target'

    TargetType:
      type: object
      anyOf:
        - $ref: '#/components/schemas/VMInfo'
        - $ref: '#/components/schemas/PodInfo'
        - $ref: '#/components/schemas/DirInfo'
      discriminator:
        propertyName: objectType
        mapping:
          VMInfo: '#/components/schemas/VMInfo'
          PodInfo: '#/components/schemas/PodInfo'
          DirInfo: '#/components/schemas/DirInfo'

    VMInfo:
      type: object
      properties:
        objectType:
          type: string
        instanceID:
          type: string
        instanceProvider:
          $ref: '#/components/schemas/CloudProvider'
        location:
          type: string
      required:
        - objectType
        - instanceID
        - location

    PodInfo:
      type: object
      properties:
        objectType:
          type: string
        podName:
          type: string
        location:
          type: string
      required:
        - objectType

    DirInfo:
      type: object
      properties:
        objectType:
          type: string
        dirName:
          type: string
        location:
          type: string
      required:
        - objectType

    TargetScanResults:
      type: object
      properties:
        total:
          type: integer
          description: Total scan results count according to the given filters
          readOnly: true
        items:
          type: array
          description: List of scan results according to the given filters and page.
            List length must be lower or equal to pageSize.
          items:
            $ref: '#/components/schemas/TargetScanResult'
          readOnly: true
      required:
        - total

    TargetScanResult:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        targetId:
          type: string
        scanId:
          type: string
        status:
          $ref: '#/components/schemas/TargetScanStatus'
        sboms:
          $ref: '#/components/schemas/SbomScan'
        vulnerabilities:
          $ref: '#/components/schemas/VulnerabilityScan'
        malware:
          $ref: '#/components/schemas/MalwareScan'
        rootkits:
          $ref: '#/components/schemas/RootkitScan'
        secrets:
          $ref: '#/components/schemas/SecretScan'
        misconfigurations:
          $ref: '#/components/schemas/MisconfigurationScan'
        exploits:
          $ref: '#/components/schemas/ExploitScan'
        summary:
          $ref: '#/components/schemas/TargetScanResultSummary'
      required:
        - targetId
        - scanId

    TargetScanResultSummary:
      description: A summary of target scan result for informational purposes.
      type: object
      properties:
        totalPackages:
          type: integer
        totalExploits:
          type: integer
        totalMalware:
          type: integer
        totalMisconfigurations:
          type: integer
        totalRootkits:
          type: integer
        totalSecrets:
          type: integer
        totalVulnerabilities:
          $ref: '#/components/schemas/VulnerabilityScanSummary'

    TargetScanResultExists:
      type: object
      properties:
        message:
          description: Describes which unique constraint combination causes the conflict.
          readOnly: true
          type: string
        targetScanResult:
          $ref: '#/components/schemas/TargetScanResult'

    TargetScanStatus:
      type: object
      properties:
        general:
          $ref: '#/components/schemas/TargetScanState'
        sbom:
          $ref: '#/components/schemas/TargetScanState'
        vulnerabilities:
          $ref: '#/components/schemas/TargetScanState'
        malware:
          $ref: '#/components/schemas/TargetScanState'
        rootkits:
          $ref: '#/components/schemas/TargetScanState'
        secrets:
          $ref: '#/components/schemas/TargetScanState'
        misconfigurations:
          $ref: '#/components/schemas/TargetScanState'
        exploits:
          $ref: '#/components/schemas/TargetScanState'

    TargetScanState:
      type: object
      properties:
        state:
          type: string
          enum:
            - NOT_SCANNED
            - INIT
            - ATTACHED
            - IN_PROGRESS
            - DONE
        errors:
          type: array
          items:
            type: string

    Package:
      type: object
      properties:
        id:
          type: string
        packageInfo:
          $ref: '#/components/schemas/PackageInfo'

    Vulnerability:
      type: object
      properties:
        id:
          type: string
        vulnerabilityInfo:
          $ref: '#/components/schemas/VulnerabilityInfo'

    Secret:
      type: object
      properties:
        id:
          type: string
        secretInfo:
          $ref: '#/components/schemas/SecretInfo'

    Malware:
      type: object
      properties:
        id:
          type: string
        malwareInfo:
          $ref: '#/components/schemas/MalwareInfo'

    Rootkit:
      type: object
      properties:
        id:
          type: string
        rootkitInfo:
          $ref: '#/components/schemas/RootkitInfo'

    Misconfiguration:
      type: object
      properties:
        id:
          type: string
        misconfigurationInfo:
          $ref: '#/components/schemas/MisconfigurationInfo'

    Exploit:
      type: object
      properties:
        id:
          type: string
        exploitInfo:
          $ref: '#/components/schemas/ExploitInfo'

    PackageInfo:
      type: object
      properties:
        packageName:
          type: string
        packageVersion:
          type: string

    VulnerabilityInfo:
      type: object
      properties:
        vulnerabilityName:
          type: string
        description:
          type: string
        severity:
          $ref: '#/components/schemas/VulnerabilitySeverity'

    VulnerabilitySeverity:
      type: string
      enum:
        - CRITICAL
        - HIGH
        - MEDIUM
        - LOW
        - NEGLIGIBLE

    MalwareInfo:
      type: object
      properties:
        malwareName:
          type: string
        malwareType:
          $ref: '#/components/schemas/MalwareType'
        path:
          type: string
          description: Path of the file that contains malware

    RootkitInfo:
      type: object
      properties:
        rootkitName:
          type: string
        rootkitType:
          $ref: '#/components/schemas/RootkitType'
        path:
          type: string
          description: Path of the file that contains rootkit

    MisconfigurationInfo:
      type: object
      properties:
        description:
          type: string
        path:
          type: string
          description: Path of the file that contains misconfigurations

    SecretInfo:
      type: object
      properties:
        description:
          type: string
        filePath:
          description: "Name of the file containing the secret"
          type: string
        startLine:
          type: integer
        endLine:
          type: integer
        fingerprint:
          description: "Unique identification of the SecretInfo"
          type: string

    ExploitInfo:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
        cveID:
          type: string
        sourceDB:
          type: string
        urls:
          type: array
          items:
            type: string

    SbomScan:
      type: object
      properties:
        packages:
          type: array
          items:
            $ref: '#/components/schemas/Package'

    VulnerabilityScan:
      type: object
      properties:
        vulnerabilities:
          type: array
          items:
            $ref: '#/components/schemas/Vulnerability'

    MalwareScan:
      type: object
      properties:
        malware:
          type: array
          items:
            $ref: '#/components/schemas/Malware'

    RootkitScan:
      type: object
      properties:
        rootkits:
          type: array
          items:
            $ref: '#/components/schemas/Rootkit'

    SecretScan:
      type: object
      properties:
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/Secret'

    MisconfigurationScan:
      type: object
      properties:
        misconfigurations:
          type: array
          items:
            $ref: '#/components/schemas/Misconfiguration'

    ExploitScan:
      type: object
      properties:
        exploits:
          type: array
          items:
            $ref: '#/components/schemas/Exploit'

    MalwareType:
      type: string
      enum:
        - ADWARE
        - VIRUS
        - TROJAN
        - WORM
        - SPYWARE
        - RANSOMWARE

    RootkitType:
      type: string
      enum:
        - MEMORY
        - KERNEL
        - APPLICATION
        - FIRMWARE

    ScanType:
      type: string
      enum:
        - SBOM
        - VULNERABILITY
        - MALWARE
        - SECRET
        - MISCONFIGURATION
        - ROOTKIT
        - EXPLOIT

  responses:
    Success:
      description: Success message
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'

    UnknownError:
      description: Unknown error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'

  parameters:
    targetID:
      name: targetID
      in: path
      required: true
      schema:
        type: string

    odataFilter:
      name: "$filter"
      in: query
      schema:
        type: string

    odataSelect:
      name: "$select"
      in: query
      schema:
        type: string

    odataCount:
      name: "$count"
      in: query
      schema:
        type: boolean

    odataTop:
      name: "$top"
      in: query
      schema:
        type: integer

    odataSkip:
      name: "$skip"
      in: query
      schema:
        type: integer

    odataExpand:
      name: "$expand"
      in: query
      schema:
        type: string

    scanID:
      name: scanID
      in: path
      required: true
      schema:
        type: string

    scanResultID:
      name: scanResultID
      in: path
      required: true
      schema:
        type: string

    scanConfigID:
      name: scanConfigID
      in: path
      required: true
      schema:
        type: string

    page:
      name: page
      in: query
      description: Page number of the query
      required: false
      schema:
        type: integer

    pageSize:
      name: pageSize
      in: query
      description: Maximum items to return
      required: false
      schema:
        maximum: 50
        minimum: 1
        type: integer
