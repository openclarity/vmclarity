openapi: 3.0.1

info:
  title: VMClarity APIs
  version: 1.0.0

servers:
  - url: /api

paths:
  /assets:
    get:
      summary: Get assets
      operationId: GetAssets
      parameters:
        - $ref: '#/components/parameters/odataFilter'
        - $ref: '#/components/parameters/odataSelect'
        - $ref: '#/components/parameters/odataCount'
        - $ref: '#/components/parameters/odataTop'
        - $ref: '#/components/parameters/odataSkip'
        - $ref: '#/components/parameters/odataExpand'
        - $ref: '#/components/parameters/odataOrderBy'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assets'
        default:
          $ref: '#/components/responses/UnknownError'
    post:
      summary: Create asset
      operationId: PostAssets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
        required: true
      responses:
        201:
          description: A new asset was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        400:
          description: Invalid asset supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        409:
          description: Asset already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetExists'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body

  /assets/{assetID}:
    get:
      summary: Get asset.
      operationId: GetAssetsAssetID
      parameters:
        - $ref: '#/components/parameters/assetID'
        - $ref: '#/components/parameters/odataSelect'
        - $ref: '#/components/parameters/odataExpand'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        404:
          description: Asset ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
    put:
      summary: Update asset.
      operationId: PutAssetsAssetID
      parameters:
        - $ref: '#/components/parameters/assetID'
        - $ref: '#/components/parameters/ifmatch'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
        required: true
      responses:
        200:
          description: Updated asset successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        400:
          description: Invalid asset supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: Asset ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        409:
          description: Asset already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetExists'
        412:
          description: Etag didn't match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    patch:
      summary: Update asset.
      operationId: PatchAssetsAssetID
      parameters:
        - $ref: '#/components/parameters/assetID'
        - $ref: '#/components/parameters/ifmatch'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
        required: true
      responses:
        200:
          description: Updated asset successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        404:
          description: Asset ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        409:
          description: Asset already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetExists'
        412:
          description: Etag didn't match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    delete:
      summary: Delete asset.
      operationId: DeleteAssetsAssetID
      parameters:
        - $ref: '#/components/parameters/assetID'
      responses:
        200:
          $ref: '#/components/responses/Success'
        400:
          description: Invalid asset supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: Asset ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'

  /assetScans:
    get:
      summary: Get asset scans according to the given filters
      operationId: GetAssetScans
      parameters:
        - $ref: '#/components/parameters/odataFilter'
        - $ref: '#/components/parameters/odataSelect'
        - $ref: '#/components/parameters/odataCount'
        - $ref: '#/components/parameters/odataTop'
        - $ref: '#/components/parameters/odataSkip'
        - $ref: '#/components/parameters/odataExpand'
        - $ref: '#/components/parameters/odataOrderBy'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetScans'

        default:
          $ref: '#/components/responses/UnknownError'
    post:
      summary: Create an asset scan for a specified asset
      operationId: PostAssetScans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetScan'
        required: true
      responses:
        201:
          description: AssetScan was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetScan'
        400:
          description: Invalid asset scan supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        409:
          description: Conflicting asset scan found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetScanExists'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body

  /assetScans/{assetScanID}:
    get:
      summary: Get an asset scan.
      operationId: GetAssetScansAssetScanID
      parameters:
        - $ref: '#/components/parameters/assetScanID'
        - $ref: '#/components/parameters/odataSelect'
        - $ref: '#/components/parameters/odataExpand'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetScan'
        404:
          description: AssetScan ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
    put:
      summary: Update an asset scan.
      operationId: PutAssetScansAssetScanID
      parameters:
        - $ref: '#/components/parameters/assetScanID'
        - $ref: '#/components/parameters/ifmatch'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetScan'
        required: true
      responses:
        200:
          description: Updated an asset scan successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetScan'
        400:
          description: Invalid asset scan supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: AssetScan ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        409:
          description: Conflicting asset scan found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetScanExists'
        412:
          description: Etag didn't match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    patch:
      summary: Patch an asset scan
      operationId: PatchAssetScansAssetScanID
      parameters:
        - $ref: '#/components/parameters/assetScanID'
        - $ref: '#/components/parameters/ifmatch'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetScan'
        required: true
      responses:
        200:
          description: Updated an asset scan successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetScan'
        400:
          description: Invalid asset scan supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: AssetScan ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        409:
          description: Conflicting asset scan found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetScanExists'
        412:
          description: Etag didn't match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body

  /scans:
    get:
      summary: Get all scans. Each scan contains details about a multi-asset scheduled scan.
      operationId: GetScans
      parameters:
        - $ref: '#/components/parameters/odataFilter'
        - $ref: '#/components/parameters/odataSelect'
        - $ref: '#/components/parameters/odataCount'
        - $ref: '#/components/parameters/odataTop'
        - $ref: '#/components/parameters/odataSkip'
        - $ref: '#/components/parameters/odataExpand'
        - $ref: '#/components/parameters/odataOrderBy'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scans'
        default:
          $ref: '#/components/responses/UnknownError'
    post:
      summary: Create a multi-asset scheduled scan
      operationId: PostScans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scan'
        required: true
      responses:
        201:
          description: A new scan was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
        400:
          description: Invalid scan supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        409:
          description: Scan already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanExists'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body

  /scans/{scanID}:
    get:
      summary: Get the details for a given multi-asset scheduled scan.
      operationId: GetScansScanID
      parameters:
        - $ref: '#/components/parameters/scanID'
        - $ref: '#/components/parameters/odataSelect'
        - $ref: '#/components/parameters/odataExpand'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
        404:
          description: Scan ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
    put:
      summary: Update a scan.
      operationId: PutScansScanID
      parameters:
        - $ref: '#/components/parameters/scanID'
        - $ref: '#/components/parameters/ifmatch'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scan'
        required: true
      responses:
        200:
          description: Updated scan successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
        400:
          description: Invalid scan supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: Scan ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        409:
          description: Scan already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanExists'
        412:
          description: Etag didn't match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    patch:
      summary: Patch a scan.
      operationId: PatchScansScanID
      parameters:
        - $ref: '#/components/parameters/scanID'
        - $ref: '#/components/parameters/ifmatch'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scan'
        required: true
      responses:
        200:
          description: Patched scan successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
        400:
          description: Invalid scan supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: Scan ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        409:
          description: Scan already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanExists'
        412:
          description: Etag didn't match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    delete:
      summary: Delete a scan.
      operationId: DeleteScansScanID
      parameters:
        - $ref: '#/components/parameters/scanID'
      responses:
        200:
          $ref: '#/components/responses/Success'
        404:
          description: Scan ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'

  /scanConfigs:
    get:
      summary: Get all scan configs.
      operationId: GetScanConfigs
      parameters:
        - $ref: '#/components/parameters/odataFilter'
        - $ref: '#/components/parameters/odataSelect'
        - $ref: '#/components/parameters/odataCount'
        - $ref: '#/components/parameters/odataTop'
        - $ref: '#/components/parameters/odataSkip'
        - $ref: '#/components/parameters/odataExpand'
        - $ref: '#/components/parameters/odataOrderBy'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfigs'

        default:
          $ref: '#/components/responses/UnknownError'
    post:
      summary: Create a scan config
      operationId: PostScanConfigs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanConfig'
        required: true
      responses:
        201:
          description: A new scan config was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfig'
        400:
          description: Invalid scan config supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        409:
          description: Scan config already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfigExists'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body

  /scanConfigs/{scanConfigID}:
    get:
      summary: Get the details for a scan config.
      operationId: GetScanConfigsScanConfigID
      parameters:
        - $ref: '#/components/parameters/scanConfigID'
        - $ref: '#/components/parameters/odataSelect'
        - $ref: '#/components/parameters/odataExpand'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfig'
        404:
          description: Scan config ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
    put:
      summary: Update a scan config.
      operationId: PutScanConfigsScanConfigID
      parameters:
        - $ref: '#/components/parameters/scanConfigID'
        - $ref: '#/components/parameters/ifmatch'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanConfig'
        required: true
      responses:
        200:
          description: Updated scan config successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfig'
        400:
          description: Invalid scan config supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: Scan config ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        409:
          description: Scan config already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfigExists'
        412:
          description: Etag didn't match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    patch:
      summary: Patch a scan config.
      operationId: PatchScanConfigsScanConfigID
      parameters:
        - $ref: '#/components/parameters/scanConfigID'
        - $ref: '#/components/parameters/ifmatch'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanConfig'
        required: true
      responses:
        200:
          description: Patched scan config successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfig'
        400:
          description: Invalid scan config supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: Scan config ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        409:
          description: Scan config already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfigExists'
        412:
          description: Etag didn't match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    delete:
      summary: Delete a scan config.
      operationId: DeleteScanConfigsScanConfigID
      parameters:
        - $ref: '#/components/parameters/scanConfigID'
      responses:
        200:
          $ref: '#/components/responses/Success'
        404:
          description: Scan config ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'

  /findings:
    get:
      summary: Get all findings.
      operationId: GetFindings
      parameters:
        - $ref: '#/components/parameters/odataFilter'
        - $ref: '#/components/parameters/odataSelect'
        - $ref: '#/components/parameters/odataCount'
        - $ref: '#/components/parameters/odataTop'
        - $ref: '#/components/parameters/odataSkip'
        - $ref: '#/components/parameters/odataExpand'
        - $ref: '#/components/parameters/odataOrderBy'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Findings'
        default:
          $ref: '#/components/responses/UnknownError'
    post:
      summary: Create a finding
      operationId: PostFindings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Finding'
        required: true
      responses:
        201:
          description: A new finding was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Finding'
        400:
          description: Invalid finding supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        409:
          description: Finding conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindingExists'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body

  /discovery/scopes:
    get:
      summary: Get all available scopes
      operationId: GetDiscoveryScopes
      parameters:
        - $ref: '#/components/parameters/odataFilter'
        - $ref: '#/components/parameters/odataSelect'
        - $ref: '#/components/parameters/odataOrderBy'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scopes'
        default:
          $ref: '#/components/responses/UnknownError'
    put:
      summary: Set all available scopes
      operationId: PutDiscoveryScopes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scopes'
        required: true
      responses:
        200:
          description: All scopes were set successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scopes'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body

  /findings/{findingID}:
    get:
      summary: Get the details for a finding.
      operationId: GetFindingsFindingID
      parameters:
        - $ref: '#/components/parameters/findingID'
        - $ref: '#/components/parameters/odataSelect'
        - $ref: '#/components/parameters/odataExpand'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Finding'
        404:
          description: Finding ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
    put:
      summary: Update a finding.
      operationId: PutFindingsFindingID
      parameters:
        - $ref: '#/components/parameters/findingID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Finding'
        required: true
      responses:
        200:
          description: Updated finding successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Finding'
        400:
          description: Invalid finding supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: Finding ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    patch:
      summary: Patch a finding.
      operationId: PatchFindingsFindingID
      parameters:
        - $ref: '#/components/parameters/findingID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Finding'
        required: true
      responses:
        200:
          description: Patched finding successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Finding'
        400:
          description: Invalid finding supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: Finding ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body
    delete:
      summary: Delete a finding.
      operationId: DeleteFindingsFindingID
      parameters:
        - $ref: '#/components/parameters/findingID'
      responses:
        200:
          $ref: '#/components/responses/Success'
        404:
          description: Finding ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          $ref: '#/components/responses/UnknownError'

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        message:
          type: string
          readOnly: true
      description: An object that is returned in all cases of failures.

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          readOnly: true
      description: An object that is returned in cases of success that returns nothing.

    CloudProvider:
      type: string
      enum:
        - AWS
        - Azure

    Scans:
      type: object
      properties:
        count:
          type: integer
          description: Total scans count according to the given filters
          readOnly: true
        items:
          type: array
          description: List of scans according to the given filters and page.
            List length must be lower or equal to pageSize.
          items:
            $ref: '#/components/schemas/Scan'
          readOnly: true

    ScanRelationship:
      type: object
      description: Describes an expandable relationship to Scan object
      properties:
        id:
          type: string
        revision:
          type: integer
          readOnly: true
        startTime:
          type: string
          format: date-time
          readOnly: true
        endTime:
          type: string
          format: date-time
          readOnly: true
        scanConfig:
          $ref: '#/components/schemas/ScanConfigRelationship'
          readOnly: true
        scanConfigSnapshot:
          $ref: '#/components/schemas/ScanConfigSnapshot'
          readOnly: true
        assetIDs:
          description: List of asset IDs to be scanned
          type: array
          items:
            type: string
          nullable: true
          readOnly: true
        state:
          description: The lifecycle state of this scan.
          type: string
          enum:
            - Pending
            - Discovered
            - InProgress
            - Aborted
            - Failed
            - Done
          readOnly: true
        stateMessage:
          description: Human-readable message indicating details about the last state transition.
          type: string
          readOnly: true
        stateReason:
          description: Machine-readable, UpperCamelCase text indicating the reason for the condition's last transition.
          type: string
          enum:
            - Aborted
            - TimedOut
            - OneOrMoreAssetFailedToScan
            - DiscoveryFailed
            - Unexpected
            - NothingToScan
            - Success
          readOnly: true
        summary:
          $ref: '#/components/schemas/ScanSummary'
          readOnly: true
      required:
        - id

    # NOTE(sambetts) Any changes made to Scan must be reflected in
    # ScanRelationship to ensure correct operation of the API when $expanding
    Scan:
      type: object
      description: Describes a multi-asset scheduled scan.
      properties:
        id:
          type: string
          # TODO(sambetts) Decide if we want the validation here by having
          # separate schemas for GET, POST and PATCH
          #
          # We can't make anything readOnly or required here if we want to
          # use the same schema for PATCH otherwise it will require you
          # always send the required fields and remove the readOnly fields
          # on the client side.
          #
          # readOnly: true
        revision:
          type: integer
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        scanConfig:
          $ref: '#/components/schemas/ScanConfigRelationship'
        scanConfigSnapshot:
          $ref: '#/components/schemas/ScanConfigSnapshot'
        assetIDs:
          description: List of asset IDs to be scanned
          type: array
          items:
            type: string
          nullable: true
        state:
          description: The lifecycle state of this scan.
          type: string
          enum:
            - Pending
            - Discovered
            - InProgress
            - Aborted
            - Failed
            - Done
        stateMessage:
          description: Human-readable message indicating details about the last state transition.
          type: string
        stateReason:
          description: Machine-readable, UpperCamelCase text indicating the reason for the condition's last transition.
          type: string
          enum:
            - Aborted
            - TimedOut
            - OneOrMoreAssetFailedToScan
            - DiscoveryFailed
            - Unexpected
            - NothingToScan
            - Success
        summary:
          $ref: '#/components/schemas/ScanSummary'

    ScanSummary:
      description: A summary of the progress of a scan for informational purposes.
      allOf:
        - $ref: '#/components/schemas/ScanFindingsSummary'
        - type: object
          properties:
            jobsLeftToRun:
              type: integer
            jobsCompleted:
              type: integer

    ScanFindingsSummary:
      description: A summary of the scan findings.
      type: object
      properties:
        totalPackages:
          type: integer
        totalExploits:
          type: integer
        totalMalware:
          type: integer
        totalMisconfigurations:
          type: integer
        totalRootkits:
          type: integer
        totalSecrets:
          type: integer
        totalVulnerabilities:
          $ref: '#/components/schemas/VulnerabilityScanSummary'

    VulnerabilityScanSummary:
      description: A summary of number of vulnerabilities found per severity.
      type: object
      properties:
        totalCriticalVulnerabilities:
          type: integer
        totalHighVulnerabilities:
          type: integer
        totalMediumVulnerabilities:
          type: integer
        totalLowVulnerabilities:
          type: integer
        totalNegligibleVulnerabilities:
          type: integer

    ScanExists:
      type: object
      properties:
        message:
          description: Describes which unique constraint combination causes the conflict.
          type: string
          readOnly: true
        scan:
          $ref: '#/components/schemas/Scan'

    ScanFamiliesConfig:
      type: object
      description: The configuration of the scanner families within a scan config
      properties:
        sbom:
          $ref: '#/components/schemas/SBOMConfig'
        vulnerabilities:
          $ref: '#/components/schemas/VulnerabilitiesConfig'
        malware:
          $ref: '#/components/schemas/MalwareConfig'
        rootkits:
          $ref: '#/components/schemas/RootkitsConfig'
        secrets:
          $ref: '#/components/schemas/SecretsConfig'
        misconfigurations:
          $ref: '#/components/schemas/MisconfigurationsConfig'
        exploits:
          $ref: '#/components/schemas/ExploitsConfig'

    VulnerabilitiesConfig:
      type: object
      properties:
        enabled:
          type: boolean

    SBOMConfig:
      type: object
      properties:
        enabled:
          type: boolean

    MalwareConfig:
      type: object
      properties:
        enabled:
          type: boolean

    RootkitsConfig:
      type: object
      properties:
        enabled:
          type: boolean

    SecretsConfig:
      type: object
      properties:
        enabled:
          type: boolean

    MisconfigurationsConfig:
      type: object
      properties:
        enabled:
          type: boolean

    ExploitsConfig:
      type: object
      properties:
        enabled:
          type: boolean

    ScanConfigs:
      type: object
      properties:
        count:
          type: integer
          description: Total scan config count according to the given filters
          readOnly: true
        items:
          type: array
          description: List of scan configs according to the given filters and page.
            List length must be lower or equal to pageSize.
          items:
            $ref: '#/components/schemas/ScanConfig'
          readOnly: true

    ScanConfigSnapshot:
      type: object
      description: |
        Snapshot of the configuration from the ScanConfig which created the
        scan, so that changes in the ScanConfig do not affect the existing
        Scan.
      properties:
        name:
          type: string
        scanFamiliesConfig:
          $ref: '#/components/schemas/ScanFamiliesConfig'
        scope:
          $ref: '#/components/schemas/ScanScopeType'
        timeoutSeconds:
          type: integer
          minimum: 0
          description: |
            The maximum time in seconds that a scan started from this config
            should run for before being automatically aborted.
        scheduled:
          $ref: '#/components/schemas/RuntimeScheduleScanConfig'
        maxParallelScanners:
          type: 'integer'
          minimum: 1
          maximum: 20
          description: "The maximum number of scanners that can run in parallel for each scan"
        disabled:
          description: 'if true, the scan config is disabled and no scan should run from it'
          type: boolean
        scannerInstanceCreationConfig:
          $ref: '#/components/schemas/ScannerInstanceCreationConfig'

    ScannerInstanceCreationConfig:
      type: object
      description: Configuration of scanner instance
      properties:
        useSpotInstances:
          type: boolean
        retryMaxAttempts:
          type: integer
        maxPrice:
          type: string
      required:
        - useSpotInstances

    ScanConfigRelationship:
      type: object
      description: Describes a relationship to a scan config which can be expanded.
      properties:
        id:
          type: string
        revision:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        scanFamiliesConfig:
          $ref: '#/components/schemas/ScanFamiliesConfig'
          readOnly: true
        scope:
          $ref: '#/components/schemas/ScanScopeType'
          readOnly: true
        timeoutSeconds:
          type: integer
          minimum: 0
          description: |
            The maximum time in seconds that a scan started from this config
            should run for before being automatically aborted.
          readOnly: true
        scheduled:
          $ref: '#/components/schemas/RuntimeScheduleScanConfig'
          readOnly: true
        maxParallelScanners:
          type: 'integer'
          minimum: 1
          maximum: 20
          description: "The maximum number of scanners that can run in parallel for each scan"
          readOnly: true
        disabled:
          description: 'if true, the scan config is disabled and no scan should run from it'
          type: boolean
          readOnly: true
        scannerInstanceCreationConfig:
          $ref: '#/components/schemas/ScannerInstanceCreationConfig'
          readOnly: true
      required: ['id']

    # NOTE(sambetts) Any changes made to ScanConfig must be reflected in
    # ScanConfigRelationship to ensure correct operation of the API when $expanding
    ScanConfig:
      type: object
      description: Describes a multi-asset scheduled scan config.
      properties:
        id:
          type: string
        revision:
          type: integer
        name:
          type: string
        scanFamiliesConfig:
          $ref: '#/components/schemas/ScanFamiliesConfig'
        scope:
          $ref: '#/components/schemas/ScanScopeType'
        timeoutSeconds:
          type: integer
          minimum: 0
          description: |
            The maximum time in seconds that a scan started from this config
            should run for before being automatically aborted.
        scheduled:
          $ref: '#/components/schemas/RuntimeScheduleScanConfig'
        maxParallelScanners:
          description: "The maximum number of scanners that can run in parallel for each scan"
          type: 'integer'
          minimum: 1
          maximum: 20
          default: 2
        disabled:
          description: 'if true, the scan config is disabled and no scan should run from it'
          type: boolean
        scannerInstanceCreationConfig:
          $ref: '#/components/schemas/ScannerInstanceCreationConfig'

    ScanConfigExists:
      type: object
      properties:
        message:
          description: Describes which unique constraint combination causes the conflict.
          type: string
          readOnly: true
        scanConfig:
          $ref: '#/components/schemas/ScanConfig'

    Scopes:
      type: object
      description: Scopes discovery
      properties:
        scopeInfo:
          $ref: '#/components/schemas/ScopeType'

    ScanScopeType:
      type: object
      anyOf:
        - $ref: '#/components/schemas/AwsScanScope'
        - $ref: '#/components/schemas/AzureScanScope'
      discriminator:
        propertyName: objectType
        mapping:
          AwsScanScope: '#/components/schemas/AwsScanScope'
          AzureScanScope: '#/components/schemas/AzureScanScope'

    AzureScanScope:
      type: object
      description: The scope of a configured scan within a subscription.
      properties:
        objectType:
          type: string
        allResourceGroups:
          description: Scan all resource groups in the subscription, if set will override anything set in resourceGroups.
          type: boolean
        resourceGroups:
          type: array
          items:
            $ref: '#/components/schemas/AzureResourceGroup'
          nullable: true
        instanceTagSelector:
          type: array
          description: VM instances will be scanned if they contain all of these tags. If empty, not taken into account.
          items:
            $ref: '#/components/schemas/Tag'
          nullable: true
        instanceTagExclusion:
          type: array
          description: VM instances will not be scanned if they contain all of these tags (even if they match instanceTagSelector). If empty, not taken into account.
          items:
            $ref: '#/components/schemas/Tag'
          nullable: true
      required:
        - objectType
      additionalProperties: false

    AzureResourceGroup:
      type: object
      description: Azure Resource Group
      properties:
        name:
          type: string
          minLength: 1
      required:
        - name
      additionalProperties: false

    AwsScanScope:
      type: object
      description: The scope of a configured scan.
      properties:
        objectType:
          type: string
        allRegions:
          description: Scan all regions, if set will override anything set in regions.
          type: boolean
        regions:
          type: array
          items:
            $ref: '#/components/schemas/AwsRegion'
          nullable: true
        shouldScanStoppedInstances:
          type: boolean
        instanceTagSelector:
          type: array
          description: VM instances will be scanned if they contain all of these tags. If empty, not taken into account.
          items:
            $ref: '#/components/schemas/Tag'
          nullable: true
        instanceTagExclusion:
          type: array
          description: VM instances will not be scanned if they contain all of these tags (even if they match instanceTagSelector). If empty, not taken into account.
          items:
            $ref: '#/components/schemas/Tag'
          nullable: true
      required:
        - objectType
      additionalProperties: false

    ScopeType:
      type: object
      anyOf:
        - $ref: '#/components/schemas/AwsAccountScope'
        - $ref: '#/components/schemas/AzureSubscriptionScope'
      discriminator:
        propertyName: objectType
        mapping:
          AwsAccountScope: '#/components/schemas/AwsAccountScope'
          AzureSubscriptionScope: '#/components/schemas/AzureSubscriptionScope'

    AzureSubscriptionScope:
      type: object
      description: Azure subscription scope
      properties:
        objectType:
          type: string
        subscriptionID:
          type: string
        resourceGroups:
          type: array
          items:
            $ref: '#/components/schemas/AzureResourceGroup'
          nullable: true
      required:
        - objectType

    AwsAccountScope:
      type: object
      description: AWS cloud account scope
      properties:
        objectType:
          type: string
        regions:
          type: array
          items:
            $ref: '#/components/schemas/AwsRegion'
          nullable: true
      required:
        - objectType

    AwsRegion:
      type: object
      description: AWS region
      properties:
        name:
          type: string
          minLength: 1
        vpcs:
          type: array
          items:
            $ref: '#/components/schemas/AwsVPC'
          nullable: true
      required:
        - name
      additionalProperties: false

    AwsVPC:
      type: object
      description: AWS VPC
      properties:
        id:
          type: string
          minLength: 1
        securityGroups:
          type: array
          items:
            $ref: '#/components/schemas/SecurityGroup'
          nullable: true
      required:
        - id
      additionalProperties: false

    SecurityGroup:
      type: object
      description: general cloud security group
      properties:
        id:
          type: string
          minLength: 1
      required:
        - id
      additionalProperties: false

    Tag:
      type: object
      description: AWS tag
      properties:
        key:
          type: string
        value:
          type: string
      required:
        - key
        - value
      additionalProperties: false

    RuntimeScheduleScanConfig:
      type: object
      minProperties: 1 # Require that at least 1 property will be set
      additionalProperties: false
      description: 'Runtime schedule scan configuration.
          If only operationTime is set, it will be a single scan scheduled for the operationTime.
          If only cronLine is set, the current time will be the "from time" to start the scheduling according to the cronLine.
          If both operationTime and cronLine are set, the first scan will run at operationTime 
          and the operationTime will be the first time that the cronLine will be effective from.'
      properties:
        cronLine:
          description: 'Cron schedule expressions.'
          example: '5 4 * * 1'
          type: string
        operationTime:
          description: 'The next time this ScanConfig should trigger a scan.'
          type: string
          format: date-time

    Assets:
      type: object
      properties:
        count:
          type: integer
          description: Total assets count according the given filters
          readOnly: true
        items:
          type: array
          description: List of assets in the given filters and page.
            List length must be lower or equal to pageSize.
          items:
            $ref: '#/components/schemas/Asset'
          readOnly: true

    AssetCommon:
      type: object

    # NOTE(sambetts) Any changes made to Asset must be reflected in
    # AssetRelationship to ensure correct operation of the API when $expanding
    Asset:
      type: object
      description: Describes an asset object.
      properties:
        id:
          type: string
          # TODO(sambetts) Decide if we want the validation here by having
          # separate schemas for GET, POST and PATCH.
          #
          # We can't make anything readOnly or required here if we want to
          # use the same schema for PATCH otherwise it will require you
          # always send the required fields and remove the readOnly fields
          # on the client side.
          #
          # readOnly: true
        revision:
          type: integer
          # TODO(sambetts) Decide if we want the validation here by having
          # separate schemas for GET, POST and PATCH.
          #
          # We can't make anything readOnly or required here if we want to
          # use the same schema for PATCH otherwise it will require you
          # always send the required fields and remove the readOnly fields
          # on the client side.
          #
          # readOnly: true
        assetInfo:
          $ref: '#/components/schemas/AssetType'
        scansCount:
          description: Total number of scans that have ever run for this asset
          type: integer
        summary:
          $ref: '#/components/schemas/ScanFindingsSummary'

    AssetRelationship:
      type: object
      description: Describes a relationship to an asset which can be expanded.
      properties:
        id:
          type: string
        revision:
          type: integer
          readOnly: true
        assetInfo:
          $ref: '#/components/schemas/AssetType'
          readOnly: true
        scansCount:
          description: Total number of scans that have ever run for this asset
          type: integer
          readOnly: true
        summary:
          $ref: '#/components/schemas/ScanFindingsSummary'
          readOnly: true
      required: ['id']

    AssetExists:
      type: object
      properties:
        message:
          description: Describes which unique constraint combination causes the conflict.
          type: string
          readOnly: true
        asset:
          $ref: '#/components/schemas/Asset'

    AssetType:
      type: object
      anyOf:
        - $ref: '#/components/schemas/VMInfo'
        - $ref: '#/components/schemas/PodInfo'
        - $ref: '#/components/schemas/DirInfo'
      discriminator:
        propertyName: objectType
        mapping:
          VMInfo: '#/components/schemas/VMInfo'
          PodInfo: '#/components/schemas/PodInfo'
          DirInfo: '#/components/schemas/DirInfo'

    VMInfo:
      type: object
      properties:
        objectType:
          type: string
        instanceID:
          type: string
        instanceProvider:
          $ref: '#/components/schemas/CloudProvider'
        location:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          nullable: true
        securityGroups:
          type: array
          items:
            $ref: '#/components/schemas/SecurityGroup'
          nullable: true
        image:
          type: string
        instanceType:
          type: string
        platform:
          type: string
        launchTime:
          type: string
          format: date-time
      required:
        - objectType
        - instanceID
        - location
        - instanceType
        - image
        - platform
        - launchTime

    PodInfo:
      type: object
      properties:
        objectType:
          type: string
        podName:
          type: string
        location:
          type: string
      required:
        - objectType

    DirInfo:
      type: object
      properties:
        objectType:
          type: string
        dirName:
          type: string
        location:
          type: string
      required:
        - objectType

    AssetScans:
      type: object
      properties:
        count:
          type: integer
          description: Total asset scans count according to the given filters
          readOnly: true
        items:
          type: array
          description: List of asset scans according to the given filters and page.
            List length must be lower or equal to pageSize.
          items:
            $ref: '#/components/schemas/AssetScan'
          readOnly: true

    ResourceCleanupState:
      type: string
      enum:
        - Pending
        - Skipped
        - Failed
        - Done

    AssetScan:
      type: object
      properties:
        id:
          type: string
          # TODO(sambetts) Decide if we want the validation here by having
          # separate schemas for GET, POST and PATCH.
          #
          # We can't make anything readOnly or required here if we want to
          # use the same schema for PATCH otherwise it will require you
          # always send the required fields and remove the readOnly fields
          # on the client side.
          #
          # readOnly: true
        revision:
          type: integer
        asset:
          $ref: '#/components/schemas/AssetRelationship'
        scan:
          $ref: '#/components/schemas/ScanRelationship'
        status:
          $ref: '#/components/schemas/AssetScanStatus'
        sboms:
          $ref: '#/components/schemas/SbomScan'
        vulnerabilities:
          $ref: '#/components/schemas/VulnerabilityScan'
        malware:
          $ref: '#/components/schemas/MalwareScan'
        rootkits:
          $ref: '#/components/schemas/RootkitScan'
        secrets:
          $ref: '#/components/schemas/SecretScan'
        misconfigurations:
          $ref: '#/components/schemas/MisconfigurationScan'
        exploits:
          $ref: '#/components/schemas/ExploitScan'
        findingsProcessed:
          type: boolean
        resourceCleanup:
          $ref: '#/components/schemas/ResourceCleanupState'
        summary:
          $ref: '#/components/schemas/ScanFindingsSummary'
      # TODO(sambetts) Decide if we want the validation here by having
      # separate schemas for GET, POST and PATCH.
      #
      # We can't make anything readOnly or required here if we want to
      # use the same schema for PATCH otherwise it will require you
      # always send the required fields and remove the readOnly fields
      # on the client side.
      #
      # required:
      #  - asset
      #  - scan

    AssetScanExists:
      type: object
      properties:
        message:
          description: Describes which unique constraint combination causes the conflict.
          readOnly: true
          type: string
        assetScan:
          $ref: '#/components/schemas/AssetScan'

    AssetScanStatus:
      type: object
      properties:
        general:
          $ref: '#/components/schemas/AssetScanState'
        sbom:
          $ref: '#/components/schemas/AssetScanState'
        vulnerabilities:
          $ref: '#/components/schemas/AssetScanState'
        malware:
          $ref: '#/components/schemas/AssetScanState'
        rootkits:
          $ref: '#/components/schemas/AssetScanState'
        secrets:
          $ref: '#/components/schemas/AssetScanState'
        misconfigurations:
          $ref: '#/components/schemas/AssetScanState'
        exploits:
          $ref: '#/components/schemas/AssetScanState'

    AssetScanState:
      type: object
      properties:
        state:
          type: string
          enum:
            - NotScanned
            - Pending
            - Scheduled
            - ReadyToScan
            - InProgress
            - Aborted
            - Done
        lastTransitionTime:
          type: string
          format: date-time
        errors:
          type: array
          items:
            type: string
          nullable: true

    Package:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        type:
          type: string
        language:
          type: string
        licenses:
          type: array
          items:
            type: string
          nullable: true
        cpes:
          type: array
          items:
            type: string
          nullable: true
        purl:
          type: string

    Vulnerability:
      type: object
      properties:
        vulnerabilityName:
          type: string
        description:
          type: string
        severity:
          $ref: '#/components/schemas/VulnerabilitySeverity'
        links:
          type: array
          items:
            type: string
          nullable: true
        distro:
          $ref: '#/components/schemas/VulnerabilityDistro'
        cvss:
          type: array
          items:
            $ref: '#/components/schemas/VulnerabilityCvss'
          nullable: true
        package:
          $ref: '#/components/schemas/Package'
        fix:
          $ref: '#/components/schemas/VulnerabilityFix'
        layerId:
          type: string
        path:
          type: string

    VulnerabilityFix:
      type: object
      properties:
        versions:
          type: array
          items:
            type: string
          nullable: true
        state:
          type: string

    VulnerabilityCvss:
      type: object
      properties:
        version:
          type: string
        vector:
          type: string
        metrics:
          $ref: '#/components/schemas/VulnerabilityCvssMetrics'

    VulnerabilityCvssMetrics:
      type: object
      properties:
        baseScore:
          type: number
        exploitabilityScore:
          type: number
        impactScore:
          type: number

    VulnerabilityDistro:
      type: object
      description: Distro provides information about a detected Linux distribution.
      properties:
        name:
          description: Name of the Linux distribution
          type: string
        version:
          description: Version of the Linux distribution (major or major.minor version)
          type: string
        IDLike:
          description: the ID_LIKE field found within the /etc/os-release file
          type: array
          items:
            type: string
          nullable: true

    VulnerabilitySeverity:
      type: string
      enum:
        - CRITICAL
        - HIGH
        - MEDIUM
        - LOW
        - NEGLIGIBLE

    ScannerSummary:
      type: object
      properties:
        KnownViruses:
          type: integer
        EngineVersion:
          type: string
        ScannedDirectories:
          type: integer
        ScannedFiles:
          type: integer
        InfectedFiles:
          type: integer
        SuspectedFiles:
          type: integer
        DataScanned:
          type: string
        DataRead:
          type: string
        TimeTaken:
          type: string

    ScannerMetadata:
      type: object
      properties:
        scannerName:
          type: string
        scannerSummary:
          $ref: '#/components/schemas/ScannerSummary'

    Malware:
      type: object
      properties:
        malwareName:
          type: string
        malwareType:
          $ref: '#/components/schemas/MalwareType'
        path:
          type: string
          description: Path of the file that contains malware

    Rootkit:
      type: object
      properties:
        rootkitName:
          type: string
        rootkitType:
          $ref: '#/components/schemas/RootkitType'
        message:
          type: string

    MisconfigurationSeverity:
      type: string
      enum:
        - MisconfigurationHighSeverity
        - MisconfigurationMediumSeverity
        - MisconfigurationLowSeverity

    Misconfiguration:
      type: object
      properties:
        scannerName:
          type: string
        scannedPath:
          type: string
        testCategory:
          type: string
        testID:
          type: string
        testDescription:
          type: string
        severity:
          $ref: '#/components/schemas/MisconfigurationSeverity'
        message:
          type: string
        remediation:
          type: string

    Secret:
      type: object
      properties:
        description:
          type: string
        filePath:
          description: "Name of the file containing the secret"
          type: string
        startLine:
          type: integer
        endLine:
          type: integer
        startColumn:
          type: integer
        endColumn:
          type: integer
        fingerprint:
          description: "Note: this is not unique"
          type: string

    Exploit:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
        cveID:
          type: string
        sourceDB:
          type: string
        urls:
          type: array
          items:
            type: string
          nullable: true

    SbomScan:
      type: object
      properties:
        packages:
          type: array
          items:
            $ref: '#/components/schemas/Package'
          nullable: true

    VulnerabilityScan:
      type: object
      properties:
        vulnerabilities:
          type: array
          items:
            $ref: '#/components/schemas/Vulnerability'
          nullable: true

    MalwareScan:
      type: object
      properties:
        malware:
          type: array
          items:
            $ref: '#/components/schemas/Malware'
          nullable: true
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/ScannerMetadata'
          nullable: true

    RootkitScan:
      type: object
      properties:
        rootkits:
          type: array
          items:
            $ref: '#/components/schemas/Rootkit'
          nullable: true

    SecretScan:
      type: object
      properties:
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/Secret'
          nullable: true

    MisconfigurationScan:
      type: object
      properties:
        scanners:
          type: array
          items:
            type: string
          nullable: true
        misconfigurations:
          type: array
          items:
            $ref: '#/components/schemas/Misconfiguration'
          nullable: true

    ExploitScan:
      type: object
      properties:
        exploits:
          type: array
          items:
            $ref: '#/components/schemas/Exploit'
          nullable: true

    MalwareType:
      type: string

    RootkitType:
      type: string
      enum:
        - MEMORY
        - KERNEL
        - APPLICATION
        - FIRMWARE
        - UNKNOWN

    ScanType:
      type: string
      enum:
        - SBOM
        - VULNERABILITY
        - MALWARE
        - SECRET
        - MISCONFIGURATION
        - ROOTKIT
        - EXPLOIT

    FindingExists:
      type: object
      properties:
        message:
          description: Describes which unique constraint combination causes the conflict.
          type: string
          readOnly: true
        finding:
          $ref: '#/components/schemas/Finding'

    Findings:
      type: object
      properties:
        count:
          description: Total findings count according to the given filters
          type: integer
        items:
          description: List of findings according to the given filters
          type: array
          items:
            $ref: '#/components/schemas/Finding'

    PackageFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/Package'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    VulnerabilityFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/Vulnerability'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    MalwareFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/Malware'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    SecretFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/Secret'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    MisconfigurationFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/Misconfiguration'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    RootkitFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/Rootkit'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    ExploitFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/Exploit'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    Finding:
      type: object
      properties:
        id:
          type: string
          # TODO(sambetts) Decide if we want the validation here by having
          # separate schemas for GET, POST and PATCH
          #
          # We can't make anything readOnly or required here if we want to
          # use the same schema for PATCH otherwise it will require you
          # always send the required fields and remove the readOnly fields
          # on the client side.
          #
          # readOnly: true
        scan:
          $ref: '#/components/schemas/ScanRelationship'
        asset:
          $ref: '#/components/schemas/AssetRelationship'
        foundOn:
          description: When this finding was discovered by a scan
          type: string
          format: date-time
        invalidatedOn:
          description: When this finding was invalidated by a newer scan
          type: string
          format: date-time
        findingInfo:
          anyOf:
            - $ref: '#/components/schemas/PackageFindingInfo'
            - $ref: '#/components/schemas/VulnerabilityFindingInfo'
            - $ref: '#/components/schemas/MalwareFindingInfo'
            - $ref: '#/components/schemas/SecretFindingInfo'
            - $ref: '#/components/schemas/MisconfigurationFindingInfo'
            - $ref: '#/components/schemas/RootkitFindingInfo'
            - $ref: '#/components/schemas/ExploitFindingInfo'
          discriminator:
            propertyName: objectType
            mapping:
              Package: '#/components/schemas/PackageFindingInfo'
              Vulnerability: '#/components/schemas/VulnerabilityFindingInfo'
              Malware: '#/components/schemas/MalwareFindingInfo'
              Secret: '#/components/schemas/SecretFindingInfo'
              Misconfiguration: '#/components/schemas/MisconfigurationFindingInfo'
              Rootkit: '#/components/schemas/RootkitFindingInfo'
              Exploit: '#/components/schemas/ExploitFindingInfo'

  responses:
    Success:
      description: Success message
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'

    UnknownError:
      description: Unknown error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'

  parameters:
    assetID:
      name: assetID
      in: path
      required: true
      schema:
        type: string

    odataFilter:
      name: "$filter"
      in: query
      schema:
        type: string

    odataSelect:
      name: "$select"
      in: query
      schema:
        type: string

    odataCount:
      name: "$count"
      in: query
      schema:
        type: boolean

    odataTop:
      name: "$top"
      in: query
      schema:
        type: integer

    odataSkip:
      name: "$skip"
      in: query
      schema:
        type: integer

    odataExpand:
      name: "$expand"
      in: query
      schema:
        type: string

    odataOrderBy:
      name: "$orderby"
      in: query
      schema:
        type: string
      x-go-name: "OrderBy"

    scanID:
      name: scanID
      in: path
      required: true
      schema:
        type: string

    assetScanID:
      name: assetScanID
      in: path
      required: true
      schema:
        type: string

    scanConfigID:
      name: scanConfigID
      in: path
      required: true
      schema:
        type: string

    findingID:
      name: findingID
      in: path
      required: true
      schema:
        type: string
        
    ifmatch:
      name: If-Match
      in: header
      schema:
        type: integer
