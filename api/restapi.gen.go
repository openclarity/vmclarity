// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for AttackComplexity.
const (
	AttackComplexityHIGH AttackComplexity = "HIGH"
	AttackComplexityLOW  AttackComplexity = "LOW"
)

// Defines values for AttackVector.
const (
	ADJACENT AttackVector = "ADJACENT"
	LOCAL    AttackVector = "LOCAL"
	NETWORK  AttackVector = "NETWORK"
	PHYSICAL AttackVector = "PHYSICAL"
)

// Defines values for Availability.
const (
	AvailabilityHIGH Availability = "HIGH"
	AvailabilityLOW  Availability = "LOW"
	AvailabilityNONE Availability = "NONE"
)

// Defines values for CloudProvider.
const (
	AWS CloudProvider = "AWS"
)

// Defines values for Confidentiality.
const (
	ConfidentialityHIGH Confidentiality = "HIGH"
	ConfidentialityLOW  Confidentiality = "LOW"
	ConfidentialityNONE Confidentiality = "NONE"
)

// Defines values for Integrity.
const (
	IntegrityHIGH Integrity = "HIGH"
	IntegrityLOW  Integrity = "LOW"
	IntegrityNONE Integrity = "NONE"
)

// Defines values for MalwareType.
const (
	ADWARE     MalwareType = "ADWARE"
	RANSOMWARE MalwareType = "RANSOMWARE"
	SPYWARE    MalwareType = "SPYWARE"
	TROJAN     MalwareType = "TROJAN"
	VIRUS      MalwareType = "VIRUS"
	WORM       MalwareType = "WORM"
)

// Defines values for MisconfigurationType.
const (
	DEFAULTPASSWORD MisconfigurationType = "DEFAULT_PASSWORD"
)

// Defines values for PrivilegesRequired.
const (
	PrivilegesRequiredHIGH PrivilegesRequired = "HIGH"
	PrivilegesRequiredLOW  PrivilegesRequired = "LOW"
	PrivilegesRequiredNONE PrivilegesRequired = "NONE"
)

// Defines values for RootkitType.
const (
	APPLICATION RootkitType = "APPLICATION"
	FIRMWARE    RootkitType = "FIRMWARE"
	KERNEL      RootkitType = "KERNEL"
	MEMORY      RootkitType = "MEMORY"
)

// Defines values for Scope.
const (
	CHANGED   Scope = "CHANGED"
	UNCHANGED Scope = "UNCHANGED"
)

// Defines values for UserInteraction.
const (
	UserInteractionNONE     UserInteraction = "NONE"
	UserInteractionREQUIRED UserInteraction = "REQUIRED"
)

// Defines values for VulnerabilitySeverity.
const (
	CRITICAL   VulnerabilitySeverity = "CRITICAL"
	HIGH       VulnerabilitySeverity = "HIGH"
	LOW        VulnerabilitySeverity = "LOW"
	MEDIUM     VulnerabilitySeverity = "MEDIUM"
	NEGLIGIBLE VulnerabilitySeverity = "NEGLIGIBLE"
)

// ApiResponse An object that is returned in all cases of failures.
type ApiResponse struct {
	Message *string `json:"message,omitempty"`
}

// AttackComplexity defines model for AttackComplexity.
type AttackComplexity string

// AttackVector defines model for AttackVector.
type AttackVector string

// Availability defines model for Availability.
type Availability string

// CVSS defines model for CVSS.
type CVSS struct {
	CvssV3Metrics *CVSSV3Metrics `json:"cvssV3Metrics,omitempty"`
	CvssV3Vector  *CVSSV3Vector  `json:"cvssV3Vector,omitempty"`
}

// CVSSV3Metrics defines model for CVSSV3Metrics.
type CVSSV3Metrics struct {
	BaseScore           *float32               `json:"baseScore,omitempty"`
	ExploitabilityScore *float32               `json:"exploitabilityScore,omitempty"`
	ImpactScore         *float32               `json:"impactScore,omitempty"`
	Severity            *VulnerabilitySeverity `json:"severity,omitempty"`
}

// CVSSV3Vector defines model for CVSSV3Vector.
type CVSSV3Vector struct {
	AttackComplexity   *AttackComplexity   `json:"attackComplexity,omitempty"`
	AttackVector       *AttackVector       `json:"attackVector,omitempty"`
	Availability       *Availability       `json:"availability,omitempty"`
	Confidentiality    *Confidentiality    `json:"confidentiality,omitempty"`
	Integrity          *Integrity          `json:"integrity,omitempty"`
	PrivilegesRequired *PrivilegesRequired `json:"privilegesRequired,omitempty"`
	Scope              *Scope              `json:"scope,omitempty"`
	UserInteraction    *UserInteraction    `json:"userInteraction,omitempty"`
	Vector             *string             `json:"vector,omitempty"`
}

// CloudProvider defines model for CloudProvider.
type CloudProvider string

// Confidentiality defines model for Confidentiality.
type Confidentiality string

// Instance defines model for Instance.
type Instance struct {
	Exploits          *uint32        `json:"exploits,omitempty"`
	Id                *string        `json:"id,omitempty"`
	InstanceID        *string        `json:"instanceID,omitempty"`
	InstanceName      *string        `json:"instanceName,omitempty"`
	InstanceProvider  *CloudProvider `json:"instanceProvider,omitempty"`
	InstanceRegion    *string        `json:"instanceRegion,omitempty"`
	Malwares          *uint32        `json:"malwares,omitempty"`
	Misconfigurations *uint32        `json:"misconfigurations,omitempty"`
	Packages          *uint32        `json:"packages,omitempty"`
	Rootkits          *uint32        `json:"rootkits,omitempty"`
	Secrets           *uint32        `json:"secrets,omitempty"`

	// Vulnerabilities vulnerability count per severity
	Vulnerabilities *[]VulnerabilityCount `json:"vulnerabilities,omitempty"`
}

// InstanceContentAnalysis defines model for InstanceContentAnalysis.
type InstanceContentAnalysis struct {
	Packages *[]PackageContentAnalysis `json:"packages,omitempty"`
	Resource *InstanceInfo             `json:"resource,omitempty"`
}

// InstanceInfo defines model for InstanceInfo.
type InstanceInfo struct {
	Id               *string        `json:"id,omitempty"`
	InstanceID       *string        `json:"instanceID,omitempty"`
	InstanceName     *string        `json:"instanceName,omitempty"`
	InstanceProvider *CloudProvider `json:"instanceProvider,omitempty"`
	InstanceRegion   *string        `json:"instanceRegion,omitempty"`
}

// InstanceMalwareScan defines model for InstanceMalwareScan.
type InstanceMalwareScan struct {
	Packages *[]MalwareInfo `json:"packages,omitempty"`
	Resource *InstanceInfo  `json:"resource,omitempty"`
}

// InstanceMisconfigurationScan defines model for InstanceMisconfigurationScan.
type InstanceMisconfigurationScan struct {
	Packages *[]MisconfigurationInfo `json:"packages,omitempty"`
	Resource *InstanceInfo           `json:"resource,omitempty"`
}

// InstanceRootkitScan defines model for InstanceRootkitScan.
type InstanceRootkitScan struct {
	Packages *[]RootkitInfo `json:"packages,omitempty"`
	Resource *InstanceInfo  `json:"resource,omitempty"`
}

// InstanceSecretScan defines model for InstanceSecretScan.
type InstanceSecretScan struct {
	Packages *[]SecretInfo `json:"packages,omitempty"`
	Resource *InstanceInfo `json:"resource,omitempty"`
}

// InstanceVulnerabilityScan defines model for InstanceVulnerabilityScan.
type InstanceVulnerabilityScan struct {
	PackageVulnerabilities *[]PackageVulnerabilityScan `json:"packageVulnerabilities,omitempty"`
	Resource               *InstanceInfo               `json:"resource,omitempty"`
}

// Integrity defines model for Integrity.
type Integrity string

// MalwareInfo defines model for MalwareInfo.
type MalwareInfo struct {
	Id          *string      `json:"id,omitempty"`
	MalwareName *string      `json:"malwareName,omitempty"`
	MalwareType *MalwareType `json:"malwareType,omitempty"`

	// Path Path of the file that contains malware
	Path *string `json:"path,omitempty"`
}

// MalwareType defines model for MalwareType.
type MalwareType string

// MisconfigurationInfo defines model for MisconfigurationInfo.
type MisconfigurationInfo struct {
	Id                   *string               `json:"id,omitempty"`
	MisconfigurationType *MisconfigurationType `json:"misconfigurationType,omitempty"`

	// Path Path of the file that contains misconfigurations
	Path *string `json:"path,omitempty"`
}

// MisconfigurationType defines model for MisconfigurationType.
type MisconfigurationType string

// Package defines model for Package.
type Package struct {
	Id              *string               `json:"id,omitempty"`
	Instances       *uint32               `json:"instances,omitempty"`
	Language        *string               `json:"language,omitempty"`
	License         *string               `json:"license,omitempty"`
	Name            *string               `json:"name,omitempty"`
	Version         *string               `json:"version,omitempty"`
	Vulnerabilities *[]VulnerabilityCount `json:"vulnerabilities,omitempty"`
}

// PackageContentAnalysis defines model for PackageContentAnalysis.
type PackageContentAnalysis struct {
	Package *PackageInfo `json:"package,omitempty"`
}

// PackageInfo defines model for PackageInfo.
type PackageInfo struct {
	Language *string `json:"language,omitempty"`
	License  *string `json:"license,omitempty"`
	Name     *string `json:"name,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// PackageVulnerabilityScan defines model for PackageVulnerabilityScan.
type PackageVulnerabilityScan struct {
	Cvss              *CVSS                  `json:"cvss,omitempty"`
	Description       *string                `json:"description,omitempty"`
	FixVersion        *string                `json:"fixVersion,omitempty"`
	Links             *[]string              `json:"links,omitempty"`
	Package           *PackageInfo           `json:"package,omitempty"`
	Severity          *VulnerabilitySeverity `json:"severity,omitempty"`
	VulnerabilityName *string                `json:"vulnerabilityName,omitempty"`
}

// PrivilegesRequired defines model for PrivilegesRequired.
type PrivilegesRequired string

// RootkitInfo defines model for RootkitInfo.
type RootkitInfo struct {
	Id *string `json:"id,omitempty"`

	// Path Path of the file that contains rootkit
	Path        *string      `json:"path,omitempty"`
	RootkitName *string      `json:"rootkitName,omitempty"`
	RootkitType *RootkitType `json:"rootkitType,omitempty"`
}

// RootkitType defines model for RootkitType.
type RootkitType string

// Scope defines model for Scope.
type Scope string

// SecretInfo defines model for SecretInfo.
type SecretInfo struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`

	// Path Path of the file that contains secrets
	Path *string `json:"path,omitempty"`
}

// UserInteraction defines model for UserInteraction.
type UserInteraction string

// Vulnerability defines model for Vulnerability.
type Vulnerability struct {
	CvssBaseScore *float32               `json:"cvssBaseScore,omitempty"`
	CvssSeverity  *VulnerabilitySeverity `json:"cvssSeverity,omitempty"`
	FixVersion    *string                `json:"fixVersion,omitempty"`

	// Id Unique ID for the vulnerabilityID and packageID combination.
	Id                *string                `json:"id,omitempty"`
	Instances         *uint32                `json:"instances,omitempty"`
	PackageID         *string                `json:"packageID,omitempty"`
	PackageName       *string                `json:"packageName,omitempty"`
	PackageVersion    *string                `json:"packageVersion,omitempty"`
	Severity          *VulnerabilitySeverity `json:"severity,omitempty"`
	VulnerabilityID   *string                `json:"vulnerabilityID,omitempty"`
	VulnerabilityName *string                `json:"vulnerabilityName,omitempty"`
}

// VulnerabilityCount defines model for VulnerabilityCount.
type VulnerabilityCount struct {
	Count    *uint32                `json:"count,omitempty"`
	Severity *VulnerabilitySeverity `json:"severity,omitempty"`
}

// VulnerabilityEx defines model for VulnerabilityEx.
type VulnerabilityEx struct {
	Cvss          *CVSS          `json:"cvss,omitempty"`
	Description   *string        `json:"description,omitempty"`
	Links         *[]string      `json:"links,omitempty"`
	ScanDate      *time.Time     `json:"scanDate,omitempty"`
	Vulnerability *Vulnerability `json:"vulnerability,omitempty"`
}

// VulnerabilitySeverity defines model for VulnerabilitySeverity.
type VulnerabilitySeverity string

// GetInstancesParams defines parameters for GetInstances.
type GetInstancesParams struct {
	// Page Page number of the query
	Page int `form:"page" json:"page"`

	// PageSize Maximum items to return
	PageSize int `form:"pageSize" json:"pageSize"`

	// SortKey Sort key
	SortKey string `form:"sortKey" json:"sortKey"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// Page Page number of the query
	Page int `form:"page" json:"page"`

	// PageSize Maximum items to return
	PageSize int `form:"pageSize" json:"pageSize"`

	// SortKey Sort key
	SortKey string `form:"sortKey" json:"sortKey"`
}

// GetVulnerabilitiesParams defines parameters for GetVulnerabilities.
type GetVulnerabilitiesParams struct {
	// Page Page number of the query
	Page int `form:"page" json:"page"`

	// PageSize Maximum items to return
	PageSize int `form:"pageSize" json:"pageSize"`

	// SortKey Sort key
	SortKey string `form:"sortKey" json:"sortKey"`
}

// PostInstancesJSONRequestBody defines body for PostInstances for application/json ContentType.
type PostInstancesJSONRequestBody = InstanceInfo

// PostInstancesContentAnalysisIdJSONRequestBody defines body for PostInstancesContentAnalysisId for application/json ContentType.
type PostInstancesContentAnalysisIdJSONRequestBody = InstanceContentAnalysis

// PostInstancesExploitScanIdJSONRequestBody defines body for PostInstancesExploitScanId for application/json ContentType.
type PostInstancesExploitScanIdJSONRequestBody = InstanceRootkitScan

// PostInstancesMalewareScanIdJSONRequestBody defines body for PostInstancesMalewareScanId for application/json ContentType.
type PostInstancesMalewareScanIdJSONRequestBody = InstanceMalwareScan

// PostInstancesMisconfigurationScanIdJSONRequestBody defines body for PostInstancesMisconfigurationScanId for application/json ContentType.
type PostInstancesMisconfigurationScanIdJSONRequestBody = InstanceMisconfigurationScan

// PostInstancesRootkitScanIdJSONRequestBody defines body for PostInstancesRootkitScanId for application/json ContentType.
type PostInstancesRootkitScanIdJSONRequestBody = InstanceRootkitScan

// PostInstancesSecretScanIdJSONRequestBody defines body for PostInstancesSecretScanId for application/json ContentType.
type PostInstancesSecretScanIdJSONRequestBody = InstanceSecretScan

// PostInstancesVulnerabilityScanIdJSONRequestBody defines body for PostInstancesVulnerabilityScanId for application/json ContentType.
type PostInstancesVulnerabilityScanIdJSONRequestBody = InstanceVulnerabilityScan

// PutInstancesIdJSONRequestBody defines body for PutInstancesId for application/json ContentType.
type PutInstancesIdJSONRequestBody = InstanceInfo

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetInstances request
	GetInstances(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstances request with any body
	PostInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstances(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesContentAnalysisId request with any body
	PostInstancesContentAnalysisIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstancesContentAnalysisId(ctx context.Context, id string, body PostInstancesContentAnalysisIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesExploitScanId request with any body
	PostInstancesExploitScanIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstancesExploitScanId(ctx context.Context, id string, body PostInstancesExploitScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesMalewareScanId request with any body
	PostInstancesMalewareScanIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstancesMalewareScanId(ctx context.Context, id string, body PostInstancesMalewareScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesMisconfigurationScanId request with any body
	PostInstancesMisconfigurationScanIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstancesMisconfigurationScanId(ctx context.Context, id string, body PostInstancesMisconfigurationScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesRootkitScanId request with any body
	PostInstancesRootkitScanIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstancesRootkitScanId(ctx context.Context, id string, body PostInstancesRootkitScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesSecretScanId request with any body
	PostInstancesSecretScanIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstancesSecretScanId(ctx context.Context, id string, body PostInstancesSecretScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesVulnerabilityScanId request with any body
	PostInstancesVulnerabilityScanIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstancesVulnerabilityScanId(ctx context.Context, id string, body PostInstancesVulnerabilityScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInstancesId request
	DeleteInstancesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstancesId request
	GetInstancesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInstancesId request with any body
	PutInstancesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInstancesId(ctx context.Context, id string, body PutInstancesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackages request
	GetPackages(ctx context.Context, params *GetPackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackagesId request
	GetPackagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVulnerabilities request
	GetVulnerabilities(ctx context.Context, params *GetVulnerabilitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVulnerabilitiesVulIdPkgId request
	GetVulnerabilitiesVulIdPkgId(ctx context.Context, vulId string, pkgId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetInstances(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstances(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesContentAnalysisIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesContentAnalysisIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesContentAnalysisId(ctx context.Context, id string, body PostInstancesContentAnalysisIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesContentAnalysisIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesExploitScanIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesExploitScanIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesExploitScanId(ctx context.Context, id string, body PostInstancesExploitScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesExploitScanIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesMalewareScanIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesMalewareScanIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesMalewareScanId(ctx context.Context, id string, body PostInstancesMalewareScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesMalewareScanIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesMisconfigurationScanIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesMisconfigurationScanIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesMisconfigurationScanId(ctx context.Context, id string, body PostInstancesMisconfigurationScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesMisconfigurationScanIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesRootkitScanIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesRootkitScanIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesRootkitScanId(ctx context.Context, id string, body PostInstancesRootkitScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesRootkitScanIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesSecretScanIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesSecretScanIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesSecretScanId(ctx context.Context, id string, body PostInstancesSecretScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesSecretScanIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesVulnerabilityScanIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesVulnerabilityScanIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesVulnerabilityScanId(ctx context.Context, id string, body PostInstancesVulnerabilityScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesVulnerabilityScanIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInstancesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInstancesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstancesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInstancesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInstancesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInstancesId(ctx context.Context, id string, body PutInstancesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInstancesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackages(ctx context.Context, params *GetPackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVulnerabilities(ctx context.Context, params *GetVulnerabilitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVulnerabilitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVulnerabilitiesVulIdPkgId(ctx context.Context, vulId string, pkgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVulnerabilitiesVulIdPkgIdRequest(c.Server, vulId, pkgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetInstancesRequest generates requests for GetInstances
func NewGetInstancesRequest(server string, params *GetInstancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, params.SortKey); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInstancesRequest calls the generic PostInstances builder with application/json body
func NewPostInstancesRequest(server string, body PostInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInstancesRequestWithBody generates requests for PostInstances with any type of body
func NewPostInstancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInstancesContentAnalysisIdRequest calls the generic PostInstancesContentAnalysisId builder with application/json body
func NewPostInstancesContentAnalysisIdRequest(server string, id string, body PostInstancesContentAnalysisIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesContentAnalysisIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostInstancesContentAnalysisIdRequestWithBody generates requests for PostInstancesContentAnalysisId with any type of body
func NewPostInstancesContentAnalysisIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/contentAnalysis/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInstancesExploitScanIdRequest calls the generic PostInstancesExploitScanId builder with application/json body
func NewPostInstancesExploitScanIdRequest(server string, id string, body PostInstancesExploitScanIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesExploitScanIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostInstancesExploitScanIdRequestWithBody generates requests for PostInstancesExploitScanId with any type of body
func NewPostInstancesExploitScanIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/exploitScan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInstancesMalewareScanIdRequest calls the generic PostInstancesMalewareScanId builder with application/json body
func NewPostInstancesMalewareScanIdRequest(server string, id string, body PostInstancesMalewareScanIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesMalewareScanIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostInstancesMalewareScanIdRequestWithBody generates requests for PostInstancesMalewareScanId with any type of body
func NewPostInstancesMalewareScanIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/malewareScan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInstancesMisconfigurationScanIdRequest calls the generic PostInstancesMisconfigurationScanId builder with application/json body
func NewPostInstancesMisconfigurationScanIdRequest(server string, id string, body PostInstancesMisconfigurationScanIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesMisconfigurationScanIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostInstancesMisconfigurationScanIdRequestWithBody generates requests for PostInstancesMisconfigurationScanId with any type of body
func NewPostInstancesMisconfigurationScanIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/misconfigurationScan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInstancesRootkitScanIdRequest calls the generic PostInstancesRootkitScanId builder with application/json body
func NewPostInstancesRootkitScanIdRequest(server string, id string, body PostInstancesRootkitScanIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesRootkitScanIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostInstancesRootkitScanIdRequestWithBody generates requests for PostInstancesRootkitScanId with any type of body
func NewPostInstancesRootkitScanIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/rootkitScan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInstancesSecretScanIdRequest calls the generic PostInstancesSecretScanId builder with application/json body
func NewPostInstancesSecretScanIdRequest(server string, id string, body PostInstancesSecretScanIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesSecretScanIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostInstancesSecretScanIdRequestWithBody generates requests for PostInstancesSecretScanId with any type of body
func NewPostInstancesSecretScanIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/secretScan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInstancesVulnerabilityScanIdRequest calls the generic PostInstancesVulnerabilityScanId builder with application/json body
func NewPostInstancesVulnerabilityScanIdRequest(server string, id string, body PostInstancesVulnerabilityScanIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesVulnerabilityScanIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostInstancesVulnerabilityScanIdRequestWithBody generates requests for PostInstancesVulnerabilityScanId with any type of body
func NewPostInstancesVulnerabilityScanIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/vulnerabilityScan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInstancesIdRequest generates requests for DeleteInstancesId
func NewDeleteInstancesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstancesIdRequest generates requests for GetInstancesId
func NewGetInstancesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutInstancesIdRequest calls the generic PutInstancesId builder with application/json body
func NewPutInstancesIdRequest(server string, id string, body PutInstancesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInstancesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutInstancesIdRequestWithBody generates requests for PutInstancesId with any type of body
func NewPutInstancesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPackagesRequest generates requests for GetPackages
func NewGetPackagesRequest(server string, params *GetPackagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/packages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, params.SortKey); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPackagesIdRequest generates requests for GetPackagesId
func NewGetPackagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/packages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVulnerabilitiesRequest generates requests for GetVulnerabilities
func NewGetVulnerabilitiesRequest(server string, params *GetVulnerabilitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vulnerabilities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, params.SortKey); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVulnerabilitiesVulIdPkgIdRequest generates requests for GetVulnerabilitiesVulIdPkgId
func NewGetVulnerabilitiesVulIdPkgIdRequest(server string, vulId string, pkgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vul_id", runtime.ParamLocationPath, vulId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pkg_id", runtime.ParamLocationPath, pkgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vulnerabilities/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetInstances request
	GetInstancesWithResponse(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*GetInstancesResponse, error)

	// PostInstances request with any body
	PostInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error)

	PostInstancesWithResponse(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error)

	// PostInstancesContentAnalysisId request with any body
	PostInstancesContentAnalysisIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesContentAnalysisIdResponse, error)

	PostInstancesContentAnalysisIdWithResponse(ctx context.Context, id string, body PostInstancesContentAnalysisIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesContentAnalysisIdResponse, error)

	// PostInstancesExploitScanId request with any body
	PostInstancesExploitScanIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesExploitScanIdResponse, error)

	PostInstancesExploitScanIdWithResponse(ctx context.Context, id string, body PostInstancesExploitScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesExploitScanIdResponse, error)

	// PostInstancesMalewareScanId request with any body
	PostInstancesMalewareScanIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesMalewareScanIdResponse, error)

	PostInstancesMalewareScanIdWithResponse(ctx context.Context, id string, body PostInstancesMalewareScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesMalewareScanIdResponse, error)

	// PostInstancesMisconfigurationScanId request with any body
	PostInstancesMisconfigurationScanIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesMisconfigurationScanIdResponse, error)

	PostInstancesMisconfigurationScanIdWithResponse(ctx context.Context, id string, body PostInstancesMisconfigurationScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesMisconfigurationScanIdResponse, error)

	// PostInstancesRootkitScanId request with any body
	PostInstancesRootkitScanIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesRootkitScanIdResponse, error)

	PostInstancesRootkitScanIdWithResponse(ctx context.Context, id string, body PostInstancesRootkitScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesRootkitScanIdResponse, error)

	// PostInstancesSecretScanId request with any body
	PostInstancesSecretScanIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesSecretScanIdResponse, error)

	PostInstancesSecretScanIdWithResponse(ctx context.Context, id string, body PostInstancesSecretScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesSecretScanIdResponse, error)

	// PostInstancesVulnerabilityScanId request with any body
	PostInstancesVulnerabilityScanIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesVulnerabilityScanIdResponse, error)

	PostInstancesVulnerabilityScanIdWithResponse(ctx context.Context, id string, body PostInstancesVulnerabilityScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesVulnerabilityScanIdResponse, error)

	// DeleteInstancesId request
	DeleteInstancesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteInstancesIdResponse, error)

	// GetInstancesId request
	GetInstancesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetInstancesIdResponse, error)

	// PutInstancesId request with any body
	PutInstancesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInstancesIdResponse, error)

	PutInstancesIdWithResponse(ctx context.Context, id string, body PutInstancesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInstancesIdResponse, error)

	// GetPackages request
	GetPackagesWithResponse(ctx context.Context, params *GetPackagesParams, reqEditors ...RequestEditorFn) (*GetPackagesResponse, error)

	// GetPackagesId request
	GetPackagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPackagesIdResponse, error)

	// GetVulnerabilities request
	GetVulnerabilitiesWithResponse(ctx context.Context, params *GetVulnerabilitiesParams, reqEditors ...RequestEditorFn) (*GetVulnerabilitiesResponse, error)

	// GetVulnerabilitiesVulIdPkgId request
	GetVulnerabilitiesVulIdPkgIdWithResponse(ctx context.Context, vulId string, pkgId string, reqEditors ...RequestEditorFn) (*GetVulnerabilitiesVulIdPkgIdResponse, error)
}

type GetInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Items List of instances in the given filters and page. List length must be lower or equal to pageSize.
		Items *[]Instance `json:"items,omitempty"`

		// Total Total instances count under the given filters
		Total int `json:"total"`
	}
	JSONDefault *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InstanceInfo
	JSON409      *InstanceInfo
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesContentAnalysisIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostInstancesContentAnalysisIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesContentAnalysisIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesExploitScanIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostInstancesExploitScanIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesExploitScanIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesMalewareScanIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostInstancesMalewareScanIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesMalewareScanIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesMisconfigurationScanIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostInstancesMisconfigurationScanIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesMisconfigurationScanIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesRootkitScanIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostInstancesRootkitScanIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesRootkitScanIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesSecretScanIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostInstancesSecretScanIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesSecretScanIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesVulnerabilityScanIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostInstancesVulnerabilityScanIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesVulnerabilityScanIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInstancesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r DeleteInstancesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInstancesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceInfo
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetInstancesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInstancesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceInfo
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutInstancesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInstancesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Items List of packages in the given filters and page. List length must be lower or equal to pageSize
		Items *[]Package `json:"items,omitempty"`

		// Total Total packages count under the given filters
		Total int `json:"total"`
	}
	JSONDefault *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetPackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Package
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetPackagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVulnerabilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Items List of vulnerabilities in the given filters and page. List length must be lower or equal to pageSize
		Items *[]Vulnerability `json:"items,omitempty"`

		// Total Total vulnerabilities count under the given filters
		Total int `json:"total"`
	}
	JSONDefault *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetVulnerabilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVulnerabilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVulnerabilitiesVulIdPkgIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VulnerabilityEx
	JSONDefault  *ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetVulnerabilitiesVulIdPkgIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVulnerabilitiesVulIdPkgIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetInstancesWithResponse request returning *GetInstancesResponse
func (c *ClientWithResponses) GetInstancesWithResponse(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*GetInstancesResponse, error) {
	rsp, err := c.GetInstances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesResponse(rsp)
}

// PostInstancesWithBodyWithResponse request with arbitrary body returning *PostInstancesResponse
func (c *ClientWithResponses) PostInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error) {
	rsp, err := c.PostInstancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesWithResponse(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error) {
	rsp, err := c.PostInstances(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesResponse(rsp)
}

// PostInstancesContentAnalysisIdWithBodyWithResponse request with arbitrary body returning *PostInstancesContentAnalysisIdResponse
func (c *ClientWithResponses) PostInstancesContentAnalysisIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesContentAnalysisIdResponse, error) {
	rsp, err := c.PostInstancesContentAnalysisIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesContentAnalysisIdResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesContentAnalysisIdWithResponse(ctx context.Context, id string, body PostInstancesContentAnalysisIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesContentAnalysisIdResponse, error) {
	rsp, err := c.PostInstancesContentAnalysisId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesContentAnalysisIdResponse(rsp)
}

// PostInstancesExploitScanIdWithBodyWithResponse request with arbitrary body returning *PostInstancesExploitScanIdResponse
func (c *ClientWithResponses) PostInstancesExploitScanIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesExploitScanIdResponse, error) {
	rsp, err := c.PostInstancesExploitScanIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesExploitScanIdResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesExploitScanIdWithResponse(ctx context.Context, id string, body PostInstancesExploitScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesExploitScanIdResponse, error) {
	rsp, err := c.PostInstancesExploitScanId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesExploitScanIdResponse(rsp)
}

// PostInstancesMalewareScanIdWithBodyWithResponse request with arbitrary body returning *PostInstancesMalewareScanIdResponse
func (c *ClientWithResponses) PostInstancesMalewareScanIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesMalewareScanIdResponse, error) {
	rsp, err := c.PostInstancesMalewareScanIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesMalewareScanIdResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesMalewareScanIdWithResponse(ctx context.Context, id string, body PostInstancesMalewareScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesMalewareScanIdResponse, error) {
	rsp, err := c.PostInstancesMalewareScanId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesMalewareScanIdResponse(rsp)
}

// PostInstancesMisconfigurationScanIdWithBodyWithResponse request with arbitrary body returning *PostInstancesMisconfigurationScanIdResponse
func (c *ClientWithResponses) PostInstancesMisconfigurationScanIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesMisconfigurationScanIdResponse, error) {
	rsp, err := c.PostInstancesMisconfigurationScanIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesMisconfigurationScanIdResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesMisconfigurationScanIdWithResponse(ctx context.Context, id string, body PostInstancesMisconfigurationScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesMisconfigurationScanIdResponse, error) {
	rsp, err := c.PostInstancesMisconfigurationScanId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesMisconfigurationScanIdResponse(rsp)
}

// PostInstancesRootkitScanIdWithBodyWithResponse request with arbitrary body returning *PostInstancesRootkitScanIdResponse
func (c *ClientWithResponses) PostInstancesRootkitScanIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesRootkitScanIdResponse, error) {
	rsp, err := c.PostInstancesRootkitScanIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesRootkitScanIdResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesRootkitScanIdWithResponse(ctx context.Context, id string, body PostInstancesRootkitScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesRootkitScanIdResponse, error) {
	rsp, err := c.PostInstancesRootkitScanId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesRootkitScanIdResponse(rsp)
}

// PostInstancesSecretScanIdWithBodyWithResponse request with arbitrary body returning *PostInstancesSecretScanIdResponse
func (c *ClientWithResponses) PostInstancesSecretScanIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesSecretScanIdResponse, error) {
	rsp, err := c.PostInstancesSecretScanIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesSecretScanIdResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesSecretScanIdWithResponse(ctx context.Context, id string, body PostInstancesSecretScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesSecretScanIdResponse, error) {
	rsp, err := c.PostInstancesSecretScanId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesSecretScanIdResponse(rsp)
}

// PostInstancesVulnerabilityScanIdWithBodyWithResponse request with arbitrary body returning *PostInstancesVulnerabilityScanIdResponse
func (c *ClientWithResponses) PostInstancesVulnerabilityScanIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesVulnerabilityScanIdResponse, error) {
	rsp, err := c.PostInstancesVulnerabilityScanIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesVulnerabilityScanIdResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesVulnerabilityScanIdWithResponse(ctx context.Context, id string, body PostInstancesVulnerabilityScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesVulnerabilityScanIdResponse, error) {
	rsp, err := c.PostInstancesVulnerabilityScanId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesVulnerabilityScanIdResponse(rsp)
}

// DeleteInstancesIdWithResponse request returning *DeleteInstancesIdResponse
func (c *ClientWithResponses) DeleteInstancesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteInstancesIdResponse, error) {
	rsp, err := c.DeleteInstancesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInstancesIdResponse(rsp)
}

// GetInstancesIdWithResponse request returning *GetInstancesIdResponse
func (c *ClientWithResponses) GetInstancesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetInstancesIdResponse, error) {
	rsp, err := c.GetInstancesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesIdResponse(rsp)
}

// PutInstancesIdWithBodyWithResponse request with arbitrary body returning *PutInstancesIdResponse
func (c *ClientWithResponses) PutInstancesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInstancesIdResponse, error) {
	rsp, err := c.PutInstancesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInstancesIdResponse(rsp)
}

func (c *ClientWithResponses) PutInstancesIdWithResponse(ctx context.Context, id string, body PutInstancesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInstancesIdResponse, error) {
	rsp, err := c.PutInstancesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInstancesIdResponse(rsp)
}

// GetPackagesWithResponse request returning *GetPackagesResponse
func (c *ClientWithResponses) GetPackagesWithResponse(ctx context.Context, params *GetPackagesParams, reqEditors ...RequestEditorFn) (*GetPackagesResponse, error) {
	rsp, err := c.GetPackages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackagesResponse(rsp)
}

// GetPackagesIdWithResponse request returning *GetPackagesIdResponse
func (c *ClientWithResponses) GetPackagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPackagesIdResponse, error) {
	rsp, err := c.GetPackagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackagesIdResponse(rsp)
}

// GetVulnerabilitiesWithResponse request returning *GetVulnerabilitiesResponse
func (c *ClientWithResponses) GetVulnerabilitiesWithResponse(ctx context.Context, params *GetVulnerabilitiesParams, reqEditors ...RequestEditorFn) (*GetVulnerabilitiesResponse, error) {
	rsp, err := c.GetVulnerabilities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVulnerabilitiesResponse(rsp)
}

// GetVulnerabilitiesVulIdPkgIdWithResponse request returning *GetVulnerabilitiesVulIdPkgIdResponse
func (c *ClientWithResponses) GetVulnerabilitiesVulIdPkgIdWithResponse(ctx context.Context, vulId string, pkgId string, reqEditors ...RequestEditorFn) (*GetVulnerabilitiesVulIdPkgIdResponse, error) {
	rsp, err := c.GetVulnerabilitiesVulIdPkgId(ctx, vulId, pkgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVulnerabilitiesVulIdPkgIdResponse(rsp)
}

// ParseGetInstancesResponse parses an HTTP response from a GetInstancesWithResponse call
func ParseGetInstancesResponse(rsp *http.Response) (*GetInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Items List of instances in the given filters and page. List length must be lower or equal to pageSize.
			Items *[]Instance `json:"items,omitempty"`

			// Total Total instances count under the given filters
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostInstancesResponse parses an HTTP response from a PostInstancesWithResponse call
func ParsePostInstancesResponse(rsp *http.Response) (*PostInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InstanceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest InstanceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostInstancesContentAnalysisIdResponse parses an HTTP response from a PostInstancesContentAnalysisIdWithResponse call
func ParsePostInstancesContentAnalysisIdResponse(rsp *http.Response) (*PostInstancesContentAnalysisIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesContentAnalysisIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostInstancesExploitScanIdResponse parses an HTTP response from a PostInstancesExploitScanIdWithResponse call
func ParsePostInstancesExploitScanIdResponse(rsp *http.Response) (*PostInstancesExploitScanIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesExploitScanIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostInstancesMalewareScanIdResponse parses an HTTP response from a PostInstancesMalewareScanIdWithResponse call
func ParsePostInstancesMalewareScanIdResponse(rsp *http.Response) (*PostInstancesMalewareScanIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesMalewareScanIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostInstancesMisconfigurationScanIdResponse parses an HTTP response from a PostInstancesMisconfigurationScanIdWithResponse call
func ParsePostInstancesMisconfigurationScanIdResponse(rsp *http.Response) (*PostInstancesMisconfigurationScanIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesMisconfigurationScanIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostInstancesRootkitScanIdResponse parses an HTTP response from a PostInstancesRootkitScanIdWithResponse call
func ParsePostInstancesRootkitScanIdResponse(rsp *http.Response) (*PostInstancesRootkitScanIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesRootkitScanIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostInstancesSecretScanIdResponse parses an HTTP response from a PostInstancesSecretScanIdWithResponse call
func ParsePostInstancesSecretScanIdResponse(rsp *http.Response) (*PostInstancesSecretScanIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesSecretScanIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostInstancesVulnerabilityScanIdResponse parses an HTTP response from a PostInstancesVulnerabilityScanIdWithResponse call
func ParsePostInstancesVulnerabilityScanIdResponse(rsp *http.Response) (*PostInstancesVulnerabilityScanIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesVulnerabilityScanIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteInstancesIdResponse parses an HTTP response from a DeleteInstancesIdWithResponse call
func ParseDeleteInstancesIdResponse(rsp *http.Response) (*DeleteInstancesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInstancesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInstancesIdResponse parses an HTTP response from a GetInstancesIdWithResponse call
func ParseGetInstancesIdResponse(rsp *http.Response) (*GetInstancesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutInstancesIdResponse parses an HTTP response from a PutInstancesIdWithResponse call
func ParsePutInstancesIdResponse(rsp *http.Response) (*PutInstancesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInstancesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPackagesResponse parses an HTTP response from a GetPackagesWithResponse call
func ParseGetPackagesResponse(rsp *http.Response) (*GetPackagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Items List of packages in the given filters and page. List length must be lower or equal to pageSize
			Items *[]Package `json:"items,omitempty"`

			// Total Total packages count under the given filters
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPackagesIdResponse parses an HTTP response from a GetPackagesIdWithResponse call
func ParseGetPackagesIdResponse(rsp *http.Response) (*GetPackagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Package
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVulnerabilitiesResponse parses an HTTP response from a GetVulnerabilitiesWithResponse call
func ParseGetVulnerabilitiesResponse(rsp *http.Response) (*GetVulnerabilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVulnerabilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Items List of vulnerabilities in the given filters and page. List length must be lower or equal to pageSize
			Items *[]Vulnerability `json:"items,omitempty"`

			// Total Total vulnerabilities count under the given filters
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVulnerabilitiesVulIdPkgIdResponse parses an HTTP response from a GetVulnerabilitiesVulIdPkgIdWithResponse call
func ParseGetVulnerabilitiesVulIdPkgIdResponse(rsp *http.Response) (*GetVulnerabilitiesVulIdPkgIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVulnerabilitiesVulIdPkgIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VulnerabilityEx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get instances
	// (GET /instances)
	GetInstances(ctx echo.Context, params GetInstancesParams) error
	// Create instance
	// (POST /instances)
	PostInstances(ctx echo.Context) error
	// Report a content analysis for a specific instance
	// (POST /instances/contentAnalysis/{id})
	PostInstancesContentAnalysisId(ctx echo.Context, id string) error
	// Report an exploit scan for a specific instance
	// (POST /instances/exploitScan/{id})
	PostInstancesExploitScanId(ctx echo.Context, id string) error
	// Report a malware scan for a specific instance
	// (POST /instances/malewareScan/{id})
	PostInstancesMalewareScanId(ctx echo.Context, id string) error
	// Report a misconfiguration scan for a specific instance
	// (POST /instances/misconfigurationScan/{id})
	PostInstancesMisconfigurationScanId(ctx echo.Context, id string) error
	// Report a rootkit scan for a specific instance
	// (POST /instances/rootkitScan/{id})
	PostInstancesRootkitScanId(ctx echo.Context, id string) error
	// Report a secret scan for a specific instance
	// (POST /instances/secretScan/{id})
	PostInstancesSecretScanId(ctx echo.Context, id string) error
	// Report a vulnerability scan for a specific instance
	// (POST /instances/vulnerabilityScan/{id})
	PostInstancesVulnerabilityScanId(ctx echo.Context, id string) error
	// Delete Instance.
	// (DELETE /instances/{id})
	DeleteInstancesId(ctx echo.Context, id string) error
	// Get instance.
	// (GET /instances/{id})
	GetInstancesId(ctx echo.Context, id string) error
	// Update Application.
	// (PUT /instances/{id})
	PutInstancesId(ctx echo.Context, id string) error
	// Get packages
	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// Get Package.
	// (GET /packages/{id})
	GetPackagesId(ctx echo.Context, id string) error
	// Get vulnerabilities
	// (GET /vulnerabilities)
	GetVulnerabilities(ctx echo.Context, params GetVulnerabilitiesParams) error
	// Get a vulnerability of a specific package
	// (GET /vulnerabilities/{vul_id}/{pkg_id})
	GetVulnerabilitiesVulIdPkgId(ctx echo.Context, vulId string, pkgId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "sortKey" -------------

	err = runtime.BindQueryParameter("form", true, true, "sortKey", ctx.QueryParams(), &params.SortKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstances converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstances(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstances(ctx)
	return err
}

// PostInstancesContentAnalysisId converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstancesContentAnalysisId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstancesContentAnalysisId(ctx, id)
	return err
}

// PostInstancesExploitScanId converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstancesExploitScanId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstancesExploitScanId(ctx, id)
	return err
}

// PostInstancesMalewareScanId converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstancesMalewareScanId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstancesMalewareScanId(ctx, id)
	return err
}

// PostInstancesMisconfigurationScanId converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstancesMisconfigurationScanId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstancesMisconfigurationScanId(ctx, id)
	return err
}

// PostInstancesRootkitScanId converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstancesRootkitScanId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstancesRootkitScanId(ctx, id)
	return err
}

// PostInstancesSecretScanId converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstancesSecretScanId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstancesSecretScanId(ctx, id)
	return err
}

// PostInstancesVulnerabilityScanId converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstancesVulnerabilityScanId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstancesVulnerabilityScanId(ctx, id)
	return err
}

// DeleteInstancesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInstancesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteInstancesId(ctx, id)
	return err
}

// GetInstancesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesId(ctx, id)
	return err
}

// PutInstancesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutInstancesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutInstancesId(ctx, id)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "sortKey" -------------

	err = runtime.BindQueryParameter("form", true, true, "sortKey", ctx.QueryParams(), &params.SortKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetPackagesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackagesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackagesId(ctx, id)
	return err
}

// GetVulnerabilities converts echo context to params.
func (w *ServerInterfaceWrapper) GetVulnerabilities(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVulnerabilitiesParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "sortKey" -------------

	err = runtime.BindQueryParameter("form", true, true, "sortKey", ctx.QueryParams(), &params.SortKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVulnerabilities(ctx, params)
	return err
}

// GetVulnerabilitiesVulIdPkgId converts echo context to params.
func (w *ServerInterfaceWrapper) GetVulnerabilitiesVulIdPkgId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vul_id" -------------
	var vulId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "vul_id", runtime.ParamLocationPath, ctx.Param("vul_id"), &vulId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vul_id: %s", err))
	}

	// ------------- Path parameter "pkg_id" -------------
	var pkgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pkg_id", runtime.ParamLocationPath, ctx.Param("pkg_id"), &pkgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pkg_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVulnerabilitiesVulIdPkgId(ctx, vulId, pkgId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/instances", wrapper.GetInstances)
	router.POST(baseURL+"/instances", wrapper.PostInstances)
	router.POST(baseURL+"/instances/contentAnalysis/:id", wrapper.PostInstancesContentAnalysisId)
	router.POST(baseURL+"/instances/exploitScan/:id", wrapper.PostInstancesExploitScanId)
	router.POST(baseURL+"/instances/malewareScan/:id", wrapper.PostInstancesMalewareScanId)
	router.POST(baseURL+"/instances/misconfigurationScan/:id", wrapper.PostInstancesMisconfigurationScanId)
	router.POST(baseURL+"/instances/rootkitScan/:id", wrapper.PostInstancesRootkitScanId)
	router.POST(baseURL+"/instances/secretScan/:id", wrapper.PostInstancesSecretScanId)
	router.POST(baseURL+"/instances/vulnerabilityScan/:id", wrapper.PostInstancesVulnerabilityScanId)
	router.DELETE(baseURL+"/instances/:id", wrapper.DeleteInstancesId)
	router.GET(baseURL+"/instances/:id", wrapper.GetInstancesId)
	router.PUT(baseURL+"/instances/:id", wrapper.PutInstancesId)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/packages/:id", wrapper.GetPackagesId)
	router.GET(baseURL+"/vulnerabilities", wrapper.GetVulnerabilities)
	router.GET(baseURL+"/vulnerabilities/:vul_id/:pkg_id", wrapper.GetVulnerabilitiesVulIdPkgId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbS3PbOBL+KyjsHhnZmcweVjdF0iScWLJW8qNSqVQKJlsyxiTAAKBibUr/fQvgQ3yL",
	"tGWv5clNJtFAP77+GkTDP7HD/YAzYEri/k8snVvwifk5COgcZMCZBP2nC9IRNFCUM9zHA4b4zV/gKKRu",
	"iUJUIgEqFAxcRBkinoccIkEivkRLQr1QgOxhCweCByAUBbOCD1KSlZldbQLAfSyVoGyFt1sreRKtgrcW",
	"HihFnLsh9wMP7qnaaDFgoY/7X/DZ+TW28Ef7w0f81SpOlohegaO4yIpNxxfX5/NP2MKD0Z+D4Xh6gS18",
	"dj4cnGELzz5+Xtj6Z+WMa0I9ckO9giLT8+nYzNGoz/BqsdBSeXc4aymv3k1ACeqYB/8UsMR9/I+TXYxO",
	"4gCd6Cl2g7dWLL2zcb9wPLbS2fnpS6reEAkLh4ts7Fjo34DQwnAfeJyq2D3146gfEEfVv5ewBhE7uMmc",
	"q9BjIJLlEqEGu3ZeyptFKiDWtHAJklsrnqNdHHK41LIFVDXKZsfq+HO2pC4wRUkb8WFhuA4HU7Bq4287",
	"HbjVKU3X1IMVyDl8D6kAd5/4rCyhg+3wAPaJLsygrYVDCUKrIYgTMVKz3GVh+NbC6zRCLbhn6PHQnQm+",
	"pi7kGGRwvajO8HI0ulGEzaQizIEySOPsMr+XXPhE4T4OKVPvfsPpRCaWcZa5FUbqaEcL2KPG11PiQ+OA",
	"rFcaAZdzYWaCOaziCJbW8In3gwhobapPpUmDVSiIjnNrwYA4d2TVfiHBubrrEAMJjoD2w9cZQoujni+/",
	"2QEb5PCQKRSAQCljWpgq8GUn5hzqafAO/kQIUkOjCTqHnClgasCIt5G0olBkHdtKo1kkUJy4pJWFBUge",
	"Cgf2s1UMdLbkzdaYESUTjjZ/mkydRJm1cAg7QNDi2SIPP0ekJoVEP5QdhWmfz6B5RCgHsiOe7fnUXxh+",
	"O5D20WTPp3x++9hkw1WZl7uQWnmhJ7Yvs5/rtvvIJnRbQoyLdS3hxe8vNvu3eZPMUFOd1W25Bs6IutXf",
	"l+oW0JJ6EH2JOpwpQplE8XLYakOLk7xu6e5udD2Ya3dd2fPLBbbwxfz8z8EUW/j6fD7BFl7MPscj5oPp",
	"4nxi/qh0aBWztPZsQbiVC6tkHuzL0r6qnVdr9E7cOxr/Mbg8u/g2GywW1+fzUaXn4tzpXJdbb7Y8wlZh",
	"9TGEhT3qQHwAUnrH6pC+BiHrtrTrB1LIQ3dqNfupOoZryWT1pJMdUFrkOV3doFwLwnfWstURjJ41l0oV",
	"Oi7p/VUDIjzK7vI4KA0p1oiHBOvRxyl57G5qeL7S7ZVHBN0qUnZL05YKHsR18acdrtAhflVb4eL3beh5",
	"nhla6bN5fq7EWZPx5Hz+GVv403g+HZ9hCw9mszN7OLiwz3Vd+sOe1xehRXLEksx2OR1+HEw/jEfYwsmv",
	"SsHdjqzk+33oP2Rsks/oVtXnsnxEVIDcfPyfS3teY3MuC6oJ4n3jKagesXhsyu3hjsi5eR9eMvo9BGSP",
	"0JIL48lc3tojRJiLYgqxR8jh/g1lpkD3qlDfuaCmU9cE3rytTaJkq91g9WGJrEbPh5JdRaEugyd53O7s",
	"6OCn4Lmh4/unLX8PqG/SIWxEFORc5BIFbxT1oQqk62K2tvZUCw9lszihkOHcvrCjRpGpWRaejEf25SSt",
	"ZNPxhzP7g/3+rIqLtyavIjpVVHn63dVk6BG9DBrMbM1x6d4Gv+2d9k61WjwARgKK+/hd77T3Fkc8apx6",
	"ksvTFRh86ZhG3xsu7uMPmsOTQVpUEB8UCIn7X8pMvAIUkVlCyN9DEOZkUb9P/oh2ZjjQ2xH98ZrUdyVC",
	"sOJ2YibmKa63VnHFCbmnfugjAxOkeNxRbFhwQf/bvKgfTYn7/zrVX1Es+uOt1UKbBRcK3UGdvZIL9cm8",
	"3WtyGvOv5uPeNFRNjH47PY3IwGzNTf8pCDzqmICd/CWjfNrNV9jzJNmU1/uMSqUDlqIBUWait6JrYLqo",
	"6oDHJWAFPWQEPGArdYv8UCp0A8jjP3TYBYLvIfF0LBJ399qeLKf9i4r0VlwRr6z6hX6cUTw61g6ZC6Js",
	"Aa4KYiYYX+JVvpaSe1vkLLwIHQekjMhsSUJPdYpLY5cu00SvWDlkd4z/YAiEiDuxMvR9IjZRtu6cYSoj",
	"lxVJPeMyl9XaBSDVe+5uDmZF4axpW0T9toTst0+4dt6FU/iRugn9IBI5AogCt6dd9vvpv59NkeQ9Ip4A",
	"4m4Q3FOpei8MVUPjndRj2ML3bxzuwgrYmxg6b264u3kTE53+babY1ZcTJ3+YcPKTultDUPsBWjiHsN1y",
	"HTJ0az4PUralbneifbosKPWmWidEDWBi7RCJZ0QyIqRl6HkbJCDgYgfo3xsmYlyhJQ+Z+9JQNzc2IFI2",
	"VX+jECQDcOiSOo/DZdwZXziEdcHkeCd2lHjM9o4ejcXYh0hvwV8vDlnezkOC0CceJK3VLiicZOSOEobZ",
	"lvKjYRgfpb1yGCZNqidAYUWDvBMaK+SPE5VVNwUeDc+ie189TivtPSRgxa6IdcFppvb9qt1/E9LMmXlI",
	"DMr0FksXCO7uvhwlAjNXdx4NwMiBrx1/WSsPCb91sS3dBYWlnvZRgrHihtRjMZm/KvvKoVlh7CERmuDR",
	"BQ+i7kwekSPzPMXkE0IwF/6KmGWOdI80ppEvUaKoUW9vV+e5PH76bKeqL/9s3kQmCKsIOnyWyLyE8/7n",
	"A8Rl4JJMXmTI/JgZPLZqsFu714Ghs1es6zhiloz51fh91Y3fBAuH7fu2bfsmt3W7dn1TrX81fVNf5HM7",
	"3XztS/Dj2wOkoGmMUiWzx6LIHr1cbtcxjfXsRTGtuAReF9Xiv5z8Yu9Xzd4FZPx/SLxwP64jlRdN+MXo",
	"RZdUksDJz3XofaPu9uRncLf6tofsC7RwFXq2O7tbteT+aKVOWWBVThRp+mIKSfFe61GBpHh6w5fZc5sg",
	"WyMliHUS3lB4uI9PSEDx9uv2fwEAAP//T7HKiNBFAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
