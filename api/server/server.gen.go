// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID, params GetScanConfigsScanConfigIDParams) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get scan results according to the given filters
	// (GET /scanResults)
	GetScanResults(ctx echo.Context, params GetScanResultsParams) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scanResults)
	PostScanResults(ctx echo.Context) error
	// Get a scan result.
	// (GET /scanResults/{scanResultID})
	GetScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID, params GetScanResultsScanResultIDParams) error
	// Patch a scan result
	// (PATCH /scanResults/{scanResultID})
	PatchScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Update a scan result.
	// (PUT /scanResults/{scanResultID})
	PutScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsScanConfigIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID, params)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResults(ctx, params)
	return err
}

// PostScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanResults(ctx)
	return err
}

// GetScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsScanResultIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResultsScanResultID(ctx, scanResultID, params)
	return err
}

// PatchScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanResultsScanResultID(ctx, scanResultID)
	return err
}

// PutScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanResultsScanResultID(ctx, scanResultID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scanResults", wrapper.GetScanResults)
	router.POST(baseURL+"/scanResults", wrapper.PostScanResults)
	router.GET(baseURL+"/scanResults/:scanResultID", wrapper.GetScanResultsScanResultID)
	router.PATCH(baseURL+"/scanResults/:scanResultID", wrapper.PatchScanResultsScanResultID)
	router.PUT(baseURL+"/scanResults/:scanResultID", wrapper.PutScanResultsScanResultID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
