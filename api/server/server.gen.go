// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID, params GetScanConfigsScanConfigIDParams) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get scan results according to the given filters
	// (GET /scanResults)
	GetScanResults(ctx echo.Context, params GetScanResultsParams) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scanResults)
	PostScanResults(ctx echo.Context) error
	// Get a scan result.
	// (GET /scanResults/{scanResultID})
	GetScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID, params GetScanResultsScanResultIDParams) error
	// Patch a scan result
	// (PATCH /scanResults/{scanResultID})
	PatchScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Update a scan result.
	// (PUT /scanResults/{scanResultID})
	PutScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsScanConfigIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID, params)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResults(ctx, params)
	return err
}

// PostScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanResults(ctx)
	return err
}

// GetScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsScanResultIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResultsScanResultID(ctx, scanResultID, params)
	return err
}

// PatchScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanResultsScanResultID(ctx, scanResultID)
	return err
}

// PutScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanResultsScanResultID(ctx, scanResultID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scanResults", wrapper.GetScanResults)
	router.POST(baseURL+"/scanResults", wrapper.PostScanResults)
	router.GET(baseURL+"/scanResults/:scanResultID", wrapper.GetScanResultsScanResultID)
	router.PATCH(baseURL+"/scanResults/:scanResultID", wrapper.PatchScanResultsScanResultID)
	router.PUT(baseURL+"/scanResults/:scanResultID", wrapper.PutScanResultsScanResultID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3zvolDyHZ/AEFQQ+fXn6/wAAAP//gJMYvdp2AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
