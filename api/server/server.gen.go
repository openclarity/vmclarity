// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get scan results for a specified target
	// (GET /targets/{targetID}/scanResults)
	GetTargetsTargetIDScanResults(ctx echo.Context, targetID TargetID, params GetTargetsTargetIDScanResultsParams) error
	// Create scan result for a specified target
	// (POST /targets/{targetID}/scanResults)
	PostTargetsTargetIDScanResults(ctx echo.Context, targetID TargetID) error
	// Report a specific scan result for a specific target
	// (GET /targets/{targetID}/scanResults/{scanID})
	GetTargetsTargetIDScanResultsScanID(ctx echo.Context, targetID TargetID, scanID ScanID, params GetTargetsTargetIDScanResultsScanIDParams) error
	// Update scan results.
	// (PUT /targets/{targetID}/scanResults/{scanID})
	PutTargetsTargetIDScanResultsScanID(ctx echo.Context, targetID TargetID, scanID ScanID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDScanResultsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetIDScanResults(ctx, targetID, params)
	return err
}

// PostTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargetsTargetIDScanResults(ctx, targetID)
	return err
}

// GetTargetsTargetIDScanResultsScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetIDScanResultsScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDScanResultsScanIDParams
	// ------------- Optional query parameter "scanType" -------------

	err = runtime.BindQueryParameter("form", true, false, "scanType", ctx.QueryParams(), &params.ScanType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanType: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetIDScanResultsScanID(ctx, targetID, scanID, params)
	return err
}

// PutTargetsTargetIDScanResultsScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetIDScanResultsScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetIDScanResultsScanID(ctx, targetID, scanID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID/scanResults", wrapper.GetTargetsTargetIDScanResults)
	router.POST(baseURL+"/targets/:targetID/scanResults", wrapper.PostTargetsTargetIDScanResults)
	router.GET(baseURL+"/targets/:targetID/scanResults/:scanID", wrapper.GetTargetsTargetIDScanResultsScanID)
	router.PUT(baseURL+"/targets/:targetID/scanResults/:scanID", wrapper.PutTargetsTargetIDScanResultsScanID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Zk2dT70qAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
