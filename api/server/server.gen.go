// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get instances
	// (GET /instances)
	GetInstances(ctx echo.Context, params GetInstancesParams) error
	// Create instance
	// (POST /instances)
	PostInstances(ctx echo.Context) error
	// Delete Instance.
	// (DELETE /instances/{instanceID})
	DeleteInstancesInstanceID(ctx echo.Context, instanceID string) error
	// Get instance.
	// (GET /instances/{instanceID})
	GetInstancesInstanceID(ctx echo.Context, instanceID string) error
	// Update instance.
	// (PUT /instances/{instanceID})
	PutInstancesInstanceID(ctx echo.Context, instanceID string) error
	// Get scan results for a specified instance
	// (GET /instances/{instanceID}/scanresults)
	GetInstancesInstanceIDScanresults(ctx echo.Context, instanceID string, params GetInstancesInstanceIDScanresultsParams) error
	// Create scan result for a specified instance
	// (POST /instances/{instanceID}/scanresults)
	PostInstancesInstanceIDScanresults(ctx echo.Context, instanceID string) error
	// Report a specific scan result for a specific instance
	// (GET /instances/{instanceID}/scanresults/{scanID})
	GetInstancesInstanceIDScanresultsScanID(ctx echo.Context, instanceID string, scanID string) error
	// Update scan results.
	// (PUT /instances/{instanceID}/scanresults/{scanID})
	PutInstancesInstanceIDScanresultsScanID(ctx echo.Context, instanceID string, scanID string) error
	// Get a specific exploit scan result for a specific instance
	// (GET /instances/{instanceID}/scanresults/{scanID}/exploits)
	GetInstancesInstanceIDScanresultsScanIDExploits(ctx echo.Context, instanceID string, scanID string) error
	// Get a specific malware scan result for a specific instance
	// (GET /instances/{instanceID}/scanresults/{scanID}/malwares)
	GetInstancesInstanceIDScanresultsScanIDMalwares(ctx echo.Context, instanceID string, scanID string) error
	// Get a specific misconfiguration scan result for a specific instance
	// (GET /instances/{instanceID}/scanresults/{scanID}/misconfiguration)
	GetInstancesInstanceIDScanresultsScanIDMisconfiguration(ctx echo.Context, instanceID string, scanID string) error
	// Get a specific rootkit scan result for a specific instance
	// (GET /instances/{instanceID}/scanresults/{scanID}/rootkits)
	GetInstancesInstanceIDScanresultsScanIDRootkits(ctx echo.Context, instanceID string, scanID string) error
	// Get a specific sbom scan result for a specific instance
	// (GET /instances/{instanceID}/scanresults/{scanID}/sbom)
	GetInstancesInstanceIDScanresultsScanIDSbom(ctx echo.Context, instanceID string, scanID string) error
	// Get a specific secret scan result for a specific instance
	// (GET /instances/{instanceID}/scanresults/{scanID}/secrets)
	GetInstancesInstanceIDScanresultsScanIDSecrets(ctx echo.Context, instanceID string, scanID string) error
	// Get a specific vulnerabilities scan result for a specific instance
	// (GET /instances/{instanceID}/scanresults/{scanID}/vulnerabilities)
	GetInstancesInstanceIDScanresultsScanIDVulnerabilities(ctx echo.Context, instanceID string, scanID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "sortKey" -------------

	err = runtime.BindQueryParameter("form", true, true, "sortKey", ctx.QueryParams(), &params.SortKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstances converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstances(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstances(ctx)
	return err
}

// DeleteInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteInstancesInstanceID(ctx, instanceID)
	return err
}

// GetInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesInstanceID(ctx, instanceID)
	return err
}

// PutInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) PutInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutInstancesInstanceID(ctx, instanceID)
	return err
}

// GetInstancesInstanceIDScanresults converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceIDScanresults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesInstanceIDScanresultsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "sortKey" -------------

	err = runtime.BindQueryParameter("form", true, true, "sortKey", ctx.QueryParams(), &params.SortKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesInstanceIDScanresults(ctx, instanceID, params)
	return err
}

// PostInstancesInstanceIDScanresults converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstancesInstanceIDScanresults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstancesInstanceIDScanresults(ctx, instanceID)
	return err
}

// GetInstancesInstanceIDScanresultsScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceIDScanresultsScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesInstanceIDScanresultsScanID(ctx, instanceID, scanID)
	return err
}

// PutInstancesInstanceIDScanresultsScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutInstancesInstanceIDScanresultsScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutInstancesInstanceIDScanresultsScanID(ctx, instanceID, scanID)
	return err
}

// GetInstancesInstanceIDScanresultsScanIDExploits converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceIDScanresultsScanIDExploits(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesInstanceIDScanresultsScanIDExploits(ctx, instanceID, scanID)
	return err
}

// GetInstancesInstanceIDScanresultsScanIDMalwares converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceIDScanresultsScanIDMalwares(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesInstanceIDScanresultsScanIDMalwares(ctx, instanceID, scanID)
	return err
}

// GetInstancesInstanceIDScanresultsScanIDMisconfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceIDScanresultsScanIDMisconfiguration(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesInstanceIDScanresultsScanIDMisconfiguration(ctx, instanceID, scanID)
	return err
}

// GetInstancesInstanceIDScanresultsScanIDRootkits converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceIDScanresultsScanIDRootkits(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesInstanceIDScanresultsScanIDRootkits(ctx, instanceID, scanID)
	return err
}

// GetInstancesInstanceIDScanresultsScanIDSbom converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceIDScanresultsScanIDSbom(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesInstanceIDScanresultsScanIDSbom(ctx, instanceID, scanID)
	return err
}

// GetInstancesInstanceIDScanresultsScanIDSecrets converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceIDScanresultsScanIDSecrets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesInstanceIDScanresultsScanIDSecrets(ctx, instanceID, scanID)
	return err
}

// GetInstancesInstanceIDScanresultsScanIDVulnerabilities converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceIDScanresultsScanIDVulnerabilities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, ctx.Param("instanceID"), &instanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesInstanceIDScanresultsScanIDVulnerabilities(ctx, instanceID, scanID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/instances", wrapper.GetInstances)
	router.POST(baseURL+"/instances", wrapper.PostInstances)
	router.DELETE(baseURL+"/instances/:instanceID", wrapper.DeleteInstancesInstanceID)
	router.GET(baseURL+"/instances/:instanceID", wrapper.GetInstancesInstanceID)
	router.PUT(baseURL+"/instances/:instanceID", wrapper.PutInstancesInstanceID)
	router.GET(baseURL+"/instances/:instanceID/scanresults", wrapper.GetInstancesInstanceIDScanresults)
	router.POST(baseURL+"/instances/:instanceID/scanresults", wrapper.PostInstancesInstanceIDScanresults)
	router.GET(baseURL+"/instances/:instanceID/scanresults/:scanID", wrapper.GetInstancesInstanceIDScanresultsScanID)
	router.PUT(baseURL+"/instances/:instanceID/scanresults/:scanID", wrapper.PutInstancesInstanceIDScanresultsScanID)
	router.GET(baseURL+"/instances/:instanceID/scanresults/:scanID/exploits", wrapper.GetInstancesInstanceIDScanresultsScanIDExploits)
	router.GET(baseURL+"/instances/:instanceID/scanresults/:scanID/malwares", wrapper.GetInstancesInstanceIDScanresultsScanIDMalwares)
	router.GET(baseURL+"/instances/:instanceID/scanresults/:scanID/misconfiguration", wrapper.GetInstancesInstanceIDScanresultsScanIDMisconfiguration)
	router.GET(baseURL+"/instances/:instanceID/scanresults/:scanID/rootkits", wrapper.GetInstancesInstanceIDScanresultsScanIDRootkits)
	router.GET(baseURL+"/instances/:instanceID/scanresults/:scanID/sbom", wrapper.GetInstancesInstanceIDScanresultsScanIDSbom)
	router.GET(baseURL+"/instances/:instanceID/scanresults/:scanID/secrets", wrapper.GetInstancesInstanceIDScanresultsScanIDSecrets)
	router.GET(baseURL+"/instances/:instanceID/scanresults/:scanID/vulnerabilities", wrapper.GetInstancesInstanceIDScanresultsScanIDVulnerabilities)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
