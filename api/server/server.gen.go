// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get scan results according to the given filters
	// (GET /scanResults)
	GetScanResults(ctx echo.Context, params GetScanResultsParams) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scanResults)
	PostScanResults(ctx echo.Context) error
	// Get a scan result.
	// (GET /scanResults/{scanResultID})
	GetScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID, params GetScanResultsScanResultIDParams) error
	// Patch a scan result
	// (PATCH /scanResults/{scanResultID})
	PatchScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Update a scan result.
	// (PUT /scanResults/{scanResultID})
	PutScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResults(ctx, params)
	return err
}

// PostScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanResults(ctx)
	return err
}

// GetScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsScanResultIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResultsScanResultID(ctx, scanResultID, params)
	return err
}

// PatchScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanResultsScanResultID(ctx, scanResultID)
	return err
}

// PutScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanResultsScanResultID(ctx, scanResultID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scanResults", wrapper.GetScanResults)
	router.POST(baseURL+"/scanResults", wrapper.PostScanResults)
	router.GET(baseURL+"/scanResults/:scanResultID", wrapper.GetScanResultsScanResultID)
	router.PATCH(baseURL+"/scanResults/:scanResultID", wrapper.PatchScanResultsScanResultID)
	router.PUT(baseURL+"/scanResults/:scanResultID", wrapper.PutScanResultsScanResultID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PIdn8AQVBD5/ev7/AAAA//+rIkb+f3IAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
