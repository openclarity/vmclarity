// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get scan results for a specified target
	// (GET /targets/{targetID}/scanResults)
	GetTargetsTargetIDScanResults(ctx echo.Context, targetID TargetID, params GetTargetsTargetIDScanResultsParams) error
	// Create scan result for a specified target
	// (POST /targets/{targetID}/scanResults)
	PostTargetsTargetIDScanResults(ctx echo.Context, targetID TargetID) error
	// Report a specific scan result for a specific target
	// (GET /targets/{targetID}/scanResults/{scanID})
	GetTargetsTargetIDScanResultsScanID(ctx echo.Context, targetID TargetID, scanID ScanID) error
	// Update scan results.
	// (PUT /targets/{targetID}/scanResults/{scanID})
	PutTargetsTargetIDScanResultsScanID(ctx echo.Context, targetID TargetID, scanID ScanID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDScanResultsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetIDScanResults(ctx, targetID, params)
	return err
}

// PostTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargetsTargetIDScanResults(ctx, targetID)
	return err
}

// GetTargetsTargetIDScanResultsScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetIDScanResultsScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetIDScanResultsScanID(ctx, targetID, scanID)
	return err
}

// PutTargetsTargetIDScanResultsScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetIDScanResultsScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetIDScanResultsScanID(ctx, targetID, scanID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID/scanResults", wrapper.GetTargetsTargetIDScanResults)
	router.POST(baseURL+"/targets/:targetID/scanResults", wrapper.PostTargetsTargetIDScanResults)
	router.GET(baseURL+"/targets/:targetID/scanResults/:scanID", wrapper.GetTargetsTargetIDScanResultsScanID)
	router.PUT(baseURL+"/targets/:targetID/scanResults/:scanID", wrapper.PutTargetsTargetIDScanResultsScanID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
