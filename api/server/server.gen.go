// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all available scopes
	// (GET /discovery/scopes)
	GetDiscoveryScopes(ctx echo.Context, params GetDiscoveryScopesParams) error
	// Set all available scopes
	// (PUT /discovery/scopes)
	PutDiscoveryScopes(ctx echo.Context) error
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID, params GetScanConfigsScanConfigIDParams) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get scan results according to the given filters
	// (GET /scanResults)
	GetScanResults(ctx echo.Context, params GetScanResultsParams) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scanResults)
	PostScanResults(ctx echo.Context) error
	// Get a scan result.
	// (GET /scanResults/{scanResultID})
	GetScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID, params GetScanResultsScanResultIDParams) error
	// Patch a scan result
	// (PATCH /scanResults/{scanResultID})
	PatchScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Update a scan result.
	// (PUT /scanResults/{scanResultID})
	PutScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDiscoveryScopes converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiscoveryScopes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiscoveryScopesParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDiscoveryScopes(ctx, params)
	return err
}

// PutDiscoveryScopes converts echo context to params.
func (w *ServerInterfaceWrapper) PutDiscoveryScopes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDiscoveryScopes(ctx)
	return err
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsScanConfigIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID, params)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResults(ctx, params)
	return err
}

// PostScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanResults(ctx)
	return err
}

// GetScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsScanResultIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResultsScanResultID(ctx, scanResultID, params)
	return err
}

// PatchScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanResultsScanResultID(ctx, scanResultID)
	return err
}

// PutScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanResultsScanResultID(ctx, scanResultID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/discovery/scopes", wrapper.GetDiscoveryScopes)
	router.PUT(baseURL+"/discovery/scopes", wrapper.PutDiscoveryScopes)
	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scanResults", wrapper.GetScanResults)
	router.POST(baseURL+"/scanResults", wrapper.PostScanResults)
	router.GET(baseURL+"/scanResults/:scanResultID", wrapper.GetScanResultsScanResultID)
	router.PATCH(baseURL+"/scanResults/:scanResultID", wrapper.PatchScanResultsScanResultID)
	router.PUT(baseURL+"/scanResults/:scanResultID", wrapper.PutScanResultsScanResultID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4BnKCHz+8vz/AQAA///j+dXZEnsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
