// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all available scopes
	// (GET /discovery/scopes)
	GetDiscoveryScopes(ctx echo.Context, params GetDiscoveryScopesParams) error
	// Set all available scopes
	// (PUT /discovery/scopes)
	PutDiscoveryScopes(ctx echo.Context) error
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID, params GetScanConfigsScanConfigIDParams) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get scan results according to the given filters
	// (GET /scanResults)
	GetScanResults(ctx echo.Context, params GetScanResultsParams) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scanResults)
	PostScanResults(ctx echo.Context) error
	// Get a scan result.
	// (GET /scanResults/{scanResultID})
	GetScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID, params GetScanResultsScanResultIDParams) error
	// Patch a scan result
	// (PATCH /scanResults/{scanResultID})
	PatchScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Update a scan result.
	// (PUT /scanResults/{scanResultID})
	PutScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID, params GetTargetsTargetIDParams) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDiscoveryScopes converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiscoveryScopes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiscoveryScopesParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDiscoveryScopes(ctx, params)
	return err
}

// PutDiscoveryScopes converts echo context to params.
func (w *ServerInterfaceWrapper) PutDiscoveryScopes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDiscoveryScopes(ctx)
	return err
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsScanConfigIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID, params)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResults(ctx, params)
	return err
}

// PostScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanResults(ctx)
	return err
}

// GetScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsScanResultIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResultsScanResultID(ctx, scanResultID, params)
	return err
}

// PatchScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanResultsScanResultID(ctx, scanResultID)
	return err
}

// PutScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanResultsScanResultID(ctx, scanResultID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID, params)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/discovery/scopes", wrapper.GetDiscoveryScopes)
	router.PUT(baseURL+"/discovery/scopes", wrapper.PutDiscoveryScopes)
	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scanResults", wrapper.GetScanResults)
	router.POST(baseURL+"/scanResults", wrapper.PostScanResults)
	router.GET(baseURL+"/scanResults/:scanResultID", wrapper.GetScanResultsScanResultID)
	router.PATCH(baseURL+"/scanResults/:scanResultID", wrapper.PatchScanResultsScanResultID)
	router.PUT(baseURL+"/scanResults/:scanResultID", wrapper.PutScanResultsScanResultID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5e1gjcFj/dQoESjmQCQkmms/nP3zCHOxpWGXNlTmQlKVe64QaOiTQ2lITy9v5zDhHv7n9Kn6kt2zCYxS",
	"MBlqXc8u9e8VTZvU38Dr5qBqD+g5jPeHdgZVzO4HA/8SD7ZVxTu41I876UzgULI1bK7L9sTUPlu3iQNK",
	"5Dh7xss66xZf/R0pjdoy5ALWd8XMBZhtDcqJjBeODUT9fES7fv3N6KWUS3Oyfo2pFoOefGdqp9e7rWhh",
	"+5A/fflTEw+gibd5ogKgP4wmmvXup4plSFRpezfttSXYnynZa+7yu6cVXiYx63DgoD1l26jSMXyT49jH",
	"iyZubvpbh3nhcc1NXbYhSQJJyU57us9GMznEdEZje03/wJmd5+iPz5WtNaCa4Jl7wWbOhCWbiR4+5zP0",
	"tznj59d+rtBkh+W74c+BnnFSf2u8+669Hvw7zkJClP8VcxGrP8fKRWpaGpR7HF53Pn9LXvVlFWu6ORVd",
	"9665TVDKBwxaHex3o5W1VMXQOUim8qfeHlBvy6ylvsm9et5yRLWs5y2lv+y2WbdmLEfPVXLz7lUQnP6f",
	"WY5eAHzpPo04QX0SL9bppySUMLH1dlPLo16t6cIxezuv0dVp6eccu5HTEuIfu3fToAtdHYCJ04P7N3q3",
	"2nOf+j12a47epmntzxye42dHt8TvTGDuFokp2LS65Zbk5SDifU2/fnxtqrVGXj2iO3aGcZguyJ9q1apW",
	"tT7Hd6lWtQyhS2ogNxdEfFtTeYfkD9jKOH7t76VSkFLOjenDRtLHqy28Tn/Bn0TY/fyYaUTtVr+/EHfc",
	"VMLene7sGU6fyiduA/IGq0DTzf/22c1lrP+b0N9T9jAt3/c9Wv5g2NKYPxyO89/QAXq/7X53kt746JOm",
	"gO/ABva6Tv4lFKUM/cq07RWDvyNqjw3/SgUKdPL62h9/KFWn4Ck+x6ckp/j58/P/BwAA//9CQUR9nH0A",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
