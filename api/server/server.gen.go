// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID, params GetScanConfigsScanConfigIDParams) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get scan results according to the given filters
	// (GET /scanResults)
	GetScanResults(ctx echo.Context, params GetScanResultsParams) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scanResults)
	PostScanResults(ctx echo.Context) error
	// Get a scan result.
	// (GET /scanResults/{scanResultID})
	GetScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID, params GetScanResultsScanResultIDParams) error
	// Patch a scan result
	// (PATCH /scanResults/{scanResultID})
	PatchScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Update a scan result.
	// (PUT /scanResults/{scanResultID})
	PutScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsScanConfigIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID, params)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResults(ctx, params)
	return err
}

// PostScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanResults(ctx)
	return err
}

// GetScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsScanResultIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResultsScanResultID(ctx, scanResultID, params)
	return err
}

// PatchScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanResultsScanResultID(ctx, scanResultID)
	return err
}

// PutScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanResultsScanResultID(ctx, scanResultID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scanResults", wrapper.GetScanResults)
	router.POST(baseURL+"/scanResults", wrapper.PostScanResults)
	router.GET(baseURL+"/scanResults/:scanResultID", wrapper.GetScanResultsScanResultID)
	router.PATCH(baseURL+"/scanResults/:scanResultID", wrapper.PatchScanResultsScanResultID)
	router.PUT(baseURL+"/scanResults/:scanResultID", wrapper.PutScanResultsScanResultID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
