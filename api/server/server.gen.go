// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get asset scans according to the given filters
	// (GET /assetScans)
	GetAssetScans(ctx echo.Context, params GetAssetScansParams) error
	// Create an asset scan for a specified asset
	// (POST /assetScans)
	PostAssetScans(ctx echo.Context) error
	// Get an asset scan.
	// (GET /assetScans/{assetScanID})
	GetAssetScansAssetScanID(ctx echo.Context, assetScanID AssetScanID, params GetAssetScansAssetScanIDParams) error
	// Patch an asset scan
	// (PATCH /assetScans/{assetScanID})
	PatchAssetScansAssetScanID(ctx echo.Context, assetScanID AssetScanID, params PatchAssetScansAssetScanIDParams) error
	// Update an asset scan.
	// (PUT /assetScans/{assetScanID})
	PutAssetScansAssetScanID(ctx echo.Context, assetScanID AssetScanID, params PutAssetScansAssetScanIDParams) error
	// Get assets
	// (GET /assets)
	GetAssets(ctx echo.Context, params GetAssetsParams) error
	// Create asset
	// (POST /assets)
	PostAssets(ctx echo.Context) error
	// Delete asset.
	// (DELETE /assets/{assetID})
	DeleteAssetsAssetID(ctx echo.Context, assetID AssetID) error
	// Get asset.
	// (GET /assets/{assetID})
	GetAssetsAssetID(ctx echo.Context, assetID AssetID, params GetAssetsAssetIDParams) error
	// Update asset.
	// (PATCH /assets/{assetID})
	PatchAssetsAssetID(ctx echo.Context, assetID AssetID, params PatchAssetsAssetIDParams) error
	// Update asset.
	// (PUT /assets/{assetID})
	PutAssetsAssetID(ctx echo.Context, assetID AssetID, params PutAssetsAssetIDParams) error
	// Get all findings.
	// (GET /findings)
	GetFindings(ctx echo.Context, params GetFindingsParams) error
	// Create a finding
	// (POST /findings)
	PostFindings(ctx echo.Context) error
	// Delete a finding.
	// (DELETE /findings/{findingID})
	DeleteFindingsFindingID(ctx echo.Context, findingID FindingID) error
	// Get the details for a finding.
	// (GET /findings/{findingID})
	GetFindingsFindingID(ctx echo.Context, findingID FindingID, params GetFindingsFindingIDParams) error
	// Patch a finding.
	// (PATCH /findings/{findingID})
	PatchFindingsFindingID(ctx echo.Context, findingID FindingID) error
	// Update a finding.
	// (PUT /findings/{findingID})
	PutFindingsFindingID(ctx echo.Context, findingID FindingID) error
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID, params GetScanConfigsScanConfigIDParams) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID, params PatchScanConfigsScanConfigIDParams) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID, params PutScanConfigsScanConfigIDParams) error
	// Get all scans. Each scan contains details about a multi-asset scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-asset scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-asset scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID, params GetScansScanIDParams) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID, params PatchScansScanIDParams) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID, params PutScansScanIDParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", true, false, "$orderby", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetScans(ctx, params)
	return err
}

// PostAssetScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostAssetScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAssetScans(ctx)
	return err
}

// GetAssetScansAssetScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetScansAssetScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetScanID" -------------
	var assetScanID AssetScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetScanID", runtime.ParamLocationPath, ctx.Param("assetScanID"), &assetScanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetScanID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetScansAssetScanIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetScansAssetScanID(ctx, assetScanID, params)
	return err
}

// PatchAssetScansAssetScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAssetScansAssetScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetScanID" -------------
	var assetScanID AssetScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetScanID", runtime.ParamLocationPath, ctx.Param("assetScanID"), &assetScanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetScanID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchAssetScansAssetScanIDParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch Ifmatch
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchAssetScansAssetScanID(ctx, assetScanID, params)
	return err
}

// PutAssetScansAssetScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutAssetScansAssetScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetScanID" -------------
	var assetScanID AssetScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetScanID", runtime.ParamLocationPath, ctx.Param("assetScanID"), &assetScanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetScanID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutAssetScansAssetScanIDParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch Ifmatch
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAssetScansAssetScanID(ctx, assetScanID, params)
	return err
}

// GetAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", true, false, "$orderby", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssets(ctx, params)
	return err
}

// PostAssets converts echo context to params.
func (w *ServerInterfaceWrapper) PostAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAssets(ctx)
	return err
}

// DeleteAssetsAssetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAssetsAssetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetID" -------------
	var assetID AssetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetID", runtime.ParamLocationPath, ctx.Param("assetID"), &assetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAssetsAssetID(ctx, assetID)
	return err
}

// GetAssetsAssetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetsAssetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetID" -------------
	var assetID AssetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetID", runtime.ParamLocationPath, ctx.Param("assetID"), &assetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetsAssetIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetsAssetID(ctx, assetID, params)
	return err
}

// PatchAssetsAssetID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAssetsAssetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetID" -------------
	var assetID AssetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetID", runtime.ParamLocationPath, ctx.Param("assetID"), &assetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchAssetsAssetIDParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch Ifmatch
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchAssetsAssetID(ctx, assetID, params)
	return err
}

// PutAssetsAssetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutAssetsAssetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetID" -------------
	var assetID AssetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetID", runtime.ParamLocationPath, ctx.Param("assetID"), &assetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutAssetsAssetIDParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch Ifmatch
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAssetsAssetID(ctx, assetID, params)
	return err
}

// GetFindings converts echo context to params.
func (w *ServerInterfaceWrapper) GetFindings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFindingsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", true, false, "$orderby", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFindings(ctx, params)
	return err
}

// PostFindings converts echo context to params.
func (w *ServerInterfaceWrapper) PostFindings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFindings(ctx)
	return err
}

// DeleteFindingsFindingID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFindingsFindingID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "findingID" -------------
	var findingID FindingID

	err = runtime.BindStyledParameterWithLocation("simple", false, "findingID", runtime.ParamLocationPath, ctx.Param("findingID"), &findingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter findingID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFindingsFindingID(ctx, findingID)
	return err
}

// GetFindingsFindingID converts echo context to params.
func (w *ServerInterfaceWrapper) GetFindingsFindingID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "findingID" -------------
	var findingID FindingID

	err = runtime.BindStyledParameterWithLocation("simple", false, "findingID", runtime.ParamLocationPath, ctx.Param("findingID"), &findingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter findingID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFindingsFindingIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFindingsFindingID(ctx, findingID, params)
	return err
}

// PatchFindingsFindingID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchFindingsFindingID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "findingID" -------------
	var findingID FindingID

	err = runtime.BindStyledParameterWithLocation("simple", false, "findingID", runtime.ParamLocationPath, ctx.Param("findingID"), &findingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter findingID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchFindingsFindingID(ctx, findingID)
	return err
}

// PutFindingsFindingID converts echo context to params.
func (w *ServerInterfaceWrapper) PutFindingsFindingID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "findingID" -------------
	var findingID FindingID

	err = runtime.BindStyledParameterWithLocation("simple", false, "findingID", runtime.ParamLocationPath, ctx.Param("findingID"), &findingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter findingID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutFindingsFindingID(ctx, findingID)
	return err
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", true, false, "$orderby", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsScanConfigIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID, params)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchScanConfigsScanConfigIDParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch Ifmatch
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID, params)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutScanConfigsScanConfigIDParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch Ifmatch
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID, params)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", true, false, "$orderby", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansScanIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID, params)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchScansScanIDParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch Ifmatch
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID, params)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutScansScanIDParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch Ifmatch
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/assetScans", wrapper.GetAssetScans)
	router.POST(baseURL+"/assetScans", wrapper.PostAssetScans)
	router.GET(baseURL+"/assetScans/:assetScanID", wrapper.GetAssetScansAssetScanID)
	router.PATCH(baseURL+"/assetScans/:assetScanID", wrapper.PatchAssetScansAssetScanID)
	router.PUT(baseURL+"/assetScans/:assetScanID", wrapper.PutAssetScansAssetScanID)
	router.GET(baseURL+"/assets", wrapper.GetAssets)
	router.POST(baseURL+"/assets", wrapper.PostAssets)
	router.DELETE(baseURL+"/assets/:assetID", wrapper.DeleteAssetsAssetID)
	router.GET(baseURL+"/assets/:assetID", wrapper.GetAssetsAssetID)
	router.PATCH(baseURL+"/assets/:assetID", wrapper.PatchAssetsAssetID)
	router.PUT(baseURL+"/assets/:assetID", wrapper.PutAssetsAssetID)
	router.GET(baseURL+"/findings", wrapper.GetFindings)
	router.POST(baseURL+"/findings", wrapper.PostFindings)
	router.DELETE(baseURL+"/findings/:findingID", wrapper.DeleteFindingsFindingID)
	router.GET(baseURL+"/findings/:findingID", wrapper.GetFindingsFindingID)
	router.PATCH(baseURL+"/findings/:findingID", wrapper.PatchFindingsFindingID)
	router.PUT(baseURL+"/findings/:findingID", wrapper.PutFindingsFindingID)
	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
	"H4sIAAAAAAAC/+x9W3PbOLLwX0Hx26rZ3ZLtZL45D8dvjuxkVONbWU7mbG2mzkJkS8KEBDgAaFuTyn8/",
	"BYCgwAt4kS3JzvjNFoHGpe+NbuBrELIkZRSoFMHx1yDFHCcggev/sBAgJ6fqT0KD4yDFchmMAooTCI6L",
	"r6OAwx8Z4RAFx5JnMApEuIQEq25ylaqmQnJCF8G3byPTaxpi2g43bzEM9pzQiNCFF/L6+zC4ZJ5gGS4L",
	"qEvAEfA13Mn84EI3aABDqIQFcA2HRVjiMcuoLED9kQFfrSH9LdRfG+DMGIsB0zWcs4cU08gLCMzn9oVp",
	"QO9JLIF7Ac3N5x6ArngE/N3KC4mp77NVG6hR8HCwYAd5DwvQDjCFGEL/3gnzucdMp19I6gejPvbB5C3z",
	"A5GsE4YIMR0zOid+gi01GUazoo3FxHDu+qYai5RRAVo2TLMwBKH/DBmVYGgap2lMQiwJo0e/C0bVb2uY",
	"f+MwD46D/3e0FjpH5qs4yuHd5GOYESMQISepAhcc2yFRAkLgBSiy+Ei/UHZPzzhn/MmmcpKStmnkYyLQ",
	"g5q91h0VXLfv8ddKzxOK2Ox3CCWSSywREYiDzDiFCBGKcByjEAsQiM3RHJM44yAOg1GQcpYCl8RsvF39",
	"8deAA46uaLyy2KtTQf6LGVVt2IkSrvWZner/ZiAQpkgL4Hym9fGN2Kdz1rmNquGtmoAWzVzIKYBGw5zx",
	"BMvgOIiwhANJEghGdUlAokYBEeOhgDjcEUEMBVT50DCKKIRyeVtumcQxolkyA66wotsa5C3xHSC4A454",
	"RtGccSSXRJi9W0/CHSdLEsxXnXwQYvre6CkxzbsoRAJPCMUSoqveK/fif8ySpLQdle9nD0Tk9kAd9b3Q",
	"rkA5hOojtvslCZcoo+SPDFDIqJAcEypRyJKZWi1hFIU4Uzwhl7rFPCaGKDel/RuINVyxNCrAyweIOy2R",
	"ZGvOMLMOMUUzQEbPQvQCGaVjC8uM42m8dUbqMe72Gaub2NaK9N8KH7/5yE/NQhNHHF/Ng+N/b85iJUL+",
	"NgrgIY0ZMWzb1vnMtNMTWdvM4pozpVwharI5vTSW4Pgec+ga88I0s2MmRITaqsm4WUJn/0oHC4iDYBkP",
	"YaymmaVdYG7KzacSS+hWEJwx+aXHxt6YdnZuYsaSzj7TGUuKDjlpdBFxFfECQg7d05vqZsVgEstM9CI0",
	"1WVqmj+a2+6ymALHMxITS/FtUD45zVdm6g2CvecabiFJY43xVu5sVX7THjha8/mzVYI1Mnr2Esmz0r+i",
=======
=======
>>>>>>> 88c0dce4 (add unknown state to encrypted volume)
<<<<<<< HEAD
	"H4sIAAAAAAAC/+x9W3PbOLLwX0Hx26rZ3ZLtZL45D8dvjuxkVONbWU5ytjZTZyGyJWFCAhwAtK1N5b+f",
<<<<<<< HEAD
	"AkBQ4AW8yJZkZ/1mi0Dj0vdGN/AtCFmSMgpUiuD4W5BijhOQwPV/WAiQk1P1J6HBcZBiuQxGAcUJBMfF",
	"11HA4c+McIiCY8kzGAUiXEKCVTe5SlVTITmhi+D795HpNQ0xbYebtxgGe05oROjCC3n9fRhcMk+wDJcF",
	"1CXgCPga7mR+cKEbNIAhVMICuIbDIizxmGVUFqD+zICv1pD+EuqvDXBmjMWA6RrO2UOKaeQFBOZz+8I0",
	"oPcklsC9gObmcw9AVzwC/m7lhcTU99mqDdQoeDhYsIO8hwVoB5hCDKF/74T53GOm068k9YNRH/tg8pb5",
	"gUjWCUOEmI4ZnRM/wZaaDKNZ0cZiYjh3fVeNRcqoAC0bplkYgtB/hoxKMDSN0zQmIZaE0aM/BKPqtzXM",
	"v3CYB8fB/ztaC50j81Uc5fBu8jHMiBGIkJNUgQuO7ZAoASHwAhRZfKRfKbunZ5wz/mRTOUlJ2zTyMRHo",
	"Qc1e644Krtv3+Ful5wlFbPYHhBLJJZaICMRBZpxChAhFOI5RiAUIxOZojkmccRCHwShIOUuBS2I23q7+",
	"+FvAAUdXNF5Z7NWpIP/FjKo27EQJ1/rMTvV/MxAIU6QFcD7T+vhG7NM569xG1fBWTUCLZi7kFECjYc54",
	"gmVwHERYwoEkCQSjuiQgUaOAiPFQQBzuiCCGAqp8aBhFFEK5vC23TOIY0SyZAVdY0W0N8pb4DhDcAUc8",
	"o2jOOJJLIszerSfhjpMlCearTj4IMX1v9JSY5l0UIoEnhGIJ0VXvlXvxP2ZJUtqOyvezByJye6CO+l5o",
	"V6AcQvUR2/2ShEuUUfJnBihkVEiOCZUoZMlMrZYwikKcKZ6QS91iHhNDlJvS/g3EGq5YGhXg5QPEnZZI",
	"sjVnmFmHmKIZIKNnIXqBjNKxhWXG8TTeOiP1GHf7jNVNbGtF+k+Fj9995KdmoYkjjq/mwfE/N2exEiF/",
	"HwXwkMaMGLZt63xm2umJrG1mcc2ZUq4QNdmcXhpLcHyPOXSNeWGa2TETIkJt1WTcLKGzf6WDBcRBsIyH",
	"MFbTzNIuMDfl5lOJJXQrCM6Y/NpjY29MOzs3MWNJZ5/pjCVFh5w0uoi4ingBIYfu6U11s2IwiWUmehGa",
	"6jI1zR/NbXdZTIHjGYmJpfg2KJ+c5isz9QbB3nMNt5CkscZ4K3e2Kr9pDxyt+fzZKsEaGT17ieRZ6X+i",
>>>>>>> 43449322 (review)
	"hOrWiK8S65lJrG7rYKAMu7E00C7LDP3URJn2XPVfRIJBeY1vaBbHeBZDhcow53hlrctbjqkgCrO3yk7q",
	"bbAKOy2gWaL25JLp6VKIglFwDRoJwSiYhkuIslj/qla8umV6S0fBhF5ztuAgRDAKTmaMS93olFFwdreX",
	"HJwWdFXZpJ7Sq7LZ30bBAhQJxMM79pRVDR2Hiqs6iL4yo95TiY0NevWTAfWOAxmyCqCVFgoToUYNStS9",
	"xwmJCQgTkeslT8o9cpFJgU+okJiGMOagEdYfpL9zfWl5NFX9aEOqDdZQw/oL8fJ97IO7xAZOD9t8VuPy",
	"G39VN0Q4DBlXEgpJpi2yBbkDikycXPRyWQuxWx7xnAipvGN3zPbREKYRSvECDpHuHANdyCVKMiHRDFDM",
<<<<<<< HEAD
	"7pW/zRH8keFYQVBtp+RPUNZjMYve1qxnZblS8O67jm0oU5KuchOzVYVe6KBJl068ZlGvdqeE92o3ZlRi",
	"osgqwQsY2EW3/m0UREThUwcUTEA6wWmqdNDx16BhgP5TGQXlwXrNaBTYxXfszSiwu9mx2aMgx04X7iyL",
	"rS6N3DEUYYNczWSyEWs2cOXWWFIgQvfGg5vx3zhmWXTN2R2JzBmfNblOfp0q0+nPjCsT7cP4WptP4Rd9",
	"1Hf2IIFTHDfYUqNGOq45jTxcEgmhzIw50z9mOYO4bJm2bcwt7mWrGt3XMJxDlY2fm01jQf4Ez5mea+g7",
	"wJuM9Ao/1yk//3zpm3yo1B5EJ/LRkWKS5CGKwfJxSwhrxcuwbS4kYHWDI+Lf2piZg8PhRDNscnnkowH7",
	"d2AOb2ujl8RTk9/mW5MJLJy+a/woiYybu2U8fpSn+M2/7NzbtuhZB6B6BIu0bi7v2ZPhpQVTNv7ndxV7",
	"scF6EZvvnmN+V2ZDFTxPHD+3uztQ2j2JHHePOSOsRoXmFXLoZSxe4/ALXoBLSl1WWylEM6RjHiMc0sWE",
	"sAYNUnHlh/TN43lDujSwYpcdWwit3hBHwYWNbPTe2VFQ3YlNdmwU5AQygH5GQb6PA7Z5FBhM96eDUVCi",
	"ww2Itc3EVuzEMhq9W/X272rsqPqbM9GySfzrEqg5o805Ft1jgRTFsDvgEKHZCmHtvQajR9ol9A7HJFof",
	"zvaZiNPJzISCMsAHzKdF3vkOh+Zrcdi22VZqPseDIRv7HuiE2dOavsGRwZ5XMUAn6F6q10FBt5a7WAdk",
	"K0lY5oPXgMy/W2Okh1axrrFO1KttxjWWS7UZatlzEoNJnch9BIFs4LgXovMB92o+NAj83hagRcqOLUD3",
	"hNBHD70NwPUaOn2hBCSOsMS9YefR0QvbbyMj86JMwDUU15XzV3+eYkNiUQIR8btYhsyi65wXPN/9/puA",
	"O+Baqw48tbX9dGKQkGMsYcHM2WGdykHI0w5vTLVpdOQa97zFkOnPHVXE7JpNmg7C68TRdGDVj3Pq6+tk",
	"oX5SawMm8ZGPE2ertvmZLJZFuzqIC4hIlrQ0OGf3xdem6Fy1/X7dxML6rtkUKTz6AJouMp+AiUkINlN9",
	"8yG8sZQ043HLjjR8uAMumoVEy7ZtJADslu+Y74sDhOqom8fSRkHKIo+MHxZna0yrcZjUSTn4QtJU5xK8",
	"xyRuSypw3MRBqs908qqu/Hsfy/HGadpIRg2Oam8ysovbMRm5KUm1fXVzFHopi/UiNpDuN2VMFAL97OLq",
	"5l/BKPjl7Oby7DwYBSfX1+eT8cnt5OpS0c3k5uLXk5uzYBR8vPzl8urXyzbi2a94vsmocoFtns20KDfS",
	"dBJFOrcHx9fOzOY4FlAticnhIJED0t42KumhQzSZI0bjFVKwsE0aQkQgAXKEiET3JI7RDBBGgtCFhWJh",
	"RnluOJQBrOGGnNFzQtcgtVOccQ5UIj09O4D68DmYc5bo3z8HyqMUEnOpP+UjKk+z5nPaQfSwM6a8stJy",
	"MI3WE8Ec1jPRif1mSXoePKMIy4butSWW5m3A6OVoH9CdVNEQ5nMIJbkDpBZ5GIyChFAXi2+rxQoWRN31",
	"HHO2RgKCh5SDUKpMlybBA05SxVTBf6Gf0D/RP9HbpvhOaTkNkYQlIAoPxbKIQGtSRGLJsjhCkpPFAnge",
	"Wjp8RCxn+u7qwsd2mOJ49edA1hq1cWvjDGwSZW381Gjv/iJure43EHG9qhEmp52pKpNToRhkZljWpPFt",
	"bnYBjYblE3rCh17zrbsgrH8ekmlZy3BVwmTDpMg6b8RkDuEqVBJRNTKBICXlckaomzGnRTTWnyzZbeDo",
	"0S58gcqfswTTAw44Usi0VZlIGRvK4qMLFIHEJBYIz1hmJFWMlQzUi5BF8uihdztuAOeVm+WhL3C4JBSK",
	"wUfoY5oCH+ME4jEWgKSSJs5M1NhcAyu0SMio0W8/CDOt8oSKPIlivxQ6o6tMBqPgisIVv2AcdPTcbGSR",
	"m2r3flVs8EcKDymEBswlk0tCF0VzW0jbiID+qctFyvLgAolabYS/JC7JYkkObHqa1cuWDBvFy5qTNgGb",
	"2xD14rqIiELilgGTOdJiJVflBQxlFtheWs9SlhsYRr/o6jNlEhCnfrO7vuARQsbNNu2PIFNubNKiu8xf",
	"r3nn1Qbmu++YY6+HFptJ5q6lPqIetERdPYtCt023G9fJWDreQlHonum8R2nmusfQ4y8XUbtKD3bG3H9+",
	"sLvZmyQotpXcPQNx02f5/oXVM+Xrxl3JS7ZnfLmDj+Y5AHRPlNVQljk14TKw4M5Jxx9WJef0e2ydnDOH",
	"gVVrbjFBjwoUx+kbWoHmjPSIajCn/MFLLpXys/oFIii3CF06KU7I69pGKhl15lBFXdboJs45t69FE6I9",
	"ba8dH9bT5MbBtafJdI0iT4tPjyzNazOZg8Elslt3k9tlq3OzVl9921gL1OV8d0rN3dsXj3bWQ5Z6PG99",
	"rRPKBEQKcTFJiA0RsrTih6OJVA3FZ6oaXJ2e3J6g/PKsHIw9sSqDClkcQ2iFv6kzUDB0bC8HbgJ7JooG",
	"SDmXh+i9Utsm/PaZ/kcHHITSEn8v7h05tEcvI/QDZAf3IOTBjz/84z8Gmp1BPsRnKhn6XdkF5VKHoiM6",
	"+XWKOCyUf/yZelz2jqBHt8rdexCk3xR3ExTpN5e/WJCke1M2C5o8tkbbW57dctOW8RM1pVS9SwUOFXWc",
	"jerJMRP6nek1l7hXtdnvbCbGTMkVWYpoO1JXNTmHubxlNxn1lMLUD/s6bJk0508tBnPLhnFEqBEl+iQK",
	"pRlPmQBxaDfBX7L7NPowwQ/XmOM4hnjqnLrV5VOCH0iSJc4lR24Zp8nXM9GBdYiLUJTmwNc3H+WZqjm8",
	"4PjHN/r4xvzztlkJviqwp1BgSkuxTE5Bib0ONOujKkKRMI0NgnOy1WuByIRl9ASN7fyZujEbxtEM5owD",
	"moE+a8wkU3Qe4jheKfWgYJiZFuh/M+rBamXG8NdyvzLIK4O0Mkinqn0RDNPlRHgZqJL4MX13dRGMgk8f",
	"zy/Pbk7eTc4nt/8KRsHFyXme7jE9G9+c3aqfJtPx1eX7yYePNzYr5Obq6vaXifp49j/X51eT28bznmnX",
	"rQiVo/lq6MiGjUgOoH55KH645iT0nVhIvrrADydSQpL6XO9MwDRl0s5ReM68XXOq1sUXg3XTlhuvnmhN",
	"+jXfp/3NP6e1lwrKEMszOsUSK/HaOB310V5q0/T9jC4IhU/evEDlssy1PfyexL5gyi+U3dNPhGfC1yKf",
	"winhEErGSUe7lrGmmUi75qPM/1v8BfomOm5yI8du7+J4HrdwbH4Bh61Lq5U/d2SuA43GLM4Sz/kl0Mim",
	"C9U/zkkM1411LIp5S3UseQmLdT9NXLbJNpsTugCectJEGJdMwrFRHEQgymR+IuCNUrQtTTfwLc6/xRtl",
	"WebY2XGSpXOxWl3KrsOu/SjTrmCT9KNSeH0/KZBTCDNO5OoDZ+Z6vgFpj/lFXyiMWRYp2tWQ0EKDqqpe",
	"ExdNCD3X0sG1VIfdI1u9KX3gNePFFeMiv05dNzItNO8sCV089bXjt3jxqL2VeIGOkL5sojazL9Bcn3OH",
	"46wH96jutnHTdtsLb6rUWVya0VC2auwczw0O9rN7K0vrxRulK1wcAN60+RhnNFwOSz97VJp+jKUaxZvQ",
	"/kmJWzijIV+l0sfR64ZKNX5455HOLr8OElMOm/dIQpR48cTXmvildolkHFRUUG0vanE2vITrhi1s3v5G",
	"Mm88qtyPTK5UxtcvRxH9UVOCNVY9eyC/yziKiJCcDRr61HTRlszDoJ7vyYNh6hXwiefaJEK/PLLWKV1X",
	"avVMN0691Zk9qy/LB7JO6aV7yr7yFwC10804p5KqGpOchMOp5iLvp0u5wvxSjEdWeXkHqc16hgVMQ1Y6",
	"oTdhNOee5eJk29eOJCkOpe975wxPC6KvnGjo31FqNJRwA/b5IRdGEUjtOqJzQrMHpPmHzDJ7jlRe7eT0",
	"nHxpsGuUgzA5/d/zyS9naE4gjpC+o8LmxqjPRyDDIyYOOMSAhfExHpWLbo+t/W5MfUVN6tWhjDKoPADg",
	"h4b+nuDfmfYf9R+HCaGMoxzgP/qVPHivEentqZRl8o4dlpo8rLst9uDYt/NPXvxbv+m5NqmGbKHhOuuJ",
	"Ztcvp2gdm6/MPWe1FDiy4t2TbjTmRIdkG7JzPHk8P5PFsn/rc3bfv7Epp+7f/hIWMVmQWQw9+nTve0M9",
	"+PhmcjsZn5wHo+DnyYefg1FwcXY6+XgRjILzq1+DUXB59uF88mHy7vys6SZrbf4bvs3vbAs+XYxjrB3P",
	"k+uJCBxZE7w9fHP4Ji/AojglwXHw/w/fHL4NjPbWqzrCpatxFyZYVFRsKYsj+ADSuUB3VHom0CM31k2O",
	"3FfmfKfo1eb5U299m5tnZ/q2vmVp/4l8If0b52/y9W1evG/3W+VxtR/fvHm618zWiPO/qWaM3jnOYu/d",
	"bcUEj0qPrn1zMy4UoQy4vdiUeIsGgrtmokxxSn2AkO9YtHr6nbHP27lv4X2roeTttgauyGP7Ud9mlV/y",
	"qdMdfnpKqmh/425iLtFycIlEpgYrpvLfT78beRp4w3TGedq2PvVbT0nrpMOnol192gbrZ76KDBSMRAoh",
	"mROIimepHg5CFsEC6EFOmQczFq3sLevqbw3dEa5HX52HTb/1E7UnpadQh0ld9xnVLUldK+52Ir46pNdP",
	"b37aFXOsOXRyqg8bNB0+qQh1afAwd7bNA7QVOal+3gu92DdxDfL3Lpx3RHAfU3OxYFlI5JH0eRbHq+cn",
	"qZ8BXzw3dfHT2x93tSlnEi9QRCL6g0SaY55MX2neL1NiT8U0CtKsyejK5KsoeRUlr6LkLydKDC1WzY6B",
	"Vm53+OA1dPACQwc7DRv0CQlsNRywl1BAowREFO7tg9PPJhCw1RiAXwrrzwjHHHC0QqDbPbnfv4lnb736",
	"3KOPIAZzDFGm3VP9u6HeE9N+M6NKGVQejm9ff8lTfh7Us1tjYiu+usGrWd6hefqxTf09GvUvPIzzzEI4",
	"2wvfFPTQGbbZBU3sxL/ai2/V6lflMqfmT+2ZyJ6D2vyunBbDbE8S+Xjlxp1z46st8ioT9isTlDE/dx6/",
	"8dlwxQM5r0GMlxTEKNC2ozBGHDsXMrVGMxyC2oYiKF462m1EozRsU0zDfaxrz1ENO5WtxTXKz4Y1zCRv",
	"4FxM98RRDbvGDYTh0Vf7JGOf6IalZptdOtyIKkZ7ihjHzjS6xeA24wsWia0xhidFwMuNNLTIn++PQJTG",
	"kUsoLpUy6UoutbRFIJ6eZfesxXZCRXrrwFUe+3dqPIrsu6DxPM9hTdWPdfVfyX4Tsree/CvZ74bsrSs7",
	"lO6VBSfK91n7LAb32utXp/YlObUu5nbn17oXj3f4tmXS2oaELN3yvlMPtzpyk5Nbehpg/46uO52tObu1",
	"9yOaKNOZyJbP8ytXpW8gO4++rv/p5QM7VD91eg4Wru6wL8oZdtG7VYe49DhMi1O8HYy8XO+4XXZ9n0TT",
	"7CRXKajNUd4XFW37rHCoDt0VHVoXu6y29u9vtKjRZ8Etz0ybf09lFtXnyB4XgngVKLsVKDZ48SpQXgXK",
	"c8lR2ESiWAelM6zzGtB5eQGdXYdyxCE6w+GyoEOJCRWV90na3/zsDAFtM/izj7BPR8DnuUR6thri6ZDe",
	"247q+OlxqAw14Z3egR2xYTWsyAthX1oYZ+vxm87AzWN3/GWHaZ5ZgGZ3kRlzR1CX3ukI12yfdnbhS+3D",
	"i+oMyDwbx2mvHtO2XaXhava7C7c8TZzlVRI8pSQoRVJeJcGrJNhNnKR3gETfP83vLI9nPA6OgyOckuDb",
	"b9/+LwAA//+wNhfM78IAAA==",
=======
	"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",
	"rNGP674AAA==",
=======
	"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",
	"4Dg4wikJvv/+/f8CAAD//6CoSp9YvwAA",
>>>>>>> 4fcf9896 (extend asset vm info with root volume details of encryption and size)
=======
=======
>>>>>>> f6bb1ac3 (gen api)
	"H4sIAAAAAAAC/+x9W3PbOLLwX0Hx26rZ3aLtZL45D8dvjuxkVONbWU7mbG2mzkJkS8KEAjgAaFuTyn8/",
	"BYCgwAt4kS3JzvjNFhuNW9/RDXwNIrZMGQUqRXD8NUgxx0uQwPV/WAiQ41P1J6HBcZBiuQjCgOIlBMfF",
	"1zDg8EdGOMTBseQZhIGIFrDEqplcpQpUSE7oPPj2LTStJhGm7XhziGG4Z4TGhM69mNffh+ElsyWW0aLA",
	"ugAcA1/jHc8OLjRAAxpCJcyBazwsxhKPWEZlgeqPDPhqjelvkf7agGfKWAKYrvGcPaSYxl5EYD63T0wj",
	"ek8SCdyLaGY+90B0xWPg71ZeTEx9n67aUIXBw8GcHeQtLELbwQQSiPxrJ8znHiOdfCGpH4362Gcnb5kf",
	"iWSdOESE6YjRGfETbAlkGM2KNhYTw7nrmwIWKaMCtGyYZFEEQv8ZMSrB0DRO04REWBJGj34XjKrf1jj/",
	"xmEWHAf/72gtdI7MV3GU47vJ+zA9xiAiTlKFLji2XaIlCIHnoMjiI/1C2T0945zxJxvKSUrahpH3iUB3",
	"atZaN1R43bbHXystTyhi098hkkgusEREIA4y4xRiRCjCSYIiLEAgNkMzTJKMgzgMwiDlLAUuiVl4O/vj",
	"rwEHHF/RZGV3r04F+S+mV7VgJ0q41kd2qv+bgkCYIi2A85HW+zdin85Y5zIqwFs1AC2auZATAL0NM8aX",
	"WAbHQYwlHEiyhCCsSwISNwqIBA9FxOGOCGIooMqHhlFEIZTLy3LLJE4QzZZT4GpXNKzZvAW+AwR3wBHP",
	"KJoxjuSCCLN260G4/WTLJearTj6IMH1v9JSY5E3URgJfEoolxFe9Z+7d/xFbLkvLUfl+9kBEbg/Ut77X",
	"titUDqH6iO1+QaIFyij5IwMUMSokx4RKFLHlVM2WMIoinCmekAsNMUuIIcpNaf8GEo1XLIwK8PIB4g4k",
	"kmzNGWbUEaZoCsjoWYhfIKN0LGGZcTzAW2ekHv1un7G6iW2tSP+t9uM3H/mpUWjiSJKrWXD8781ZrETI",
	"38IAHtKEEcO2bY3PDJweyNpmFtecKeUKcZPN6aWxJU7uMYeuPi8MmO1zSUSkrZqMmyl0tq80sIg4CJbx",
	"CEZqmFnaheamDD6RWEK3guCMyS89FvbGwNmxiSlbdraZTNmyaJCTRhcRVzdeQMShe3gTDVZ0JrHMRC9C",
	"U00mBvzR3HaXJRQ4npKEWIpvw/LJAV+ZoTcI9p5zuIVlmugdb+XOVuU36bFHaz5/tkqwRkbPXiJ5ZvpX",
	"lFDdGvFVYj0zidVtHQyUYTeWBtplmaGfmijTnqv+i0gwW17jG5olCZ4mUKEyzDleWevylmMqiNrZW2Un",
	"9TZYhR0W0Gyp1uSS6eFSiIMwuAa9CUEYTKIFxFmif1UzXt0yvaRhMKbXnM05CBGEwcmUcamBThkFZ3V7",
	"ycFJQVeVReopvSqL/S0M5qBIIBnesKesamg4VFzVUfSVGfWWSmxs0KqfDKg3HMiQVQSttFCYCDVqUKLu",
	"PV6ShIAwEble8qTcIheZFPiYColpBCMOesP6o/Q3rk8tj6aqH21ItcEaaph/IV6+j3Vwp9jA6VGbz2pc",
	"fuOvakCEo4hxJaGQZNoim5M7oMjEyUUvl7UQu+Uez4mQyjt2+2zvDWEaoxTP4RDpxgnQuVygZSYkmgJK",
	"2L3ytzmCPzKcKAwKdkL+BGU9FqPobc16ZpYrBe+669iGMiXpKjcxW1XohQ6adOnEaxb3gjsl3MD9FgYx",
	"Ucut/X0TL17iNFUq4vhrYOE60ISB7bhjXGGQT6RrmpYaV5eGRc3i2XhQ84puRMUNBLw16hWI0L2R62ak",
<<<<<<< HEAD
	"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",
	"/r8AAA==",
>>>>>>> 6a36bd20 (review)
<<<<<<< HEAD
>>>>>>> 43449322 (review)
=======
=======
	"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",
	"kuDbb9/+LwAA//9ta0ihG8AAAA==",
>>>>>>> 79cc430a (add unknown state to encrypted volume)
>>>>>>> 88c0dce4 (add unknown state to encrypted volume)
=======
	"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",
	"j2c8CY6DI5yS4Ntv3/4vAAD//4bRtVwmwAAA",
>>>>>>> f6bb1ac3 (gen api)
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
