// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID, params GetScanConfigsScanConfigIDParams) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get scan results according to the given filters
	// (GET /scanResults)
	GetScanResults(ctx echo.Context, params GetScanResultsParams) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scanResults)
	PostScanResults(ctx echo.Context) error
	// Get a scan result.
	// (GET /scanResults/{scanResultID})
	GetScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID, params GetScanResultsScanResultIDParams) error
	// Patch a scan result
	// (PATCH /scanResults/{scanResultID})
	PatchScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Update a scan result.
	// (PUT /scanResults/{scanResultID})
	PutScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsScanConfigIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID, params)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResults(ctx, params)
	return err
}

// PostScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanResults(ctx)
	return err
}

// GetScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsScanResultIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResultsScanResultID(ctx, scanResultID, params)
	return err
}

// PatchScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanResultsScanResultID(ctx, scanResultID)
	return err
}

// PutScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanResultsScanResultID(ctx, scanResultID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scanResults", wrapper.GetScanResults)
	router.POST(baseURL+"/scanResults", wrapper.PostScanResults)
	router.GET(baseURL+"/scanResults/:scanResultID", wrapper.GetScanResultsScanResultID)
	router.PATCH(baseURL+"/scanResults/:scanResultID", wrapper.PatchScanResultsScanResultID)
	router.PUT(baseURL+"/scanResults/:scanResultID", wrapper.PutScanResultsScanResultID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0/8HAAD//75uT24zdgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
