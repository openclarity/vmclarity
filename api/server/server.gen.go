// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all available scopes
	// (GET /discovery/scopes)
	GetDiscoveryScopes(ctx echo.Context, params GetDiscoveryScopesParams) error
	// Set all available scopes
	// (PUT /discovery/scopes)
	PutDiscoveryScopes(ctx echo.Context) error
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID, params GetScanConfigsScanConfigIDParams) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get scan results according to the given filters
	// (GET /scanResults)
	GetScanResults(ctx echo.Context, params GetScanResultsParams) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scanResults)
	PostScanResults(ctx echo.Context) error
	// Get a scan result.
	// (GET /scanResults/{scanResultID})
	GetScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID, params GetScanResultsScanResultIDParams) error
	// Patch a scan result
	// (PATCH /scanResults/{scanResultID})
	PatchScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Update a scan result.
	// (PUT /scanResults/{scanResultID})
	PutScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID, params GetTargetsTargetIDParams) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDiscoveryScopes converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiscoveryScopes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiscoveryScopesParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDiscoveryScopes(ctx, params)
	return err
}

// PutDiscoveryScopes converts echo context to params.
func (w *ServerInterfaceWrapper) PutDiscoveryScopes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDiscoveryScopes(ctx)
	return err
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsScanConfigIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID, params)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResults(ctx, params)
	return err
}

// PostScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanResults(ctx)
	return err
}

// GetScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsScanResultIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResultsScanResultID(ctx, scanResultID, params)
	return err
}

// PatchScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanResultsScanResultID(ctx, scanResultID)
	return err
}

// PutScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanResultsScanResultID(ctx, scanResultID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID, params)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/discovery/scopes", wrapper.GetDiscoveryScopes)
	router.PUT(baseURL+"/discovery/scopes", wrapper.PutDiscoveryScopes)
	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scanResults", wrapper.GetScanResults)
	router.POST(baseURL+"/scanResults", wrapper.PostScanResults)
	router.GET(baseURL+"/scanResults/:scanResultID", wrapper.GetScanResultsScanResultID)
	router.PATCH(baseURL+"/scanResults/:scanResultID", wrapper.PatchScanResultsScanResultID)
	router.PUT(baseURL+"/scanResults/:scanResultID", wrapper.PutScanResultsScanResultID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
