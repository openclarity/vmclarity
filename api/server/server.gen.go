// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get scan results for a specified target
	// (GET /targets/{targetID}/scanResults)
	GetTargetsTargetIDScanResults(ctx echo.Context, targetID TargetID, params GetTargetsTargetIDScanResultsParams) error
	// Create scan result for a specified target
	// (POST /targets/{targetID}/scanResults)
	PostTargetsTargetIDScanResults(ctx echo.Context, targetID TargetID) error
	// Report a specific scan result for a specific target
	// (GET /targets/{targetID}/scanResults/{scanID})
	GetTargetsTargetIDScanResultsScanID(ctx echo.Context, targetID TargetID, scanID ScanID, params GetTargetsTargetIDScanResultsScanIDParams) error
	// Update scan results.
	// (PUT /targets/{targetID}/scanResults/{scanID})
	PutTargetsTargetIDScanResultsScanID(ctx echo.Context, targetID TargetID, scanID ScanID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDScanResultsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetIDScanResults(ctx, targetID, params)
	return err
}

// PostTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargetsTargetIDScanResults(ctx, targetID)
	return err
}

// GetTargetsTargetIDScanResultsScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetIDScanResultsScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDScanResultsScanIDParams
	// ------------- Optional query parameter "scanType" -------------

	err = runtime.BindQueryParameter("form", true, false, "scanType", ctx.QueryParams(), &params.ScanType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanType: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetIDScanResultsScanID(ctx, targetID, scanID, params)
	return err
}

// PutTargetsTargetIDScanResultsScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetIDScanResultsScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetIDScanResultsScanID(ctx, targetID, scanID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID/scanResults", wrapper.GetTargetsTargetIDScanResults)
	router.POST(baseURL+"/targets/:targetID/scanResults", wrapper.PostTargetsTargetIDScanResults)
	router.GET(baseURL+"/targets/:targetID/scanResults/:scanID", wrapper.GetTargetsTargetIDScanResultsScanID)
	router.PUT(baseURL+"/targets/:targetID/scanResults/:scanID", wrapper.PutTargetsTargetIDScanResultsScanID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AwAA//9sYC3Z5SoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
