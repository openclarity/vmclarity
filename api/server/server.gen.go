// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all available scopes
	// (GET /discovery/scopes)
	GetDiscoveryScopes(ctx echo.Context, params GetDiscoveryScopesParams) error
	// Set all available scopes
	// (PUT /discovery/scopes)
	PutDiscoveryScopes(ctx echo.Context) error
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get scan results according to the given filters
	// (GET /scanResults)
	GetScanResults(ctx echo.Context, params GetScanResultsParams) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scanResults)
	PostScanResults(ctx echo.Context) error
	// Get a scan result.
	// (GET /scanResults/{scanResultID})
	GetScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID, params GetScanResultsScanResultIDParams) error
	// Patch a scan result
	// (PATCH /scanResults/{scanResultID})
	PatchScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Update a scan result.
	// (PUT /scanResults/{scanResultID})
	PutScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDiscoveryScopes converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiscoveryScopes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiscoveryScopesParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDiscoveryScopes(ctx, params)
	return err
}

// PutDiscoveryScopes converts echo context to params.
func (w *ServerInterfaceWrapper) PutDiscoveryScopes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDiscoveryScopes(ctx)
	return err
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResults(ctx, params)
	return err
}

// PostScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanResults(ctx)
	return err
}

// GetScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsScanResultIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResultsScanResultID(ctx, scanResultID, params)
	return err
}

// PatchScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanResultsScanResultID(ctx, scanResultID)
	return err
}

// PutScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanResultsScanResultID(ctx, scanResultID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/discovery/scopes", wrapper.GetDiscoveryScopes)
	router.PUT(baseURL+"/discovery/scopes", wrapper.PutDiscoveryScopes)
	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scanResults", wrapper.GetScanResults)
	router.POST(baseURL+"/scanResults", wrapper.PostScanResults)
	router.GET(baseURL+"/scanResults/:scanResultID", wrapper.GetScanResultsScanResultID)
	router.PATCH(baseURL+"/scanResults/:scanResultID", wrapper.PatchScanResultsScanResultID)
	router.PUT(baseURL+"/scanResults/:scanResultID", wrapper.PutScanResultsScanResultID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"z/8fAAD//6Bd6k8deQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
