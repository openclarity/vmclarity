// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all available scopes
	// (GET /discovery/scopes)
	GetDiscoveryScopes(ctx echo.Context, params GetDiscoveryScopesParams) error
	// Set all available scopes
	// (PUT /discovery/scopes)
	PutDiscoveryScopes(ctx echo.Context) error
	// Get all findings.
	// (GET /findings)
	GetFindings(ctx echo.Context, params GetFindingsParams) error
	// Create a finding
	// (POST /findings)
	PostFindings(ctx echo.Context) error
	// Delete a finding.
	// (DELETE /findings/{findingID})
	DeleteFindingsFindingID(ctx echo.Context, findingID FindingID) error
	// Get the details for a finding.
	// (GET /findings/{findingID})
	GetFindingsFindingID(ctx echo.Context, findingID FindingID, params GetFindingsFindingIDParams) error
	// Patch a finding.
	// (PATCH /findings/{findingID})
	PatchFindingsFindingID(ctx echo.Context, findingID FindingID) error
	// Update a finding.
	// (PUT /findings/{findingID})
	PutFindingsFindingID(ctx echo.Context, findingID FindingID) error
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID, params GetScanConfigsScanConfigIDParams) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get scan results according to the given filters
	// (GET /scanResults)
	GetScanResults(ctx echo.Context, params GetScanResultsParams) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scanResults)
	PostScanResults(ctx echo.Context) error
	// Get a scan result.
	// (GET /scanResults/{scanResultID})
	GetScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID, params GetScanResultsScanResultIDParams) error
	// Patch a scan result
	// (PATCH /scanResults/{scanResultID})
	PatchScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Update a scan result.
	// (PUT /scanResults/{scanResultID})
	PutScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Get all scans. Each scan contains details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID, params GetScansScanIDParams) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID, params GetTargetsTargetIDParams) error
	// Update target.
	// (PATCH /targets/{targetID})
	PatchTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDiscoveryScopes converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiscoveryScopes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiscoveryScopesParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", true, false, "$orderby", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDiscoveryScopes(ctx, params)
	return err
}

// PutDiscoveryScopes converts echo context to params.
func (w *ServerInterfaceWrapper) PutDiscoveryScopes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDiscoveryScopes(ctx)
	return err
}

// GetFindings converts echo context to params.
func (w *ServerInterfaceWrapper) GetFindings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFindingsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", true, false, "$orderby", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFindings(ctx, params)
	return err
}

// PostFindings converts echo context to params.
func (w *ServerInterfaceWrapper) PostFindings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFindings(ctx)
	return err
}

// DeleteFindingsFindingID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFindingsFindingID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "findingID" -------------
	var findingID FindingID

	err = runtime.BindStyledParameterWithLocation("simple", false, "findingID", runtime.ParamLocationPath, ctx.Param("findingID"), &findingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter findingID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFindingsFindingID(ctx, findingID)
	return err
}

// GetFindingsFindingID converts echo context to params.
func (w *ServerInterfaceWrapper) GetFindingsFindingID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "findingID" -------------
	var findingID FindingID

	err = runtime.BindStyledParameterWithLocation("simple", false, "findingID", runtime.ParamLocationPath, ctx.Param("findingID"), &findingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter findingID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFindingsFindingIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFindingsFindingID(ctx, findingID, params)
	return err
}

// PatchFindingsFindingID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchFindingsFindingID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "findingID" -------------
	var findingID FindingID

	err = runtime.BindStyledParameterWithLocation("simple", false, "findingID", runtime.ParamLocationPath, ctx.Param("findingID"), &findingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter findingID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchFindingsFindingID(ctx, findingID)
	return err
}

// PutFindingsFindingID converts echo context to params.
func (w *ServerInterfaceWrapper) PutFindingsFindingID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "findingID" -------------
	var findingID FindingID

	err = runtime.BindStyledParameterWithLocation("simple", false, "findingID", runtime.ParamLocationPath, ctx.Param("findingID"), &findingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter findingID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutFindingsFindingID(ctx, findingID)
	return err
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", true, false, "$orderby", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsScanConfigIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID, params)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", true, false, "$orderby", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResults(ctx, params)
	return err
}

// PostScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanResults(ctx)
	return err
}

// GetScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsScanResultIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResultsScanResultID(ctx, scanResultID, params)
	return err
}

// PatchScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanResultsScanResultID(ctx, scanResultID)
	return err
}

// PutScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanResultsScanResultID(ctx, scanResultID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", true, false, "$orderby", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansScanIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID, params)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", true, false, "$orderby", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID, params)
	return err
}

// PatchTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/discovery/scopes", wrapper.GetDiscoveryScopes)
	router.PUT(baseURL+"/discovery/scopes", wrapper.PutDiscoveryScopes)
	router.GET(baseURL+"/findings", wrapper.GetFindings)
	router.POST(baseURL+"/findings", wrapper.PostFindings)
	router.DELETE(baseURL+"/findings/:findingID", wrapper.DeleteFindingsFindingID)
	router.GET(baseURL+"/findings/:findingID", wrapper.GetFindingsFindingID)
	router.PATCH(baseURL+"/findings/:findingID", wrapper.PatchFindingsFindingID)
	router.PUT(baseURL+"/findings/:findingID", wrapper.PutFindingsFindingID)
	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scanResults", wrapper.GetScanResults)
	router.POST(baseURL+"/scanResults", wrapper.PostScanResults)
	router.GET(baseURL+"/scanResults/:scanResultID", wrapper.GetScanResultsScanResultID)
	router.PATCH(baseURL+"/scanResults/:scanResultID", wrapper.PatchScanResultsScanResultID)
	router.PUT(baseURL+"/scanResults/:scanResultID", wrapper.PutScanResultsScanResultID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PATCH(baseURL+"/targets/:targetID", wrapper.PatchTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
