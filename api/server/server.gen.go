// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get scan results according to the given filters
	// (GET /scanResults)
	GetScanResults(ctx echo.Context, params GetScanResultsParams) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scanResults)
	PostScanResults(ctx echo.Context) error
	// Get a scan result.
	// (GET /scanResults/{scanResultID})
	GetScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID, params GetScanResultsScanResultIDParams) error
	// Patch a scan result
	// (PATCH /scanResults/{scanResultID})
	PatchScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Update a scan result.
	// (PUT /scanResults/{scanResultID})
	PutScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResults(ctx, params)
	return err
}

// PostScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanResults(ctx)
	return err
}

// GetScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsScanResultIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResultsScanResultID(ctx, scanResultID, params)
	return err
}

// PatchScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanResultsScanResultID(ctx, scanResultID)
	return err
}

// PutScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanResultsScanResultID(ctx, scanResultID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scanResults", wrapper.GetScanResults)
	router.POST(baseURL+"/scanResults", wrapper.PostScanResults)
	router.GET(baseURL+"/scanResults/:scanResultID", wrapper.GetScanResultsScanResultID)
	router.PATCH(baseURL+"/scanResults/:scanResultID", wrapper.PatchScanResultsScanResultID)
	router.PUT(baseURL+"/scanResults/:scanResultID", wrapper.PutScanResultsScanResultID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"eAHPUE7g8+fn/w8AAP//xe3zmOV0AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
