// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get scan results for a specified target
	// (GET /targets/{targetID}/scanResults)
	GetTargetsTargetIDScanResults(ctx echo.Context, targetID TargetID, params GetTargetsTargetIDScanResultsParams) error
	// Create scan result for a specified target
	// (POST /targets/{targetID}/scanResults)
	PostTargetsTargetIDScanResults(ctx echo.Context, targetID TargetID) error
	// Report a specific scan result for a specific target
	// (GET /targets/{targetID}/scanResults/{scanID})
	GetTargetsTargetIDScanResultsScanID(ctx echo.Context, targetID TargetID, scanID ScanID) error
	// Update scan results.
	// (PUT /targets/{targetID}/scanResults/{scanID})
	PutTargetsTargetIDScanResultsScanID(ctx echo.Context, targetID TargetID, scanID ScanID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDScanResultsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetIDScanResults(ctx, targetID, params)
	return err
}

// PostTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargetsTargetIDScanResults(ctx, targetID)
	return err
}

// GetTargetsTargetIDScanResultsScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetIDScanResultsScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetIDScanResultsScanID(ctx, targetID, scanID)
	return err
}

// PutTargetsTargetIDScanResultsScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetIDScanResultsScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetIDScanResultsScanID(ctx, targetID, scanID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID/scanResults", wrapper.GetTargetsTargetIDScanResults)
	router.POST(baseURL+"/targets/:targetID/scanResults", wrapper.PostTargetsTargetIDScanResults)
	router.GET(baseURL+"/targets/:targetID/scanResults/:scanID", wrapper.GetTargetsTargetIDScanResultsScanID)
	router.PUT(baseURL+"/targets/:targetID/scanResults/:scanID", wrapper.PutTargetsTargetIDScanResultsScanID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
