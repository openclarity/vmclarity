// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID, params GetScanConfigsScanConfigIDParams) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get scan results according to the given filters
	// (GET /scanResults)
	GetScanResults(ctx echo.Context, params GetScanResultsParams) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scanResults)
	PostScanResults(ctx echo.Context) error
	// Get a scan result.
	// (GET /scanResults/{scanResultID})
	GetScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID, params GetScanResultsScanResultIDParams) error
	// Patch a scan result
	// (PATCH /scanResults/{scanResultID})
	PatchScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Update a scan result.
	// (PUT /scanResults/{scanResultID})
	PutScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsScanConfigIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID, params)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResults(ctx, params)
	return err
}

// PostScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanResults(ctx)
	return err
}

// GetScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsScanResultIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResultsScanResultID(ctx, scanResultID, params)
	return err
}

// PatchScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanResultsScanResultID(ctx, scanResultID)
	return err
}

// PutScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanResultsScanResultID(ctx, scanResultID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scanResults", wrapper.GetScanResults)
	router.POST(baseURL+"/scanResults", wrapper.PostScanResults)
	router.GET(baseURL+"/scanResults/:scanResultID", wrapper.GetScanResultsScanResultID)
	router.PATCH(baseURL+"/scanResults/:scanResultID", wrapper.PatchScanResultsScanResultID)
	router.PUT(baseURL+"/scanResults/:scanResultID", wrapper.PutScanResultsScanResultID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
