// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get scan results for a specified target
	// (GET /targets/{targetID}/scanresults)
	GetTargetsTargetIDScanresults(ctx echo.Context, targetID TargetID, params GetTargetsTargetIDScanresultsParams) error
	// Create scan result for a specified target
	// (POST /targets/{targetID}/scanresults)
	PostTargetsTargetIDScanresults(ctx echo.Context, targetID TargetID) error
	// Report a specific scan result for a specific target
	// (GET /targets/{targetID}/scanresults/{scanID})
	GetTargetsTargetIDScanresultsScanID(ctx echo.Context, targetID TargetID, scanID ScanID, params GetTargetsTargetIDScanresultsScanIDParams) error
	// Update scan results.
	// (PUT /targets/{targetID}/scanresults/{scanID})
	PutTargetsTargetIDScanresultsScanID(ctx echo.Context, targetID TargetID, scanID ScanID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetIDScanresults converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetIDScanresults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDScanresultsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetIDScanresults(ctx, targetID, params)
	return err
}

// PostTargetsTargetIDScanresults converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargetsTargetIDScanresults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargetsTargetIDScanresults(ctx, targetID)
	return err
}

// GetTargetsTargetIDScanresultsScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetIDScanresultsScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDScanresultsScanIDParams
	// ------------- Optional query parameter "scanType" -------------

	err = runtime.BindQueryParameter("form", true, false, "scanType", ctx.QueryParams(), &params.ScanType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanType: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetIDScanresultsScanID(ctx, targetID, scanID, params)
	return err
}

// PutTargetsTargetIDScanresultsScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetIDScanresultsScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetIDScanresultsScanID(ctx, targetID, scanID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID/scanresults", wrapper.GetTargetsTargetIDScanresults)
	router.POST(baseURL+"/targets/:targetID/scanresults", wrapper.PostTargetsTargetIDScanresults)
	router.GET(baseURL+"/targets/:targetID/scanresults/:scanID", wrapper.GetTargetsTargetIDScanresultsScanID)
	router.PUT(baseURL+"/targets/:targetID/scanresults/:scanID", wrapper.PutTargetsTargetIDScanresultsScanID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"H3dJRnVd/D8AAP//V/OBkbEqAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
