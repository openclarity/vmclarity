// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all available scopes
	// (GET /discovery/scopes)
	GetDiscoveryScopes(ctx echo.Context, params GetDiscoveryScopesParams) error
	// Set all available scopes
	// (PUT /discovery/scopes)
	PutDiscoveryScopes(ctx echo.Context) error
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID, params GetScanConfigsScanConfigIDParams) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get scan results according to the given filters
	// (GET /scanResults)
	GetScanResults(ctx echo.Context, params GetScanResultsParams) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scanResults)
	PostScanResults(ctx echo.Context) error
	// Get a scan result.
	// (GET /scanResults/{scanResultID})
	GetScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID, params GetScanResultsScanResultIDParams) error
	// Patch a scan result
	// (PATCH /scanResults/{scanResultID})
	PatchScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Update a scan result.
	// (PUT /scanResults/{scanResultID})
	PutScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID, params GetTargetsTargetIDParams) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDiscoveryScopes converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiscoveryScopes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiscoveryScopesParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDiscoveryScopes(ctx, params)
	return err
}

// PutDiscoveryScopes converts echo context to params.
func (w *ServerInterfaceWrapper) PutDiscoveryScopes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDiscoveryScopes(ctx)
	return err
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsScanConfigIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID, params)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResults(ctx, params)
	return err
}

// PostScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanResults(ctx)
	return err
}

// GetScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsScanResultIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResultsScanResultID(ctx, scanResultID, params)
	return err
}

// PatchScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanResultsScanResultID(ctx, scanResultID)
	return err
}

// PutScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanResultsScanResultID(ctx, scanResultID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID, params)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/discovery/scopes", wrapper.GetDiscoveryScopes)
	router.PUT(baseURL+"/discovery/scopes", wrapper.PutDiscoveryScopes)
	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scanResults", wrapper.GetScanResults)
	router.POST(baseURL+"/scanResults", wrapper.PostScanResults)
	router.GET(baseURL+"/scanResults/:scanResultID", wrapper.GetScanResultsScanResultID)
	router.PATCH(baseURL+"/scanResults/:scanResultID", wrapper.PatchScanResultsScanResultID)
	router.PUT(baseURL+"/scanResults/:scanResultID", wrapper.PutScanResultsScanResultID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
