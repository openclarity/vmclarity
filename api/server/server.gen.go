// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get a specific scan result for a specific target
	// (GET /scans/{scanID}/targets/{targetID}/scanResults)
	GetScansScanIDTargetsTargetIDScanResults(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// Patch a scan result for a specific target for a specific scan
	// (PATCH /scans/{scanID}/targets/{targetID}/scanResults)
	PatchScansScanIDTargetsTargetIDScanResults(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scans/{scanID}/targets/{targetID}/scanResults)
	PostScansScanIDTargetsTargetIDScanResults(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// Update scan results.
	// (PUT /scans/{scanID}/targets/{targetID}/scanResults)
	PutScansScanIDTargetsTargetIDScanResults(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// The status of a specific scan for a specific target
	// (GET /scans/{scanID}/targets/{targetID}/scanStatus)
	GetScansScanIDTargetsTargetIDScanStatus(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// Patch a scan status for a specifictarget for a specific scan
	// (PATCH /scans/{scanID}/targets/{targetID}/scanStatus)
	PatchScansScanIDTargetsTargetIDScanStatus(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// Create a scan status for a specific target for a specific scan
	// (POST /scans/{scanID}/targets/{targetID}/scanStatus)
	PostScansScanIDTargetsTargetIDScanStatus(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// Update the status of a specific scan for a specific target
	// (PUT /scans/{scanID}/targets/{targetID}/scanStatus)
	PutScansScanIDTargetsTargetIDScanStatus(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetScansScanIDTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanIDTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanIDTargetsTargetIDScanResults(ctx, scanID, targetID)
	return err
}

// PatchScansScanIDTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanIDTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanIDTargetsTargetIDScanResults(ctx, scanID, targetID)
	return err
}

// PostScansScanIDTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScansScanIDTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScansScanIDTargetsTargetIDScanResults(ctx, scanID, targetID)
	return err
}

// PutScansScanIDTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanIDTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanIDTargetsTargetIDScanResults(ctx, scanID, targetID)
	return err
}

// GetScansScanIDTargetsTargetIDScanStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanIDTargetsTargetIDScanStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanIDTargetsTargetIDScanStatus(ctx, scanID, targetID)
	return err
}

// PatchScansScanIDTargetsTargetIDScanStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanIDTargetsTargetIDScanStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanIDTargetsTargetIDScanStatus(ctx, scanID, targetID)
	return err
}

// PostScansScanIDTargetsTargetIDScanStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostScansScanIDTargetsTargetIDScanStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScansScanIDTargetsTargetIDScanStatus(ctx, scanID, targetID)
	return err
}

// PutScansScanIDTargetsTargetIDScanStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanIDTargetsTargetIDScanStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanIDTargetsTargetIDScanStatus(ctx, scanID, targetID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/scans/:scanID/targets/:targetID/scanResults", wrapper.GetScansScanIDTargetsTargetIDScanResults)
	router.PATCH(baseURL+"/scans/:scanID/targets/:targetID/scanResults", wrapper.PatchScansScanIDTargetsTargetIDScanResults)
	router.POST(baseURL+"/scans/:scanID/targets/:targetID/scanResults", wrapper.PostScansScanIDTargetsTargetIDScanResults)
	router.PUT(baseURL+"/scans/:scanID/targets/:targetID/scanResults", wrapper.PutScansScanIDTargetsTargetIDScanResults)
	router.GET(baseURL+"/scans/:scanID/targets/:targetID/scanStatus", wrapper.GetScansScanIDTargetsTargetIDScanStatus)
	router.PATCH(baseURL+"/scans/:scanID/targets/:targetID/scanStatus", wrapper.PatchScansScanIDTargetsTargetIDScanStatus)
	router.POST(baseURL+"/scans/:scanID/targets/:targetID/scanStatus", wrapper.PostScansScanIDTargetsTargetIDScanStatus)
	router.PUT(baseURL+"/scans/:scanID/targets/:targetID/scanStatus", wrapper.PutScansScanIDTargetsTargetIDScanStatus)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
