// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get a specific scan result for a specific target
	// (GET /scans/{scanID}/targets/{targetID}/scanResults)
	GetScansScanIDTargetsTargetIDScanResults(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// Patch a scan result for a specific target for a specific scan
	// (PATCH /scans/{scanID}/targets/{targetID}/scanResults)
	PatchScansScanIDTargetsTargetIDScanResults(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scans/{scanID}/targets/{targetID}/scanResults)
	PostScansScanIDTargetsTargetIDScanResults(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// Update scan results.
	// (PUT /scans/{scanID}/targets/{targetID}/scanResults)
	PutScansScanIDTargetsTargetIDScanResults(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// The status of a specific scan for a specific target
	// (GET /scans/{scanID}/targets/{targetID}/scanStatus)
	GetScansScanIDTargetsTargetIDScanStatus(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// Patch a scan status for a specifictarget for a specific scan
	// (PATCH /scans/{scanID}/targets/{targetID}/scanStatus)
	PatchScansScanIDTargetsTargetIDScanStatus(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// Create a scan status for a specific target for a specific scan
	// (POST /scans/{scanID}/targets/{targetID}/scanStatus)
	PostScansScanIDTargetsTargetIDScanStatus(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// Update the status of a specific scan for a specific target
	// (PUT /scans/{scanID}/targets/{targetID}/scanStatus)
	PutScansScanIDTargetsTargetIDScanStatus(ctx echo.Context, scanID ScanID, targetID TargetID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetScansScanIDTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanIDTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanIDTargetsTargetIDScanResults(ctx, scanID, targetID)
	return err
}

// PatchScansScanIDTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanIDTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanIDTargetsTargetIDScanResults(ctx, scanID, targetID)
	return err
}

// PostScansScanIDTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScansScanIDTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScansScanIDTargetsTargetIDScanResults(ctx, scanID, targetID)
	return err
}

// PutScansScanIDTargetsTargetIDScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanIDTargetsTargetIDScanResults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanIDTargetsTargetIDScanResults(ctx, scanID, targetID)
	return err
}

// GetScansScanIDTargetsTargetIDScanStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanIDTargetsTargetIDScanStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanIDTargetsTargetIDScanStatus(ctx, scanID, targetID)
	return err
}

// PatchScansScanIDTargetsTargetIDScanStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanIDTargetsTargetIDScanStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanIDTargetsTargetIDScanStatus(ctx, scanID, targetID)
	return err
}

// PostScansScanIDTargetsTargetIDScanStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostScansScanIDTargetsTargetIDScanStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScansScanIDTargetsTargetIDScanStatus(ctx, scanID, targetID)
	return err
}

// PutScansScanIDTargetsTargetIDScanStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanIDTargetsTargetIDScanStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanIDTargetsTargetIDScanStatus(ctx, scanID, targetID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/scans/:scanID/targets/:targetID/scanResults", wrapper.GetScansScanIDTargetsTargetIDScanResults)
	router.PATCH(baseURL+"/scans/:scanID/targets/:targetID/scanResults", wrapper.PatchScansScanIDTargetsTargetIDScanResults)
	router.POST(baseURL+"/scans/:scanID/targets/:targetID/scanResults", wrapper.PostScansScanIDTargetsTargetIDScanResults)
	router.PUT(baseURL+"/scans/:scanID/targets/:targetID/scanResults", wrapper.PutScansScanIDTargetsTargetIDScanResults)
	router.GET(baseURL+"/scans/:scanID/targets/:targetID/scanStatus", wrapper.GetScansScanIDTargetsTargetIDScanStatus)
	router.PATCH(baseURL+"/scans/:scanID/targets/:targetID/scanStatus", wrapper.PatchScansScanIDTargetsTargetIDScanStatus)
	router.POST(baseURL+"/scans/:scanID/targets/:targetID/scanStatus", wrapper.PostScansScanIDTargetsTargetIDScanStatus)
	router.PUT(baseURL+"/scans/:scanID/targets/:targetID/scanStatus", wrapper.PutScansScanIDTargetsTargetIDScanStatus)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Y/m/AAAA//8fpqOpjmMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
