// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all available scopes
	// (GET /discovery/scopes)
	GetDiscoveryScopes(ctx echo.Context, params GetDiscoveryScopesParams) error
	// Set all available scopes
	// (PUT /discovery/scopes)
	PutDiscoveryScopes(ctx echo.Context) error
	// Get all scan configs.
	// (GET /scanConfigs)
	GetScanConfigs(ctx echo.Context, params GetScanConfigsParams) error
	// Create a scan config
	// (POST /scanConfigs)
	PostScanConfigs(ctx echo.Context) error
	// Delete a scan config.
	// (DELETE /scanConfigs/{scanConfigID})
	DeleteScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get the details for a scan config.
	// (GET /scanConfigs/{scanConfigID})
	GetScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID, params GetScanConfigsScanConfigIDParams) error
	// Patch a scan config.
	// (PATCH /scanConfigs/{scanConfigID})
	PatchScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Update a scan config.
	// (PUT /scanConfigs/{scanConfigID})
	PutScanConfigsScanConfigID(ctx echo.Context, scanConfigID ScanConfigID) error
	// Get scan results according to the given filters
	// (GET /scanResults)
	GetScanResults(ctx echo.Context, params GetScanResultsParams) error
	// Create a scan result for a specific target for a specific scan
	// (POST /scanResults)
	PostScanResults(ctx echo.Context) error
	// Get a scan result.
	// (GET /scanResults/{scanResultID})
	GetScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID, params GetScanResultsScanResultIDParams) error
	// Patch a scan result
	// (PATCH /scanResults/{scanResultID})
	PatchScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Update a scan result.
	// (PUT /scanResults/{scanResultID})
	PutScanResultsScanResultID(ctx echo.Context, scanResultID ScanResultID) error
	// Get all scans. Each scan contaians details about a multi-target scheduled scan.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a multi-target scheduled scan
	// (POST /scans)
	PostScans(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scans/{scanID})
	DeleteScansScanID(ctx echo.Context, scanID ScanID) error
	// Get the details for a given multi-target scheduled scan.
	// (GET /scans/{scanID})
	GetScansScanID(ctx echo.Context, scanID ScanID) error
	// Patch a scan.
	// (PATCH /scans/{scanID})
	PatchScansScanID(ctx echo.Context, scanID ScanID) error
	// Update a scan.
	// (PUT /scans/{scanID})
	PutScansScanID(ctx echo.Context, scanID ScanID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Delete target.
	// (DELETE /targets/{targetID})
	DeleteTargetsTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /targets/{targetID})
	GetTargetsTargetID(ctx echo.Context, targetID TargetID, params GetTargetsTargetIDParams) error
	// Update target.
	// (PUT /targets/{targetID})
	PutTargetsTargetID(ctx echo.Context, targetID TargetID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDiscoveryScopes converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiscoveryScopes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiscoveryScopesParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDiscoveryScopes(ctx, params)
	return err
}

// PutDiscoveryScopes converts echo context to params.
func (w *ServerInterfaceWrapper) PutDiscoveryScopes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDiscoveryScopes(ctx)
	return err
}

// GetScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigs(ctx, params)
	return err
}

// PostScanConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanConfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanConfigs(ctx)
	return err
}

// DeleteScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanConfigsScanConfigIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanConfigsScanConfigID(ctx, scanConfigID, params)
	return err
}

// PatchScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// PutScanConfigsScanConfigID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanConfigsScanConfigID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanConfigID" -------------
	var scanConfigID ScanConfigID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanConfigID", runtime.ParamLocationPath, ctx.Param("scanConfigID"), &scanConfigID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanConfigID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanConfigsScanConfigID(ctx, scanConfigID)
	return err
}

// GetScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResults(ctx, params)
	return err
}

// PostScanResults converts echo context to params.
func (w *ServerInterfaceWrapper) PostScanResults(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScanResults(ctx)
	return err
}

// GetScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScanResultsScanResultIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScanResultsScanResultID(ctx, scanResultID, params)
	return err
}

// PatchScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScanResultsScanResultID(ctx, scanResultID)
	return err
}

// PutScanResultsScanResultID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScanResultsScanResultID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanResultID" -------------
	var scanResultID ScanResultID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanResultID", runtime.ParamLocationPath, ctx.Param("scanResultID"), &scanResultID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanResultID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScanResultsScanResultID(ctx, scanResultID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// PostScans converts echo context to params.
func (w *ServerInterfaceWrapper) PostScans(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScans(ctx)
	return err
}

// DeleteScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScansScanID(ctx, scanID)
	return err
}

// GetScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScansScanID(ctx, scanID)
	return err
}

// PatchScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchScansScanID(ctx, scanID)
	return err
}

// PutScansScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutScansScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutScansScanID(ctx, scanID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", true, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", true, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// DeleteTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetsTargetID(ctx, targetID)
	return err
}

// GetTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", true, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetID(ctx, targetID, params)
	return err
}

// PutTargetsTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetID(ctx, targetID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/discovery/scopes", wrapper.GetDiscoveryScopes)
	router.PUT(baseURL+"/discovery/scopes", wrapper.PutDiscoveryScopes)
	router.GET(baseURL+"/scanConfigs", wrapper.GetScanConfigs)
	router.POST(baseURL+"/scanConfigs", wrapper.PostScanConfigs)
	router.DELETE(baseURL+"/scanConfigs/:scanConfigID", wrapper.DeleteScanConfigsScanConfigID)
	router.GET(baseURL+"/scanConfigs/:scanConfigID", wrapper.GetScanConfigsScanConfigID)
	router.PATCH(baseURL+"/scanConfigs/:scanConfigID", wrapper.PatchScanConfigsScanConfigID)
	router.PUT(baseURL+"/scanConfigs/:scanConfigID", wrapper.PutScanConfigsScanConfigID)
	router.GET(baseURL+"/scanResults", wrapper.GetScanResults)
	router.POST(baseURL+"/scanResults", wrapper.PostScanResults)
	router.GET(baseURL+"/scanResults/:scanResultID", wrapper.GetScanResultsScanResultID)
	router.PATCH(baseURL+"/scanResults/:scanResultID", wrapper.PatchScanResultsScanResultID)
	router.PUT(baseURL+"/scanResults/:scanResultID", wrapper.PutScanResultsScanResultID)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.PostScans)
	router.DELETE(baseURL+"/scans/:scanID", wrapper.DeleteScansScanID)
	router.GET(baseURL+"/scans/:scanID", wrapper.GetScansScanID)
	router.PATCH(baseURL+"/scans/:scanID", wrapper.PatchScansScanID)
	router.PUT(baseURL+"/scans/:scanID", wrapper.PutScansScanID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.DELETE(baseURL+"/targets/:targetID", wrapper.DeleteTargetsTargetID)
	router.GET(baseURL+"/targets/:targetID", wrapper.GetTargetsTargetID)
	router.PUT(baseURL+"/targets/:targetID", wrapper.PutTargetsTargetID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"OU/hBTxDGYHPX57/PwAA//9HU5J7dHsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
