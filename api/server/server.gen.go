// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/vmclarity/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete target.
	// (DELETE /target/{targetID})
	DeleteTargetTargetID(ctx echo.Context, targetID TargetID) error
	// Get target.
	// (GET /target/{targetID})
	GetTargetTargetID(ctx echo.Context, targetID TargetID) error
	// Update target.
	// (PUT /target/{targetID})
	PutTargetTargetID(ctx echo.Context, targetID TargetID) error
	// Get targets
	// (GET /targets)
	GetTargets(ctx echo.Context, params GetTargetsParams) error
	// Create target
	// (POST /targets)
	PostTargets(ctx echo.Context) error
	// Get scan results for a specified target
	// (GET /targets/{targetID}/scanresults)
	GetTargetsTargetIDScanresults(ctx echo.Context, targetID TargetID, params GetTargetsTargetIDScanresultsParams) error
	// Create scan result for a specified target
	// (POST /targets/{targetID}/scanresults)
	PostTargetsTargetIDScanresults(ctx echo.Context, targetID TargetID) error
	// Report a specific scan result for a specific target
	// (GET /targets/{targetID}/scanresults/{scanID})
	GetTargetsTargetIDScanresultsScanID(ctx echo.Context, targetID TargetID, scanID ScanID, params GetTargetsTargetIDScanresultsScanIDParams) error
	// Update scan results.
	// (PUT /targets/{targetID}/scanresults/{scanID})
	PutTargetsTargetIDScanresultsScanID(ctx echo.Context, targetID TargetID, scanID ScanID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteTargetTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTargetTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTargetTargetID(ctx, targetID)
	return err
}

// GetTargetTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetTargetID(ctx, targetID)
	return err
}

// PutTargetTargetID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetTargetID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetTargetID(ctx, targetID)
	return err
}

// GetTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargets(ctx, params)
	return err
}

// PostTargets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargets(ctx)
	return err
}

// GetTargetsTargetIDScanresults converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetIDScanresults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDScanresultsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetIDScanresults(ctx, targetID, params)
	return err
}

// PostTargetsTargetIDScanresults converts echo context to params.
func (w *ServerInterfaceWrapper) PostTargetsTargetIDScanresults(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTargetsTargetIDScanresults(ctx, targetID)
	return err
}

// GetTargetsTargetIDScanresultsScanID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsTargetIDScanresultsScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsTargetIDScanresultsScanIDParams
	// ------------- Optional query parameter "scanType" -------------

	err = runtime.BindQueryParameter("form", true, false, "scanType", ctx.QueryParams(), &params.ScanType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanType: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsTargetIDScanresultsScanID(ctx, targetID, scanID, params)
	return err
}

// PutTargetsTargetIDScanresultsScanID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTargetsTargetIDScanresultsScanID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "targetID" -------------
	var targetID TargetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "targetID", runtime.ParamLocationPath, ctx.Param("targetID"), &targetID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetID: %s", err))
	}

	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanID", runtime.ParamLocationPath, ctx.Param("scanID"), &scanID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTargetsTargetIDScanresultsScanID(ctx, targetID, scanID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/target/:targetID", wrapper.DeleteTargetTargetID)
	router.GET(baseURL+"/target/:targetID", wrapper.GetTargetTargetID)
	router.PUT(baseURL+"/target/:targetID", wrapper.PutTargetTargetID)
	router.GET(baseURL+"/targets", wrapper.GetTargets)
	router.POST(baseURL+"/targets", wrapper.PostTargets)
	router.GET(baseURL+"/targets/:targetID/scanresults", wrapper.GetTargetsTargetIDScanresults)
	router.POST(baseURL+"/targets/:targetID/scanresults", wrapper.PostTargetsTargetIDScanresults)
	router.GET(baseURL+"/targets/:targetID/scanresults/:scanID", wrapper.GetTargetsTargetIDScanresultsScanID)
	router.PUT(baseURL+"/targets/:targetID/scanresults/:scanID", wrapper.PutTargetsTargetIDScanresultsScanID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
