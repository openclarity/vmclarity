// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostInstancesMisconfigurationScanIDHandlerFunc turns a function with the right signature into a post instances misconfiguration scan ID handler
type PostInstancesMisconfigurationScanIDHandlerFunc func(PostInstancesMisconfigurationScanIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostInstancesMisconfigurationScanIDHandlerFunc) Handle(params PostInstancesMisconfigurationScanIDParams) middleware.Responder {
	return fn(params)
}

// PostInstancesMisconfigurationScanIDHandler interface for that can handle valid post instances misconfiguration scan ID params
type PostInstancesMisconfigurationScanIDHandler interface {
	Handle(PostInstancesMisconfigurationScanIDParams) middleware.Responder
}

// NewPostInstancesMisconfigurationScanID creates a new http.Handler for the post instances misconfiguration scan ID operation
func NewPostInstancesMisconfigurationScanID(ctx *middleware.Context, handler PostInstancesMisconfigurationScanIDHandler) *PostInstancesMisconfigurationScanID {
	return &PostInstancesMisconfigurationScanID{Context: ctx, Handler: handler}
}

/*
	PostInstancesMisconfigurationScanID swagger:route POST /instances/misconfigurationScan/{id} postInstancesMisconfigurationScanId

Report a misconfiguration scan for a specific instance
*/
type PostInstancesMisconfigurationScanID struct {
	Context *middleware.Context
	Handler PostInstancesMisconfigurationScanIDHandler
}

func (o *PostInstancesMisconfigurationScanID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostInstancesMisconfigurationScanIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
