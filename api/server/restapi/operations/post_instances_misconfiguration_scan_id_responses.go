// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openclarity/vmclarity/api/server/models"
)

// PostInstancesMisconfigurationScanIDCreatedCode is the HTTP code returned for type PostInstancesMisconfigurationScanIDCreated
const PostInstancesMisconfigurationScanIDCreatedCode int = 201

/*
PostInstancesMisconfigurationScanIDCreated Instance misconfiguration scan successfully reported.

swagger:response postInstancesMisconfigurationScanIdCreated
*/
type PostInstancesMisconfigurationScanIDCreated struct {
}

// NewPostInstancesMisconfigurationScanIDCreated creates PostInstancesMisconfigurationScanIDCreated with default headers values
func NewPostInstancesMisconfigurationScanIDCreated() *PostInstancesMisconfigurationScanIDCreated {

	return &PostInstancesMisconfigurationScanIDCreated{}
}

// WriteResponse to the client
func (o *PostInstancesMisconfigurationScanIDCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// PostInstancesMisconfigurationScanIDNotFoundCode is the HTTP code returned for type PostInstancesMisconfigurationScanIDNotFound
const PostInstancesMisconfigurationScanIDNotFoundCode int = 404

/*
PostInstancesMisconfigurationScanIDNotFound Instance not found.

swagger:response postInstancesMisconfigurationScanIdNotFound
*/
type PostInstancesMisconfigurationScanIDNotFound struct {
}

// NewPostInstancesMisconfigurationScanIDNotFound creates PostInstancesMisconfigurationScanIDNotFound with default headers values
func NewPostInstancesMisconfigurationScanIDNotFound() *PostInstancesMisconfigurationScanIDNotFound {

	return &PostInstancesMisconfigurationScanIDNotFound{}
}

// WriteResponse to the client
func (o *PostInstancesMisconfigurationScanIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*
PostInstancesMisconfigurationScanIDDefault unknown error

swagger:response postInstancesMisconfigurationScanIdDefault
*/
type PostInstancesMisconfigurationScanIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewPostInstancesMisconfigurationScanIDDefault creates PostInstancesMisconfigurationScanIDDefault with default headers values
func NewPostInstancesMisconfigurationScanIDDefault(code int) *PostInstancesMisconfigurationScanIDDefault {
	if code <= 0 {
		code = 500
	}

	return &PostInstancesMisconfigurationScanIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post instances misconfiguration scan ID default response
func (o *PostInstancesMisconfigurationScanIDDefault) WithStatusCode(code int) *PostInstancesMisconfigurationScanIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post instances misconfiguration scan ID default response
func (o *PostInstancesMisconfigurationScanIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post instances misconfiguration scan ID default response
func (o *PostInstancesMisconfigurationScanIDDefault) WithPayload(payload *models.APIResponse) *PostInstancesMisconfigurationScanIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post instances misconfiguration scan ID default response
func (o *PostInstancesMisconfigurationScanIDDefault) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostInstancesMisconfigurationScanIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
