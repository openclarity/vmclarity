// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewVMClarityAPIsAPI creates a new VMClarityAPIs instance
func NewVMClarityAPIsAPI(spec *loads.Document) *VMClarityAPIsAPI {
	return &VMClarityAPIsAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		DeleteInstancesIDHandler: DeleteInstancesIDHandlerFunc(func(params DeleteInstancesIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteInstancesID has not yet been implemented")
		}),
		GetInstancesHandler: GetInstancesHandlerFunc(func(params GetInstancesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetInstances has not yet been implemented")
		}),
		GetInstancesIDHandler: GetInstancesIDHandlerFunc(func(params GetInstancesIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetInstancesID has not yet been implemented")
		}),
		GetPackagesHandler: GetPackagesHandlerFunc(func(params GetPackagesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetPackages has not yet been implemented")
		}),
		GetPackagesIDHandler: GetPackagesIDHandlerFunc(func(params GetPackagesIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetPackagesID has not yet been implemented")
		}),
		GetVulnerabilitiesHandler: GetVulnerabilitiesHandlerFunc(func(params GetVulnerabilitiesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetVulnerabilities has not yet been implemented")
		}),
		GetVulnerabilitiesVulIDPkgIDHandler: GetVulnerabilitiesVulIDPkgIDHandlerFunc(func(params GetVulnerabilitiesVulIDPkgIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetVulnerabilitiesVulIDPkgID has not yet been implemented")
		}),
		PostInstancesHandler: PostInstancesHandlerFunc(func(params PostInstancesParams) middleware.Responder {
			return middleware.NotImplemented("operation PostInstances has not yet been implemented")
		}),
		PostInstancesContentAnalysisIDHandler: PostInstancesContentAnalysisIDHandlerFunc(func(params PostInstancesContentAnalysisIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PostInstancesContentAnalysisID has not yet been implemented")
		}),
		PostInstancesExploitScanIDHandler: PostInstancesExploitScanIDHandlerFunc(func(params PostInstancesExploitScanIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PostInstancesExploitScanID has not yet been implemented")
		}),
		PostInstancesMalewareScanIDHandler: PostInstancesMalewareScanIDHandlerFunc(func(params PostInstancesMalewareScanIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PostInstancesMalewareScanID has not yet been implemented")
		}),
		PostInstancesMisconfigurationScanIDHandler: PostInstancesMisconfigurationScanIDHandlerFunc(func(params PostInstancesMisconfigurationScanIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PostInstancesMisconfigurationScanID has not yet been implemented")
		}),
		PostInstancesRootkitScanIDHandler: PostInstancesRootkitScanIDHandlerFunc(func(params PostInstancesRootkitScanIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PostInstancesRootkitScanID has not yet been implemented")
		}),
		PostInstancesSecretScanIDHandler: PostInstancesSecretScanIDHandlerFunc(func(params PostInstancesSecretScanIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PostInstancesSecretScanID has not yet been implemented")
		}),
		PostInstancesVulnerabilityScanIDHandler: PostInstancesVulnerabilityScanIDHandlerFunc(func(params PostInstancesVulnerabilityScanIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PostInstancesVulnerabilityScanID has not yet been implemented")
		}),
		PutInstancesIDHandler: PutInstancesIDHandlerFunc(func(params PutInstancesIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PutInstancesID has not yet been implemented")
		}),
	}
}

/*VMClarityAPIsAPI the VM clarity a p is API */
type VMClarityAPIsAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// DeleteInstancesIDHandler sets the operation handler for the delete instances ID operation
	DeleteInstancesIDHandler DeleteInstancesIDHandler
	// GetInstancesHandler sets the operation handler for the get instances operation
	GetInstancesHandler GetInstancesHandler
	// GetInstancesIDHandler sets the operation handler for the get instances ID operation
	GetInstancesIDHandler GetInstancesIDHandler
	// GetPackagesHandler sets the operation handler for the get packages operation
	GetPackagesHandler GetPackagesHandler
	// GetPackagesIDHandler sets the operation handler for the get packages ID operation
	GetPackagesIDHandler GetPackagesIDHandler
	// GetVulnerabilitiesHandler sets the operation handler for the get vulnerabilities operation
	GetVulnerabilitiesHandler GetVulnerabilitiesHandler
	// GetVulnerabilitiesVulIDPkgIDHandler sets the operation handler for the get vulnerabilities vul ID pkg ID operation
	GetVulnerabilitiesVulIDPkgIDHandler GetVulnerabilitiesVulIDPkgIDHandler
	// PostInstancesHandler sets the operation handler for the post instances operation
	PostInstancesHandler PostInstancesHandler
	// PostInstancesContentAnalysisIDHandler sets the operation handler for the post instances content analysis ID operation
	PostInstancesContentAnalysisIDHandler PostInstancesContentAnalysisIDHandler
	// PostInstancesExploitScanIDHandler sets the operation handler for the post instances exploit scan ID operation
	PostInstancesExploitScanIDHandler PostInstancesExploitScanIDHandler
	// PostInstancesMalewareScanIDHandler sets the operation handler for the post instances maleware scan ID operation
	PostInstancesMalewareScanIDHandler PostInstancesMalewareScanIDHandler
	// PostInstancesMisconfigurationScanIDHandler sets the operation handler for the post instances misconfiguration scan ID operation
	PostInstancesMisconfigurationScanIDHandler PostInstancesMisconfigurationScanIDHandler
	// PostInstancesRootkitScanIDHandler sets the operation handler for the post instances rootkit scan ID operation
	PostInstancesRootkitScanIDHandler PostInstancesRootkitScanIDHandler
	// PostInstancesSecretScanIDHandler sets the operation handler for the post instances secret scan ID operation
	PostInstancesSecretScanIDHandler PostInstancesSecretScanIDHandler
	// PostInstancesVulnerabilityScanIDHandler sets the operation handler for the post instances vulnerability scan ID operation
	PostInstancesVulnerabilityScanIDHandler PostInstancesVulnerabilityScanIDHandler
	// PutInstancesIDHandler sets the operation handler for the put instances ID operation
	PutInstancesIDHandler PutInstancesIDHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *VMClarityAPIsAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *VMClarityAPIsAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *VMClarityAPIsAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *VMClarityAPIsAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *VMClarityAPIsAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *VMClarityAPIsAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *VMClarityAPIsAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *VMClarityAPIsAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *VMClarityAPIsAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the VMClarityAPIsAPI
func (o *VMClarityAPIsAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.DeleteInstancesIDHandler == nil {
		unregistered = append(unregistered, "DeleteInstancesIDHandler")
	}
	if o.GetInstancesHandler == nil {
		unregistered = append(unregistered, "GetInstancesHandler")
	}
	if o.GetInstancesIDHandler == nil {
		unregistered = append(unregistered, "GetInstancesIDHandler")
	}
	if o.GetPackagesHandler == nil {
		unregistered = append(unregistered, "GetPackagesHandler")
	}
	if o.GetPackagesIDHandler == nil {
		unregistered = append(unregistered, "GetPackagesIDHandler")
	}
	if o.GetVulnerabilitiesHandler == nil {
		unregistered = append(unregistered, "GetVulnerabilitiesHandler")
	}
	if o.GetVulnerabilitiesVulIDPkgIDHandler == nil {
		unregistered = append(unregistered, "GetVulnerabilitiesVulIDPkgIDHandler")
	}
	if o.PostInstancesHandler == nil {
		unregistered = append(unregistered, "PostInstancesHandler")
	}
	if o.PostInstancesContentAnalysisIDHandler == nil {
		unregistered = append(unregistered, "PostInstancesContentAnalysisIDHandler")
	}
	if o.PostInstancesExploitScanIDHandler == nil {
		unregistered = append(unregistered, "PostInstancesExploitScanIDHandler")
	}
	if o.PostInstancesMalewareScanIDHandler == nil {
		unregistered = append(unregistered, "PostInstancesMalewareScanIDHandler")
	}
	if o.PostInstancesMisconfigurationScanIDHandler == nil {
		unregistered = append(unregistered, "PostInstancesMisconfigurationScanIDHandler")
	}
	if o.PostInstancesRootkitScanIDHandler == nil {
		unregistered = append(unregistered, "PostInstancesRootkitScanIDHandler")
	}
	if o.PostInstancesSecretScanIDHandler == nil {
		unregistered = append(unregistered, "PostInstancesSecretScanIDHandler")
	}
	if o.PostInstancesVulnerabilityScanIDHandler == nil {
		unregistered = append(unregistered, "PostInstancesVulnerabilityScanIDHandler")
	}
	if o.PutInstancesIDHandler == nil {
		unregistered = append(unregistered, "PutInstancesIDHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *VMClarityAPIsAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *VMClarityAPIsAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *VMClarityAPIsAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *VMClarityAPIsAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *VMClarityAPIsAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *VMClarityAPIsAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the VM clarity a p is API
func (o *VMClarityAPIsAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *VMClarityAPIsAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/instances/{id}"] = NewDeleteInstancesID(o.context, o.DeleteInstancesIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/instances"] = NewGetInstances(o.context, o.GetInstancesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/instances/{id}"] = NewGetInstancesID(o.context, o.GetInstancesIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packages"] = NewGetPackages(o.context, o.GetPackagesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/packages/{id}"] = NewGetPackagesID(o.context, o.GetPackagesIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vulnerabilities"] = NewGetVulnerabilities(o.context, o.GetVulnerabilitiesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vulnerabilities/{vul_id}/{pkg_id}"] = NewGetVulnerabilitiesVulIDPkgID(o.context, o.GetVulnerabilitiesVulIDPkgIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instances"] = NewPostInstances(o.context, o.PostInstancesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instances/contentAnalysis/{id}"] = NewPostInstancesContentAnalysisID(o.context, o.PostInstancesContentAnalysisIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instances/exploitScan/{id}"] = NewPostInstancesExploitScanID(o.context, o.PostInstancesExploitScanIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instances/malewareScan/{id}"] = NewPostInstancesMalewareScanID(o.context, o.PostInstancesMalewareScanIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instances/misconfigurationScan/{id}"] = NewPostInstancesMisconfigurationScanID(o.context, o.PostInstancesMisconfigurationScanIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instances/rootkitScan/{id}"] = NewPostInstancesRootkitScanID(o.context, o.PostInstancesRootkitScanIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instances/secretScan/{id}"] = NewPostInstancesSecretScanID(o.context, o.PostInstancesSecretScanIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instances/vulnerabilityScan/{id}"] = NewPostInstancesVulnerabilityScanID(o.context, o.PostInstancesVulnerabilityScanIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/instances/{id}"] = NewPutInstancesID(o.context, o.PutInstancesIDHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *VMClarityAPIsAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *VMClarityAPIsAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *VMClarityAPIsAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *VMClarityAPIsAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *VMClarityAPIsAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
