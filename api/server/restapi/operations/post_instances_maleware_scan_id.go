// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostInstancesMalewareScanIDHandlerFunc turns a function with the right signature into a post instances maleware scan ID handler
type PostInstancesMalewareScanIDHandlerFunc func(PostInstancesMalewareScanIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostInstancesMalewareScanIDHandlerFunc) Handle(params PostInstancesMalewareScanIDParams) middleware.Responder {
	return fn(params)
}

// PostInstancesMalewareScanIDHandler interface for that can handle valid post instances maleware scan ID params
type PostInstancesMalewareScanIDHandler interface {
	Handle(PostInstancesMalewareScanIDParams) middleware.Responder
}

// NewPostInstancesMalewareScanID creates a new http.Handler for the post instances maleware scan ID operation
func NewPostInstancesMalewareScanID(ctx *middleware.Context, handler PostInstancesMalewareScanIDHandler) *PostInstancesMalewareScanID {
	return &PostInstancesMalewareScanID{Context: ctx, Handler: handler}
}

/*
	PostInstancesMalewareScanID swagger:route POST /instances/malewareScan/{id} postInstancesMalewareScanId

Report a malware scan for a specific instance
*/
type PostInstancesMalewareScanID struct {
	Context *middleware.Context
	Handler PostInstancesMalewareScanIDHandler
}

func (o *PostInstancesMalewareScanID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostInstancesMalewareScanIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
