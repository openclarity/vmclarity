// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPackagesIDHandlerFunc turns a function with the right signature into a get packages ID handler
type GetPackagesIDHandlerFunc func(GetPackagesIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPackagesIDHandlerFunc) Handle(params GetPackagesIDParams) middleware.Responder {
	return fn(params)
}

// GetPackagesIDHandler interface for that can handle valid get packages ID params
type GetPackagesIDHandler interface {
	Handle(GetPackagesIDParams) middleware.Responder
}

// NewGetPackagesID creates a new http.Handler for the get packages ID operation
func NewGetPackagesID(ctx *middleware.Context, handler GetPackagesIDHandler) *GetPackagesID {
	return &GetPackagesID{Context: ctx, Handler: handler}
}

/*
	GetPackagesID swagger:route GET /packages/{id} getPackagesId

Get Package.
*/
type GetPackagesID struct {
	Context *middleware.Context
	Handler GetPackagesIDHandler
}

func (o *GetPackagesID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPackagesIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
