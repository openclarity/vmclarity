// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostInstancesExploitScanIDHandlerFunc turns a function with the right signature into a post instances exploit scan ID handler
type PostInstancesExploitScanIDHandlerFunc func(PostInstancesExploitScanIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostInstancesExploitScanIDHandlerFunc) Handle(params PostInstancesExploitScanIDParams) middleware.Responder {
	return fn(params)
}

// PostInstancesExploitScanIDHandler interface for that can handle valid post instances exploit scan ID params
type PostInstancesExploitScanIDHandler interface {
	Handle(PostInstancesExploitScanIDParams) middleware.Responder
}

// NewPostInstancesExploitScanID creates a new http.Handler for the post instances exploit scan ID operation
func NewPostInstancesExploitScanID(ctx *middleware.Context, handler PostInstancesExploitScanIDHandler) *PostInstancesExploitScanID {
	return &PostInstancesExploitScanID{Context: ctx, Handler: handler}
}

/*
	PostInstancesExploitScanID swagger:route POST /instances/exploitScan/{id} postInstancesExploitScanId

Report an exploit scan for a specific instance
*/
type PostInstancesExploitScanID struct {
	Context *middleware.Context
	Handler PostInstancesExploitScanIDHandler
}

func (o *PostInstancesExploitScanID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostInstancesExploitScanIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
