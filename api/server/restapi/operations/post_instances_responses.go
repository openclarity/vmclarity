// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openclarity/vmclarity/api/server/models"
)

// PostInstancesCreatedCode is the HTTP code returned for type PostInstancesCreated
const PostInstancesCreatedCode int = 201

/*
PostInstancesCreated New instance was created.

swagger:response postInstancesCreated
*/
type PostInstancesCreated struct {

	/*
	  In: Body
	*/
	Payload *models.InstanceInfo `json:"body,omitempty"`
}

// NewPostInstancesCreated creates PostInstancesCreated with default headers values
func NewPostInstancesCreated() *PostInstancesCreated {

	return &PostInstancesCreated{}
}

// WithPayload adds the payload to the post instances created response
func (o *PostInstancesCreated) WithPayload(payload *models.InstanceInfo) *PostInstancesCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post instances created response
func (o *PostInstancesCreated) SetPayload(payload *models.InstanceInfo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostInstancesCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostInstancesConflictCode is the HTTP code returned for type PostInstancesConflict
const PostInstancesConflictCode int = 409

/*
PostInstancesConflict Instance already exist.

swagger:response postInstancesConflict
*/
type PostInstancesConflict struct {

	/*
	  In: Body
	*/
	Payload *models.InstanceInfo `json:"body,omitempty"`
}

// NewPostInstancesConflict creates PostInstancesConflict with default headers values
func NewPostInstancesConflict() *PostInstancesConflict {

	return &PostInstancesConflict{}
}

// WithPayload adds the payload to the post instances conflict response
func (o *PostInstancesConflict) WithPayload(payload *models.InstanceInfo) *PostInstancesConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post instances conflict response
func (o *PostInstancesConflict) SetPayload(payload *models.InstanceInfo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostInstancesConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
PostInstancesDefault unknown error

swagger:response postInstancesDefault
*/
type PostInstancesDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewPostInstancesDefault creates PostInstancesDefault with default headers values
func NewPostInstancesDefault(code int) *PostInstancesDefault {
	if code <= 0 {
		code = 500
	}

	return &PostInstancesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post instances default response
func (o *PostInstancesDefault) WithStatusCode(code int) *PostInstancesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post instances default response
func (o *PostInstancesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post instances default response
func (o *PostInstancesDefault) WithPayload(payload *models.APIResponse) *PostInstancesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post instances default response
func (o *PostInstancesDefault) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostInstancesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
