// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PackageVulnerabilityScan package vulnerability scan
//
// swagger:model PackageVulnerabilityScan
type PackageVulnerabilityScan struct {

	// cvss
	Cvss *CVSS `json:"cvss,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// fix version
	FixVersion string `json:"fixVersion,omitempty"`

	// links
	Links []string `json:"links"`

	// package
	Package *PackageInfo `json:"package,omitempty"`

	// severity
	Severity VulnerabilitySeverity `json:"severity,omitempty"`

	// vulnerability name
	VulnerabilityName string `json:"vulnerabilityName,omitempty"`
}

// Validate validates this package vulnerability scan
func (m *PackageVulnerabilityScan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCvss(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageVulnerabilityScan) validateCvss(formats strfmt.Registry) error {
	if swag.IsZero(m.Cvss) { // not required
		return nil
	}

	if m.Cvss != nil {
		if err := m.Cvss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss")
			}
			return err
		}
	}

	return nil
}

func (m *PackageVulnerabilityScan) validatePackage(formats strfmt.Registry) error {
	if swag.IsZero(m.Package) { // not required
		return nil
	}

	if m.Package != nil {
		if err := m.Package.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("package")
			}
			return err
		}
	}

	return nil
}

func (m *PackageVulnerabilityScan) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	if err := m.Severity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("severity")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("severity")
		}
		return err
	}

	return nil
}

// ContextValidate validate this package vulnerability scan based on the context it is used
func (m *PackageVulnerabilityScan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCvss(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageVulnerabilityScan) contextValidateCvss(ctx context.Context, formats strfmt.Registry) error {

	if m.Cvss != nil {
		if err := m.Cvss.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss")
			}
			return err
		}
	}

	return nil
}

func (m *PackageVulnerabilityScan) contextValidatePackage(ctx context.Context, formats strfmt.Registry) error {

	if m.Package != nil {
		if err := m.Package.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("package")
			}
			return err
		}
	}

	return nil
}

func (m *PackageVulnerabilityScan) contextValidateSeverity(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Severity.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("severity")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("severity")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageVulnerabilityScan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageVulnerabilityScan) UnmarshalBinary(b []byte) error {
	var res PackageVulnerabilityScan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
