// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InstancesSortKey instances sort key
//
// swagger:model InstancesSortKey
type InstancesSortKey string

func NewInstancesSortKey(value InstancesSortKey) *InstancesSortKey {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InstancesSortKey.
func (m InstancesSortKey) Pointer() *InstancesSortKey {
	return &m
}

const (

	// InstancesSortKeyInstanceName captures enum value "instanceName"
	InstancesSortKeyInstanceName InstancesSortKey = "instanceName"

	// InstancesSortKeyInstanceProvider captures enum value "instanceProvider"
	InstancesSortKeyInstanceProvider InstancesSortKey = "instanceProvider"

	// InstancesSortKeyInstanceRegion captures enum value "instanceRegion"
	InstancesSortKeyInstanceRegion InstancesSortKey = "instanceRegion"

	// InstancesSortKeyInstanceID captures enum value "instanceID"
	InstancesSortKeyInstanceID InstancesSortKey = "instanceID"
)

// for schema
var instancesSortKeyEnum []interface{}

func init() {
	var res []InstancesSortKey
	if err := json.Unmarshal([]byte(`["instanceName","instanceProvider","instanceRegion","instanceID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instancesSortKeyEnum = append(instancesSortKeyEnum, v)
	}
}

func (m InstancesSortKey) validateInstancesSortKeyEnum(path, location string, value InstancesSortKey) error {
	if err := validate.EnumCase(path, location, value, instancesSortKeyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this instances sort key
func (m InstancesSortKey) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInstancesSortKeyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this instances sort key based on context it is used
func (m InstancesSortKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
