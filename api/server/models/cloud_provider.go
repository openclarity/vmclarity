// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CloudProvider cloud provider
//
// swagger:model CloudProvider
type CloudProvider string

func NewCloudProvider(value CloudProvider) *CloudProvider {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CloudProvider.
func (m CloudProvider) Pointer() *CloudProvider {
	return &m
}

const (

	// CloudProviderAWS captures enum value "AWS"
	CloudProviderAWS CloudProvider = "AWS"
)

// for schema
var cloudProviderEnum []interface{}

func init() {
	var res []CloudProvider
	if err := json.Unmarshal([]byte(`["AWS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudProviderEnum = append(cloudProviderEnum, v)
	}
}

func (m CloudProvider) validateCloudProviderEnum(path, location string, value CloudProvider) error {
	if err := validate.EnumCase(path, location, value, cloudProviderEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cloud provider
func (m CloudProvider) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCloudProviderEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cloud provider based on context it is used
func (m CloudProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
