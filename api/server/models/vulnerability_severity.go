// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VulnerabilitySeverity vulnerability severity
//
// swagger:model VulnerabilitySeverity
type VulnerabilitySeverity string

func NewVulnerabilitySeverity(value VulnerabilitySeverity) *VulnerabilitySeverity {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VulnerabilitySeverity.
func (m VulnerabilitySeverity) Pointer() *VulnerabilitySeverity {
	return &m
}

const (

	// VulnerabilitySeverityCRITICAL captures enum value "CRITICAL"
	VulnerabilitySeverityCRITICAL VulnerabilitySeverity = "CRITICAL"

	// VulnerabilitySeverityHIGH captures enum value "HIGH"
	VulnerabilitySeverityHIGH VulnerabilitySeverity = "HIGH"

	// VulnerabilitySeverityMEDIUM captures enum value "MEDIUM"
	VulnerabilitySeverityMEDIUM VulnerabilitySeverity = "MEDIUM"

	// VulnerabilitySeverityLOW captures enum value "LOW"
	VulnerabilitySeverityLOW VulnerabilitySeverity = "LOW"

	// VulnerabilitySeverityNEGLIGIBLE captures enum value "NEGLIGIBLE"
	VulnerabilitySeverityNEGLIGIBLE VulnerabilitySeverity = "NEGLIGIBLE"
)

// for schema
var vulnerabilitySeverityEnum []interface{}

func init() {
	var res []VulnerabilitySeverity
	if err := json.Unmarshal([]byte(`["CRITICAL","HIGH","MEDIUM","LOW","NEGLIGIBLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vulnerabilitySeverityEnum = append(vulnerabilitySeverityEnum, v)
	}
}

func (m VulnerabilitySeverity) validateVulnerabilitySeverityEnum(path, location string, value VulnerabilitySeverity) error {
	if err := validate.EnumCase(path, location, value, vulnerabilitySeverityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this vulnerability severity
func (m VulnerabilitySeverity) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVulnerabilitySeverityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this vulnerability severity based on context it is used
func (m VulnerabilitySeverity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
