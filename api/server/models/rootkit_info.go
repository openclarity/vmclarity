// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RootkitInfo rootkit info
//
// swagger:model RootkitInfo
type RootkitInfo struct {

	// id
	ID string `json:"id,omitempty"`

	// Path of the file that contains rootkit
	Path string `json:"path,omitempty"`

	// rootkit name
	RootkitName string `json:"rootkitName,omitempty"`

	// rootkit type
	RootkitType RootkitType `json:"rootkitType,omitempty"`
}

// Validate validates this rootkit info
func (m *RootkitInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRootkitType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RootkitInfo) validateRootkitType(formats strfmt.Registry) error {
	if swag.IsZero(m.RootkitType) { // not required
		return nil
	}

	if err := m.RootkitType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rootkitType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rootkitType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this rootkit info based on the context it is used
func (m *RootkitInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRootkitType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RootkitInfo) contextValidateRootkitType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RootkitType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rootkitType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rootkitType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RootkitInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RootkitInfo) UnmarshalBinary(b []byte) error {
	var res RootkitInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
