// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package types

import (
	"time"
)

// Defines values for ConfigOutputFormat.
const (
	VMClarityJSON ConfigOutputFormat = "VMClarityJSON"
)

// Defines values for MisconfigurationSeverity.
const (
	MisconfigurationHighSeverity   MisconfigurationSeverity = "MisconfigurationHighSeverity"
	MisconfigurationInfoSeverity   MisconfigurationSeverity = "MisconfigurationInfoSeverity"
	MisconfigurationLowSeverity    MisconfigurationSeverity = "MisconfigurationLowSeverity"
	MisconfigurationMediumSeverity MisconfigurationSeverity = "MisconfigurationMediumSeverity"
)

// Defines values for StatusState.
const (
	Done     StatusState = "Done"
	Failed   StatusState = "Failed"
	NotReady StatusState = "NotReady"
	Ready    StatusState = "Ready"
	Running  StatusState = "Running"
)

// Config Describes a scanner config.
type Config struct {
	// File The file with the configuration required by the scanner plugin. This is a path on the filesystem to the config file.
	File string `json:"file" validate:"required"`

	// InputDir The directory which should be scanned by the scanner plugin.
	InputDir string `json:"inputDir" validate:"required"`

	// OutputDir The directory where the scanner plugin should store it's findings.
	OutputDir string `json:"outputDir" validate:"required"`

	// OutputFormat The format in which the scanner plugin should store it's findings.
	OutputFormat ConfigOutputFormat `json:"outputFormat" validate:"required,oneof=VMClarityJSON"`

	// TimeoutSeconds The maximum time in seconds that a scan started from this config
	// should run for before being automatically aborted.
	TimeoutSeconds int `json:"timeoutSeconds" validate:"required,gt=0"`
}

// ConfigOutputFormat The format in which the scanner plugin should store it's findings.
type ConfigOutputFormat string

// ErrorResponse An object that is returned for a failed API request.
type ErrorResponse struct {
	Message *string `json:"message,omitempty"`
}

// Metadata Describes the scanner plugin.
type Metadata struct {
	ApiVersion *string `json:"apiVersion,omitempty"`
}

// Misconfiguration defines model for Misconfiguration.
type Misconfiguration struct {
	// Category Specifies misconfiguration impact category
	Category *string `json:"category,omitempty"`

	// Description Additional context such as the potential impact
	Description *string `json:"description,omitempty"`

	// Id Check or test ID, if applicable (e.g. Lynis TestID, CIS Docker Benchmark checkpoint code, etc)
	Id *string `json:"id,omitempty"`

	// Location Location within the asset where the misconfiguration was recorded (e.g. filesystem path)
	Location *string `json:"location,omitempty"`

	// Message Short info about the misconfiguration
	Message *string `json:"message,omitempty"`

	// Remediation Possible fix for the misconfiguration
	Remediation *string                   `json:"remediation,omitempty"`
	ScannerName *string                   `json:"scannerName,omitempty"`
	Severity    *MisconfigurationSeverity `json:"severity,omitempty"`
}

// MisconfigurationSeverity defines model for MisconfigurationSeverity.
type MisconfigurationSeverity string

// PluginOutput defines model for PluginOutput.
type PluginOutput struct {
	Misconfigurations *[]Misconfiguration `json:"misconfigurations,omitempty"`
}

// Status defines model for Status.
type Status struct {
	// LastTransitionTime Last date time when the status has changed.
	LastTransitionTime time.Time `json:"lastTransitionTime"`

	// Message Human readable message.
	Message *string `json:"message,omitempty"`

	// State Describes the status of scanner.
	// | Status         | Description                                                   |
	// | -------------- | ------------------------------------------------------------- |
	// | NotReady       | Initial state when the scanner container starts               |
	// | Ready          | Scanner setup is complete and it is ready to receive requests |
	// | Running        | Scanner config was received and the scanner is running        |
	// | Failed         | Scanner failed                                                |
	// | Done           | Scanner is completed successfully                             |
	State StatusState `json:"state"`
}

// StatusState Describes the status of scanner.
// | Status         | Description                                                   |
// | -------------- | ------------------------------------------------------------- |
// | NotReady       | Initial state when the scanner container starts               |
// | Ready          | Scanner setup is complete and it is ready to receive requests |
// | Running        | Scanner config was received and the scanner is running        |
// | Failed         | Scanner failed                                                |
// | Done           | Scanner is completed successfully                             |
type StatusState string

// PostConfigJSONRequestBody defines body for PostConfig for application/json ContentType.
type PostConfigJSONRequestBody = Config
