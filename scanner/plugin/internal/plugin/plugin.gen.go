// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXXW/byhH9K4NtgbQALStN+1ABfXCiNhHgBEZs9CXJw4ockpOQu+zu0Laa6L9fzC7J",
	"UCL9deEbvVjW7p4983Vm9rtKbd1Yg4a9Wn1XPi2x1uHrG2tyKuRbhj511DBZo1ZqHf7bogcNPtXGoIM0",
	"7F2oRDXONuiYMGDkVOEU4apEkBW4IS6BS+zOt07LDnD4v5YcZrDdhdX+lqZqCzILuCrJA8n9jeYSrAm7",
	"BNHvPGMNbEeoYWHx2ahE8a5BtVKeHZlCJer2xOqGTlKbYYHmBG/Z6RPWReB+rSvKNMuBnpDa7xNFpml5",
	"TW7erowcpmzdDm5KSkvwpW2rDLa9FXcZ9Xz8bMuPJYgOZ7j0nD1bh0D8wkNOJiNT+GekyVSjbfkSU2sy",
	"P8+11rdUtzXIXhBicTNwqbnLPvCsHWMGubM1sGRGDPtn05nhWgO5dbDFXOzZIpkCdMu21kyprqod6K0V",
	"jGhdTUYuVavlYCkZxgLd7zA1KfhfS7UXgwfrV59iXYxSaRy1iWu+DDzs9iumrPaJ+rdz1n1E31jjZyrs",
	"zEDcG11FHhxy6yT9xBUack0VZnB2sQnVhp6nxVuj97oI6IcRD+E7ZvQeWWea9X2CMZP3k1t1Q/9F58PR",
	"x11M/kA+5NghZKoZC+t2U2qXDaaUE3qoj1CA6kanDMPZ47TfJ4dYkxBkGclXXUlCMt4y+DYtQUc3NJbR",
	"MOmqu2gOn7Ip7JsS029gHTB6hs06AcpBN01Fqd5WCH/BRbGA850hD1foWXa82VzC2qbf0MFrNGlZa/cN",
	"UgFqLBkGyeYEkNO/zrGobKrnTTzvVoKOU1Rh7T3ySFomfr3RkoypdRlmHduRcougz7IYJeNRCEvrGMjk",
	"Vsq45dlb5xAd1pjRHaZdWO9J/JnTbSiZx6J26f1B13OFkyiP1+iIQy7+2WGuVupPpz978GnXgE+Ps/qy",
	"P/eoGrgc3YJGxOzTZM87Ksph3xTiPWbU1vdsOLc396xuTG6H5S8zjrpkza2fFmulPV85bXyoniuqZ2J+",
	"rj2DKG3sDDclxuTzARNK7SEttSkwE33Jras1q5WSEydy4kkJ9q6ttcwkOgsF1u1bzAafg/o/IICRpM17",
	"KVx8Nj8gugP6zw9Y/4SAp39+CObJwQeOf3jiJ2J+sPwRdbYbeG4MBRkLto9C8XMyZE3yLTRqP8dzDBgw",
	"L7vDHrltILT0uqmQEbTJgLqGJofYipggXWPfx3yH2RojjX6C2Q2FnQzJySygjkkL/NF5wfxPbJpTzPxw",
	"4SkxWluDMGf7yOpMOkeK3uetTCsPYKpkKPk+WCpRw99ol0pUtEYlSijMlOjRyBJzO5mrz+mAEufk3AYJ",
	"JJZHgOoNu4hD5tnFRiXqum/16uViuVhKEdkGjW5IrdSrxXLxUgYEzWXQhtN0eJM01rP8FemIgpNF2ebu",
	"3RLZo+fXNgs6GLqw4ThjhH4px06/+qj/UXgfkuUO/GigY9di+CHOY4Hr35Yvn3TroQpKJm7W81PxZi3i",
	"0edrnPBE8raIBlKHmqPuPTg77Y9nGHUGBm8i7BRxn6i/L5fP5srDEXaGjNjaxRC2NttJSZAJQ3ZH5p+/",
	"lsxIHoyVmaMToVAagdI/frV//KECsY0yuwjh9m1daxl7Q130ytc9jo/efCKB4ejQlQLEaYm64vL/QrbA",
	"mYp7i/yu2zIpgOV8/o7cGNF34fbhMdfpsqhvr+mdc189CChxOQKVn+7BPfBTnK6n7nnRU+28Uo8eO3e5",
	"ZXgQzfvlWXJkuGMmPXq97bke2/oWeVjrX8/T51kw1w+z2l3GdtPcH2hqd8NddTAMVSMj5izm+zbv978F",
	"AAD//9jecgoQEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
