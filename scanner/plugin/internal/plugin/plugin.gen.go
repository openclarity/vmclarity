// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWT2/cthP9KgP+fkAu2j9p2kMX6MHNtskCbWHERi9xD7PSSGIqkSo5sr2N97sXQ0qy",
	"dle248LNXixLnMf3hjOP81mltm6sIcNerT4rn5ZUY3h8a02uC3nKyKdON6ytUSu1Dv9tyQOCT9EYcpCG",
	"tXOVqMbZhhxrChi5rugU4bIkkC9wo7kELqmLbx3KCnD0V6sdZbDdha/9Lk3VFtrM4bLUHrTs3yCXYE1Y",
	"JYh+55lqYDtCDR/mV0YlincNqZXy7LQpVKJuZxYbPUttRgWZGd2ywxljEbhfY6UzZAnoCan9PlHaNC2v",
	"tZvWlWlHKVu3g5tSpyX40rZVBttexUOiXo6fbflLCZKjCS49Z8/WEWh+5SHXJtOm8C9Ik3VNtuULSq3J",
	"/DTXGm913dYga0GIxcXAJXJXfeAZHVMGubM1sFRGPPYr08lwrYHcOthSLnq2pE0B2LKtkXWKVbUD3FrB",
	"iOpqbWRTtVoOSrVhKsj9C6lJwT8s1V4ED+pXH2NfjEppfGonqflj4GG3nyhltU/UT85Z94F8Y42f6LAz",
	"A3FtTJX24IhbJ+UnqUDIUVeUwdn5JnQbeT5t3pq8xyKgH554OL5jRr8SY4aMjxnGRN2f7IqN/p2cD6Ff",
	"tPEFI7ch9BCoQs+XDo3XwuNS1xN5+gU9gxxZLLGbkqKX+IAJJXpISzQFZUI0t65GVislETOJOGmGfTJO",
	"2+Fm79saxdwww21F0K2bT2HI/vRkJiNJm/c5nV+ZO4jpgP53B+t7CHj+704wZwc/OH7xzF/E/M3yB8Js",
	"N/DcGM0aqyBrfBT3VwyjlqfQ8X6K5xgwYF50wZ64bSB4Q91UxARoMtBdZ0gQW3CUkr6mviF8h9kaI45x",
	"gtndLjfo+8gsoI5JC/xRvGD+HLvvFDM//PCcM1pbQzClfaQ6A9+mKXmft2J7T2CqRJERI/yo+sNSiRr+",
	"Rl0qUVGNSpRQGLnVqGnH3hdrO5nqz1OnixduboMXaJZpQvXCzuNtdXa+UYm67j1DvZ4v50tpItuQwUar",
	"lXozX85fi9Mgl8EbFukw3DTWs/wV6wjjxyZTK3VuPXcDUGRPnn+02U5WSiWS4WhWTaXTELb45KNlxRFK",
	"nv7vKFcr9b/F/Yy16AasRQd+dDOwaym8iMYeuH6zfP2sXQ9dUCpxs56+XjdrMY++XuNVIZa3JTKQOkKO",
	"vvekCcurowsIDN1E2FPEfaK+XS5fLJWHd+EEGdHanSFsbbaTltAm3NYdme+/LpmRPRjLMtlEEwqtESh9",
	"97Xz4w8diG202Xk4bt/WNbpd1xe983VT9tHwKBYYQodbKUAsSsKKy7+FbEETHfeO+H235KQBltP1O0pj",
	"RN+F3YepsPNlcd/e07vkvnkSUM7lCFRePYJ7kKe3JaV/TqTnVU+1y0o9mpoeSsswWU3n5UVqZNhjojx6",
	"v+25Hmt9Rzx868fw0zkvyPXDrPaQ2G6a+w+ldjs81AfDUDUSMaWYH1u83/8TAAD//1bmuT1ZDwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
