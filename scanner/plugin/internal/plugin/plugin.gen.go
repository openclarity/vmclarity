// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"z4kpj+mmybvdPwEAAP//gfxlIIQUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
