// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Stop the scanner.
	// (POST /stop)
	PostStop(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// PostStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostStop(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStop(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.POST(baseURL+"/stop", wrapper.PostStop)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX33PbNhL+V3ZwN5O7GYpWLteHaiYPjt0k7jSpJ/akD3EeIHApIiUBFlhIVhP9750F",
	"SFo/qDjuJJnyRRQJfPvtYvfb5UehbNNag4a8mH0UXlXYyHh7Zk2pF3xXoFdOt6StETNxHv/N0YMEr6Qx",
	"6EDFtbnIROtsi440RoxS13iIcF0h8BtYaaqAKuz2Byd5BTj8I2iHBczX8W1vpa3DQpscrivtQbP9VlIF",
	"1sRVjOjXnrABsluo8UV+Y0QmaN2imAlPTpuF2GRCmzbQuXbjHAvtUJF1a1hVWlXgKxvqAuY9o2MER2xl",
	"4nZiZasnyha4QDPBW3JyQnIR47SUtS4k8YbeebHZZMIG+lKC6HCES8/Zk3UImh55KLUptFn4r07zuXWN",
	"pCPHHd+BNl0oH8r02gIaHxwCp5ec61rTOuXP21dntXT89/TyIkupkKw1wROfljUItgQ0oYGlrAMy4ku7",
	"wiW6bIeKkgZ8aFvrCFTwZJsOy4P0sMK65tzqV1iq0N0Ysrb28B/MFzmotaqtKfB28sFbk3UgkwTCPxNe",
	"PTl9dpYBksr/m9+Y3yo0oBxK0max5c7PV7++hhTaDIJH4LPyUOu5k24NpbPNrvPMTVnjyQVF0a+0O500",
	"uy9m78SyUWlLpCjej+UAr30tGy7id2KwwYR4/UNzJLMGbfl0zzAnDukGbaArVNYUfjx1Gnmrm9AAr+UE",
	"8mkxUCWpkyDwJB1hkWJCLA+p9m9Ml1UuGD5JmGPJ6TVHDrUMZBtJWsm6XoOcW8ZIwWq0YaNiNh3Cow3h",
	"At3fqJFsQU+nYsMOD2Uze3cnPtt1vldMByG6Oy47/4CKWMV+cs66N+hba/yI3J4aSGtTyLQHhxQc6xeH",
	"REIpdY1FzCDmh54OlbxB7+Uiou+p6GaE0SskWUiSn+seI8J5YFW2+i06H7d+keErkhTi1l2gWnq6dtJ4",
	"zTyudTMSp1+kJ+CjS6m24rKMJCMmVNKDqqRZYMFEy07tBO+Y8I6xBrMVtl1jL0MjudPJQs5rhG5dPobB",
	"9vHeSCaStuxjmt+YT5DCAf31Cc7vIODh1yfGnOxcsP/ggVfCfG3pDcpiPfC8MJq0rKNb20dxN2+Q1HwX",
	"K9+P8dwGjJhX3WaPFFqIGtG0NRKCNAXorjJ4E1lwqFAvsS8I32EGY1g5DjC7UWMlfb+ziKjbpBl+bz9j",
	"Pk/Vd4hZ7r54yBmdc8sb833L6wJ8UAq9LwPL3z2YWw2kPyyRieE3+SUykbwRmWAKh81lXwNTbmdj9fl+",
	"tLxte1jc93WR05LQpbbQLU3ngm6JDla6ruNMR7ZtU21/D/W/V9c3cT4tbfKQeJAW/TFeppHp9PJCZGLZ",
	"K6R4nE/zKcfJtmhkq8VMPMmn+WPWVUlVZHiihrm+tT6Oa3Gk4lhdFGImLq2nbvZPjNHTM1useSXXHRpK",
	"0tzWWsVtJ7GfD18PfPdvh6WYiX+d3H1enHTfFicd+F5EyAWMD1Ibi1z/N338IKu7acF1d3E+PlRcnLNU",
	"9tWZGiML/Bz7WSxlwr0thx/tZRsYXCXYQ8RNJv4/nX61UO52/hEy7Gt3hjC3xZoFQJuYpR2ZH78vmS0x",
	"NDZ+ECTJjUKQxwj70DTSrbtU7KW1+6bb+2hgjY0tYGh7EeKkQllT9SdTXuBIkr9AetktOci56XjKbDFP",
	"6OtofRg/O+Fnee+bRgzxD9Mn9wJyKPZA+dFncHfidFah+n0kPI96ql1Umq2x7FhYhtFtPC5fJVMGGyNJ",
	"0ktcz3Xf1xdIw7t+3j8cJKO7fhgGjznbjYvf0NXOwrFqGKa2LSfGPKbPLz7xfWM8KumxdX4bQY/Qm07P",
	"D+V7xO0jnfefpY47h8A+7sd9s/krAAD//7YR/mU/EwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
