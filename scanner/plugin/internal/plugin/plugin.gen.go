// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXUXPbNgz+Kzhud93uZMVdt4f5rg9psrbZrV2uyXUPzR5oCrLYSaRGgnG81v99B1JS",
	"ZFtpml1Xv8SWiA8fQOAD8kEo27TWoCEvFh+EVxU2Mn49sabUK/5WoFdOt6StEQtxGn8t0YMEr6Qx6EDF",
	"s7nIROtsi440RoxS13iIcFkh8BtYa6qAKuzsg5N8Ahz+HbTDApab+Lb30tZhpU0Ol5X2oNl/K6kCa+Ip",
	"RvQbT9gA2RFqfJFfGZEJ2rQoFsKT02YltpnQpg10qt00x0I7VGTdBtaVVhX4yoa6gGXP6C6CE74ycTOz",
	"stUzZQtcoZnhDTk5I7mKebqWtS4ksUEfvNhuM2EDfS5BdDjBpefsyToETY88lNoU2qz8F6f53LpG0h3X",
	"Hd+BNl0qH8r00gIaHxwCl5dc6lrTJtXP21cntXT88/j8LEulkLw1wRPfljUItgQ0oYFrWQdkxJd2jdfo",
	"sh0qShrwoW2tI1DBk206LA/SwxrrmmurP2GpQndlyNraw3eYr3JQG1VbU+DN7L23JutAZgmE/8z49Oz4",
	"2UkGSCr/Pr8yf1RoQDmUpM1qFM6vF7+/hpTaDIJH4LvyUOulk24DpbPNbvDMTVnjyQVFMa5knW6awxeL",
	"d+K6UckkUhR/TtUAn30tG27id2LwwYT4/ENrJLMGbfl0zzEXDukGbaALVNYUfrp0Gnmjm9AAn+UC8ukw",
	"UCWpkyDwJB1hkXJCLA+p969MV1UuGL5JWGLJ5bVETrUMZBtJWsm63oBcWsZIyWq0YadiMR/Sow3hCt1/",
	"6JFsRU/nYssBD22zeHcrPuM+32umgxTdXpddvkdFrGK/OGfdG/StNX5Cbo8NpLMpZdqDQwqO9YtTIqGU",
	"usYiVhDzQ0+HSt6g93IV0fdUdDvB6BWSLCTJT02PCeE88Cpb/Radj6af5fiCJIVougtUS0+XThqvmcel",
	"biby9Jv0BHx1qdTW3JaRZMSESnpQlTQrLJho2amdYIsZW0wNmFHadp29DI3kSScLuawRunP5FAb7x3sz",
	"mUjass9pfmU+QkoH9J+PcHoLAQ//fGTM2c4H9h888JMwX1t6g7LYDDzPjCYt6xjW+Cpu9w2Smr/FzvdT",
	"PMeAEfOiM/ZIoYWoEU1bIyFIU4DuOoONyIJDhfoa+4bwHWYwhpXjALNbNdbS95ZFRB2TZvg9e8Z8nrrv",
	"ELPcffGQOzrlkTcV+yjqAnxQCr0vA8vfPZijAdJflsjE8DfFJTKRohGZYAqHw2VfA1NtZ1P9eah027ix",
	"lTZqgSZeLUUf2HlaIo7Pz0QmrnvNEI/zeT7nJrItGtlqsRBP8nn+mJVGUhW14UgNm25rfVxg4pLBTM4K",
	"sRDn1lO3DSf26OmZLTZ8kisRDSWxamutotlRnHDDPs3fvnVYioX45uh24T7qtu2jDnxvQpALGB8kYY9c",
	"f5g/fpDXXRXkSjw7nR6zZ6csHn29plHBkrfEfjtJunevCPOjvQEEBtcJ9hBxm4kf5/MvlsrdWThBhmPt",
	"7hCWtthwS2gTp3ZH5uevS2YkD8bGFTmJUGyNSOmnr50fv6tAvPKyzObxun1oGuk2XV/0ytf9y7W307ME",
	"RtNhKkWIowplTdU/THaFEx33Aulld+SgAebT9TtKY0LfRO/DdtjpMqtvr+ldcp/cC8j3sgfKjz6Bu5On",
	"kwrVXxPpedRT7bLSjLamu9IybFbTefkiNTL4mCiPXm97rvuxvkAa3vXr+OGeF8P1w652V7DdNvc/htp5",
	"uKsPhqVqFMRUxPSpw9vtvwEAAP//2bxEi2YRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
