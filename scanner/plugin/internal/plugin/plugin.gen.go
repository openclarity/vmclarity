// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXQXPbthL+Kzt4bybvzVC00rSHaiYHx24Sd5rUE3vSQ9wDBC5FpCTAAgvLaqL/3lmA",
	"pCmJjuOOG10skdhvv13sfrv+JJRtWmvQkBeLT8KrChsZv55YU+oVfyvQK6db0taIhTiNv5boQYJX0hh0",
	"oOLZXGSidbZFRxojRqlrPES4rBD4Daw1VUAVdvbBST4BDv8M2mEBy01823tp67DSJofLSnvQ7L+VVIE1",
	"8RQj+o0nbIDsCDW+yK+MyARtWhQL4clpsxKZuJlZ2eqZsgWu0MzwhpyckVxF7tey1oUkNugJie02E9q0",
	"gU61m46r0A4VWbeBdaVVBb6yoS5g2UdxV1CPx88G+lqC6HCCS8/Zk3UImp54KLUptFn5R6f50rpG0h0l",
	"Et+BNl0qH8r00gIaHxwCl6Rc6lrTJtXc+zcntXT88/j8LEvlk7w1wRPfljUItgQ0oYFrWQdkxNd2jdfo",
	"sh0qShrwoW2tI1DBk206LA/SwxrrmuuxP2GpQndlyNraw/8wX+WgNqq2psCb2UdvTdaBzBII/5nx6dnx",
	"i5MMkFT+//zK/FahAeVQkjarUTg/X/z6FlJqMwgege/KQ62XTroNlM42u8EzN2WNJxcUxbiSdbppDl8s",
	"PojrRiWTSFH8PlUDfPatbLjxP4jBBxPi8w+tkcwatOXzPcdcOKQbtIEuUFlT+OnSaeSNbkIDfJYLyKfD",
	"QJWkTrbAk3SERcoJsaQkvbgyXVW5YPgmYYkll9cSOdUykG0kaSXregNyaRkjJavRhp2KxXxIjzaEK3T/",
	"oEeyFT2fiy0HPLTN4kMS1JEGjdt9r6cOMnV7a3b5ERWJbSZ+cs66d+hba/yEUh8bSGdT5rQHhxQcyxhn",
	"RkIpdY1FLCSmiZ4Oh0CD3stVRN+tmnib+4zeIMlCkvzS4JnQzwOvstXv0flo+lWOL0hSiKa7QLX0dOmk",
	"8Zp5XOpmIk+/SE/AN5gqbs3dGUlGTKikB1VJs8KCiZad6Am2mLHFgahus3Hadp29Do3kISkLuawRunP5",
	"FAb7x3szmUjass9pfmU+Q0oH9J/PcHoLAQ//fGbM2c4H9h888JMw31p6h7LYDDzPjCYt6xjW+CpuVxWS",
	"mr9FAfBTPMeAEfOiM/ZIoYUoFU1bIyFIU4DuOoONyIJDhfoa+4bwHWYwhgXkALPbUtbS95ZFRB2TZvg9",
	"e8Z8mbrvELPcffGQOzrlyTcV+yjqAnxQCr0vA6vgPZijOdJflsjE8DfFJTKRohGZYAqHM2ZfClNtZ1P9",
	"eah0aXErbdQCTbyVij6w87RLHJ+fiUxc95ohnubzfM5NZFs0stViIZ7l8/wpK42kKmrDkRqW5Nb6uMfE",
	"XYOZnBViIc6tp26RTuzR0wtbbPgkVyIaSmLV1lpFs6M46IZVnL/912EpFuI/R7e7+lG3qB914HuDglzA",
	"+CAJe+T63fzpg7zuqiBX4tnp9LQ9O2Xx6Os1jQqWvCX2S0rSvXtFmB/tDSAwuE6wh4jbTHw/nz9aKndn",
	"4QQZjrW7Q1jaYsMtoU0c3h2ZH78tmZE8GBs35SRCsTUipR++dX78rgLx5ssym8fr9qFppNt0fdErX/ff",
	"2t5qzxIYTYepFCGOKpQ1VX8x2RVOdNwrpNfdkYMGmE/X7yiNCX0TvQ9LYqfLrL69pnfJfXYvIN/LHig/",
	"+gLuTp5OKlR/TKTnSU+1y0oz2pruSsuwWU3n5VFqZPAxUR693vZc92N9hTS867fywz0vhuuHXe2uYLtt",
	"7l8MtfNwVx8MS9UoiKmI6UuHt9u/AwAA//8qAL86oREAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
