// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWT2/jthP9KgP+fsBe5D/pthcDPaTrdtdAWwSboJdND2NpJHErkSo5SuJu/N2LISVF",
	"tpVkU6T1JYrEeXxvOPM4X1Rq68YaMuzV6ovyaUk1hsd31uS6kKeMfOp0w9oatVLr8N+WPCD4FI0hB2lY",
	"O1eJapxtyLGmgJHrik4RrkoC+QK3mkvgkrr41qGsAEd/ttpRBttd+Nrv0lRtoc0crkrtQcv+DXIJ1oRV",
	"guh3nqkGtiPU8GF+bVSieNeQWinPTptCJepuZrHRs9RmVJCZ0R07nDEWgfsNVjpDloCekNrvE6VN0/Ja",
	"u2ldmXaUsnU7uC11WoIvbVtlsO1VPCbq9fjZlr+WIDma4NJz9mwdgeY3HnJtMm0K/4o0WddkW76k1JrM",
	"T3Ot8U7XbQ2yFoRYXAxcInfVB57RMWWQO1sDS2XEY782nQzXGsitgy3lomdL2hSALdsaWadYVTvArRWM",
	"qK7WRjZVq+WgVBumgtw/kJoU/P1S7UXwoH71KfbFqJTGp3aSmt8HHnb7mVJW+0T96Jx1H8k31viJDjs3",
	"ENfGVGkPjrh1Un6SCoQcdUUZnF9sQreR59Pmrcl7LAL64YmH4ztm9AsxZsj4lGFM1P3Jrtjo38j5EPpV",
	"G18ychtCD4Eq9Hzl0HgtPK50PZGnn9EzyJHFErstKXqJD5hQooe0RFNQJkRz62pktVISMZOIk2bYJ+O0",
	"HW72oa1RzA0z3FYE3br5FIbsT89mMpK0eZ/T+bW5h5gO6H/3sH6AgJf/7gVzdvCD4xcv/EXMXy1/JMx2",
	"A8+N0ayxCrLGR/FwxTBqeQod76d4jgED5mUX7InbBoI31E1FTIAmA911hgSxBUcp6RvqG8J3mK0x4hgn",
	"mN3tcou+j8wC6pi0wB/FC+ZPsftOMfPDDy85o7U1BFPaR6oz8G2akvd5K7b3DKZKFBkxwk+qPyyVqOFv",
	"1KUSFdWoRAmFkVuNmnbsfbG2k6n+PHW6eOHmNniBZpkmVC/sIt5W5xcblaib3jPU2Xw5X0oT2YYMNlqt",
	"1Nv5cn4mToNcBm9YpMNw01jP8lesI4wfm0yt1IX13A1AkT15/sFmO1kplUiGo1k1lU5D2OKzj5YVRyh5",
	"+r+jXK3U/xYPM9aiG7AWHfjRzcCupfAiGnvg+s3y7EW7HrqgVOJmPX29btZiHn29xqtCLG9LZCB1hBx9",
	"71kTlldHFxAYuo2wp4j7RH27XL5aKg/vwgkyorU7Q9jabCctoU24rQOZ7/5rMv6w3dlGT5uH3Pq2rtHt",
	"uiLsbaYbaY8mNfGbEDpcAQFiURJWXP4lZAuaKO/3xB+6JSfVtpwulpGlRfRd2H0YwToTFKvrDbRL7ttn",
	"AY3lY1B59QTuQZ7elZT+MZGeNz3VLiv1aER5LC3DGDOdl1epkWGPifLoza3neqz1PfHwrZ95T4eqINcP",
	"g9FjYrvR6V+U2u3wWB8ME8xIxJRifmrxfv93AAAA//9mM5MPxg4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
