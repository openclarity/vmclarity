// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/scanner/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RW32/jNgz+VwhtwL3kknSHveTtdsHuCmxDsRZ7We+BselYN1vyRPq6rM3/PlCy3fxQ",
	"2xXY/BJHEj9+pMiPvjeFbzvvyAmb1b3hoqYW4+sH7yq71beSuAi2E+udWZl1/LchBgQu0DkKUMSzczMz",
	"XfAdBbEUMSrb0DnCTU2gO3BnpQapabDvA+oJCPRnbwOVsNnF3dFL1/Rb6+ZwU1sGq/47lBq8i6cUkXcs",
	"1IL4A9S4Mb91ZmZk15FZGZZg3dbsZ8a6rpe1DXmOpQ1UiA87uKttUQPXvm9K2IyMniKY9+V7+bfOKFAG",
	"d/TP4gOBlTcMlXWldVt+wqXYlnwv11R4V3Leb4t/2bZvQc+COkmHQWqU4YaBBYNQCVXwLYhmP6X21g2U",
	"Qu+g8gE2VCm3DVm3BezFtyi2wKbZAW68YiSmrXXq1KyWE2vrhLYUzH4/LfnNFypEA/mZBEsUfK4aMxdx",
	"Vo/Y2d8ocDS9P81XzvG1oPTR9BioQZabgI6t8rixbabMf0IWKFEo5fauplSoHDGhRoaiRrelUolWPrQo",
	"ZmXU4q1a5G60JWbcZpx96lvUzsESNw3BcG6ew1D/9GImE0lfjTmd37oHSOmA8XmA9SMEvP55UMy3Rw+c",
	"LrzySZi/ePmVsNxNPC+dFYtNDOvwKh71S9DqWyx1zvE8BIyY14Mxk/QdxKZou4aEAF0JVnQpRCPxEKgg",
	"+5WithELD5i9c9oqZ5iDdN0hj5ZlRD0krfAn9or5I9qGygzP6njjNXe09o4gF/tB1CVwXxTEXPXa7y9g",
	"mpkhpwrwuxkvy8zM9JviMjOTojEzoxTM51mmacdxoViptme5/vx81t77OAEqH7XAio4qMwZ2lST3/dWl",
	"mZmvo2aYi/lyvoxq3pHDzpqVeTdfzi9UaVDqqA2LYpqcnWfRX5WOONsuS7MyV55lmK6JPbH84MudntRK",
	"JCdJrLrGFtFs8YWTZKX5rG/fBqrMynyzeBzgi2F6Lwbw/XF2JPQUF7jzjpOOfbe8eJXXYxXUSrxc5+fK",
	"5VrFY6zXNE5U8jZEDopAKEn3XhRhXTqGfw+O7hLsOaIe575tMeyGVI/NNHwVnAxV7arY9JPQRYhFTdhI",
	"/bcGt6XMJX4k+TQcOcvpMp+Sg8ZN6LvofZqwQ6trQ48yMdda+3757kVA5+UUVJeewT3K04eaij8y6Xkz",
	"Uh2y0h4M4qfSMg3rfF7+kwqffGTKY2zhketprB9Jpr3xk+b80yGGy9P4fyrY4QPhfwx18JAJ9OZoTh8E",
	"kYtYnju83/8TAAD//0y23hoJDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
