// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package types

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for InfoType.
const (
	InfoTypeSSHAuthorizedKeyFingerprint InfoType = "SSHAuthorizedKeyFingerprint"
	InfoTypeSSHDaemonKeyFingerprint     InfoType = "SSHDaemonKeyFingerprint"
	InfoTypeSSHKnownHostFingerprint     InfoType = "SSHKnownHostFingerprint"
	InfoTypeSSHPrivateKeyFingerprint    InfoType = "SSHPrivateKeyFingerprint"
	InfoTypeUNKNOWN                     InfoType = "UNKNOWN"
)

// Defines values for MisconfigurationSeverity.
const (
	MisconfigurationHighSeverity   MisconfigurationSeverity = "MisconfigurationHighSeverity"
	MisconfigurationLowSeverity    MisconfigurationSeverity = "MisconfigurationLowSeverity"
	MisconfigurationMediumSeverity MisconfigurationSeverity = "MisconfigurationMediumSeverity"
)

// Defines values for RootkitType.
const (
	RootkitTypeAPPLICATION RootkitType = "APPLICATION"
	RootkitTypeFIRMWARE    RootkitType = "FIRMWARE"
	RootkitTypeKERNEL      RootkitType = "KERNEL"
	RootkitTypeMEMORY      RootkitType = "MEMORY"
	RootkitTypeUNKNOWN     RootkitType = "UNKNOWN"
)

// Defines values for ScanInputType.
const (
	InputTypeDir           ScanInputType = "DIR"
	InputTypeDockerArchive ScanInputType = "DOCKERARCHIVE"
	InputTypeFile          ScanInputType = "FILE"
	InputTypeImage         ScanInputType = "IMAGE"
	InputTypeOCIArchive    ScanInputType = "OCIARCHIVE"
	InputTypeOCIDir        ScanInputType = "OCIDIR"
	InputTypeRootFS        ScanInputType = "ROOTFS"
	InputTypeSBOM          ScanInputType = "SBOM"
)

// Defines values for ScanStatusState.
const (
	ScanStatusStateAborted    ScanStatusState = "Aborted"
	ScanStatusStateDone       ScanStatusState = "Done"
	ScanStatusStateFailed     ScanStatusState = "Failed"
	ScanStatusStateInProgress ScanStatusState = "InProgress"
	ScanStatusStatePending    ScanStatusState = "Pending"
)

// Defines values for VulnerabilitySeverity.
const (
	CRITICAL   VulnerabilitySeverity = "CRITICAL"
	HIGH       VulnerabilitySeverity = "HIGH"
	LOW        VulnerabilitySeverity = "LOW"
	MEDIUM     VulnerabilitySeverity = "MEDIUM"
	NEGLIGIBLE VulnerabilitySeverity = "NEGLIGIBLE"
)

// Annotations Generic map of string keys and string values to attach arbitrary non-identifying metadata to objects.
type Annotations = []struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ErrorResponse An object that is returned for a failed API request.
type ErrorResponse struct {
	Message *string `json:"message,omitempty"`
}

// Exploit defines model for Exploit.
type Exploit struct {
	CveID       *string   `json:"cveID,omitempty"`
	Description *string   `json:"description,omitempty"`
	Name        *string   `json:"name,omitempty"`
	SourceDB    *string   `json:"sourceDB,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Urls        *[]string `json:"urls"`
}

// ExploitFindingInfo defines model for ExploitFindingInfo.
type ExploitFindingInfo struct {
	CveID       *string   `json:"cveID,omitempty"`
	Description *string   `json:"description,omitempty"`
	Name        *string   `json:"name,omitempty"`
	ObjectType  string    `json:"objectType"`
	SourceDB    *string   `json:"sourceDB,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Urls        *[]string `json:"urls"`
}

// FindingSummary defines model for FindingSummary.
type FindingSummary struct {
	DataRead           *string `json:"DataRead,omitempty"`
	DataScanned        *string `json:"DataScanned,omitempty"`
	EngineVersion      *string `json:"EngineVersion,omitempty"`
	InfectedFiles      *int    `json:"InfectedFiles,omitempty"`
	KnownViruses       *int    `json:"KnownViruses,omitempty"`
	ScannedDirectories *int    `json:"ScannedDirectories,omitempty"`
	ScannedFiles       *int    `json:"ScannedFiles,omitempty"`
	SuspectedFiles     *int    `json:"SuspectedFiles,omitempty"`
	TimeTaken          *string `json:"TimeTaken,omitempty"`
}

// InfoFinder defines model for InfoFinder.
type InfoFinder struct {
	// Data The data found by the scanner in the specific path for a specific type. See example for SSHKnownHostFingerprint info type
	Data *string `json:"data,omitempty"`

	// Path File path containing the info
	Path *string   `json:"path,omitempty"`
	Type *InfoType `json:"type,omitempty"`
}

// InfoFinderFindingInfo defines model for InfoFinderFindingInfo.
type InfoFinderFindingInfo struct {
	// Data The data found by the scanner in the specific path for a specific type. See example for SSHKnownHostFingerprint info type
	Data       *string `json:"data,omitempty"`
	ObjectType string  `json:"objectType"`

	// Path File path containing the info
	Path *string   `json:"path,omitempty"`
	Type *InfoType `json:"type,omitempty"`
}

// InfoType defines model for InfoType.
type InfoType string

// Malware defines model for Malware.
type Malware struct {
	MalwareName *string      `json:"malwareName,omitempty"`
	MalwareType *MalwareType `json:"malwareType,omitempty"`

	// Path Path of the file that contains malware
	Path     *string `json:"path,omitempty"`
	RuleName *string `json:"ruleName,omitempty"`
}

// MalwareFindingInfo defines model for MalwareFindingInfo.
type MalwareFindingInfo struct {
	MalwareName *string      `json:"malwareName,omitempty"`
	MalwareType *MalwareType `json:"malwareType,omitempty"`
	ObjectType  string       `json:"objectType"`

	// Path Path of the file that contains malware
	Path     *string `json:"path,omitempty"`
	RuleName *string `json:"ruleName,omitempty"`
}

// MalwareType defines model for MalwareType.
type MalwareType = string

// Metadata defines model for Metadata.
type Metadata struct {
	// Annotations Generic map of string keys and string values to attach arbitrary non-identifying metadata to objects.
	Annotations *Annotations `json:"annotations,omitempty"`
}

// Misconfiguration defines model for Misconfiguration.
type Misconfiguration struct {
	// Category Specifies misconfiguration impact category
	Category *string `json:"category,omitempty"`

	// Description Additional context such as the potential impact
	Description *string `json:"description,omitempty"`

	// Id Check or test ID, if applicable (e.g. Lynis TestID, CIS Docker Benchmark checkpoint code, etc)
	Id *string `json:"id,omitempty"`

	// Location Location within the input object where the misconfiguration was recorded (e.g. filesystem path)
	Location *string `json:"location,omitempty"`

	// Message Short info about the misconfiguration
	Message *string `json:"message,omitempty"`

	// Remediation Possible fix for the misconfiguration
	Remediation *string                   `json:"remediation,omitempty"`
	Severity    *MisconfigurationSeverity `json:"severity,omitempty"`
}

// MisconfigurationFindingInfo defines model for MisconfigurationFindingInfo.
type MisconfigurationFindingInfo struct {
	// Category Specifies misconfiguration impact category
	Category *string `json:"category,omitempty"`

	// Description Additional context such as the potential impact
	Description *string `json:"description,omitempty"`

	// Id Check or test ID, if applicable (e.g. Lynis TestID, CIS Docker Benchmark checkpoint code, etc)
	Id *string `json:"id,omitempty"`

	// Location Location within the input object where the misconfiguration was recorded (e.g. filesystem path)
	Location *string `json:"location,omitempty"`

	// Message Short info about the misconfiguration
	Message    *string `json:"message,omitempty"`
	ObjectType string  `json:"objectType"`

	// Remediation Possible fix for the misconfiguration
	Remediation *string                   `json:"remediation,omitempty"`
	Severity    *MisconfigurationSeverity `json:"severity,omitempty"`
}

// MisconfigurationSeverity defines model for MisconfigurationSeverity.
type MisconfigurationSeverity string

// Package defines model for Package.
type Package struct {
	Cpes     *[]string `json:"cpes"`
	Language *string   `json:"language,omitempty"`
	Licenses *[]string `json:"licenses"`
	Name     *string   `json:"name,omitempty"`
	Purl     *string   `json:"purl,omitempty"`
	Type     *string   `json:"type,omitempty"`
	Version  *string   `json:"version,omitempty"`
}

// PackageFindingInfo defines model for PackageFindingInfo.
type PackageFindingInfo struct {
	Cpes       *[]string `json:"cpes"`
	Language   *string   `json:"language,omitempty"`
	Licenses   *[]string `json:"licenses"`
	Name       *string   `json:"name,omitempty"`
	ObjectType string    `json:"objectType"`
	Purl       *string   `json:"purl,omitempty"`
	Type       *string   `json:"type,omitempty"`
	Version    *string   `json:"version,omitempty"`
}

// Rootkit defines model for Rootkit.
type Rootkit struct {
	Message     *string      `json:"message,omitempty"`
	RootkitName *string      `json:"rootkitName,omitempty"`
	RootkitType *RootkitType `json:"rootkitType,omitempty"`
}

// RootkitFindingInfo defines model for RootkitFindingInfo.
type RootkitFindingInfo struct {
	Message     *string      `json:"message,omitempty"`
	ObjectType  string       `json:"objectType"`
	RootkitName *string      `json:"rootkitName,omitempty"`
	RootkitType *RootkitType `json:"rootkitType,omitempty"`
}

// RootkitType defines model for RootkitType.
type RootkitType string

// Scan defines model for Scan.
type Scan struct {
	EndTime *time.Time `json:"endTime,omitempty"`
	Id      *string    `json:"id,omitempty"`

	// Inputs List of inputs to scan (some rational amount, e.g. 100).
	Inputs        []ScanInput `json:"inputs"`
	JobsCompleted *int        `json:"jobsCompleted,omitempty"`
	JobsLeftToRun *int        `json:"jobsLeftToRun,omitempty"`
	StartTime     *time.Time  `json:"startTime,omitempty"`
	Status        *ScanStatus `json:"status,omitempty"`

	// TimeoutSeconds The maximum time in seconds that a scan should
	// run for before being automatically aborted.
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty"`
}

// ScanFinding defines model for ScanFinding.
type ScanFinding struct {
	// Annotations Generic map of string keys and string values to attach arbitrary non-identifying metadata to objects.
	Annotations *Annotations            `json:"annotations,omitempty"`
	FindingInfo ScanFinding_FindingInfo `json:"findingInfo"`
	Id          *string                 `json:"id,omitempty"`

	// Input Input data of an object to scan.
	Input   ScanInput       `json:"input"`
	ScanID  *string         `json:"scanID,omitempty"`
	Summary *FindingSummary `json:"summary,omitempty"`
}

// ScanFinding_FindingInfo defines model for ScanFinding.FindingInfo.
type ScanFinding_FindingInfo struct {
	union json.RawMessage
}

// ScanFindings Describes the result of a scan.
type ScanFindings struct {
	Count *int           `json:"count,omitempty"`
	Items *[]ScanFinding `json:"items,omitempty"`
}

// ScanInput Input data of an object to scan.
type ScanInput struct {
	// Path The input path (/mnt/snapshot for ex.)
	Path string `json:"path"`

	// Type The input type (ROOTFS, DIR, IMAGE etc.)
	Type ScanInputType `json:"type"`
}

// ScanInputType The input type (ROOTFS, DIR, IMAGE etc.)
type ScanInputType string

// ScanProgressResponse defines model for ScanProgressResponse.
type ScanProgressResponse struct {
	JobsDone      *int    `json:"jobsDone,omitempty"`
	JobsRemaining *int    `json:"jobsRemaining,omitempty"`
	Message       *string `json:"message,omitempty"`
}

// ScanStatus defines model for ScanStatus.
type ScanStatus struct {
	// LastTransitionTime Last date time when the status has changed.
	LastTransitionTime time.Time `json:"lastTransitionTime"`

	// Message Human readable message.
	Message *string `json:"message,omitempty"`

	// State Describes the state of scan.
	//
	// | State      | Description                    |
	// | ---------- | ------------------------------ |
	// | Pending    | Initial state for Scan         |
	// | InProgress | Scan is in progress            |
	// | Aborted    | Scan has been aborted          |
	// | Failed     | Scan has failed                |
	// | Done       | Scan has finished successfully |
	State ScanStatusState `json:"state"`
}

// ScanStatusState Describes the state of scan.
//
// | State      | Description                    |
// | ---------- | ------------------------------ |
// | Pending    | Initial state for Scan         |
// | InProgress | Scan is in progress            |
// | Aborted    | Scan has been aborted          |
// | Failed     | Scan has failed                |
// | Done       | Scan has finished successfully |
type ScanStatusState string

// ScannerInfo defines model for ScannerInfo.
type ScannerInfo struct {
	// Annotations Generic map of string keys and string values to attach arbitrary non-identifying metadata to objects.
	Annotations *Annotations `json:"annotations,omitempty"`

	// Name Scanner name.
	Name *string `json:"name,omitempty"`

	// Version Scanner runtime version.
	Version *string `json:"version,omitempty"`
}

// Scans defines model for Scans.
type Scans struct {
	Count *int    `json:"count,omitempty"`
	Items *[]Scan `json:"items,omitempty"`
}

// Secret defines model for Secret.
type Secret struct {
	Description *string `json:"description,omitempty"`
	EndColumn   *int    `json:"endColumn,omitempty"`
	EndLine     *int    `json:"endLine,omitempty"`

	// FilePath Name of the file containing the secret
	FilePath *string `json:"filePath,omitempty"`

	// Fingerprint Note: this is not unique
	Fingerprint *string `json:"fingerprint,omitempty"`
	StartColumn *int    `json:"startColumn,omitempty"`
	StartLine   *int    `json:"startLine,omitempty"`
}

// SecretFindingInfo defines model for SecretFindingInfo.
type SecretFindingInfo struct {
	Description *string `json:"description,omitempty"`
	EndColumn   *int    `json:"endColumn,omitempty"`
	EndLine     *int    `json:"endLine,omitempty"`

	// FilePath Name of the file containing the secret
	FilePath *string `json:"filePath,omitempty"`

	// Fingerprint Note: this is not unique
	Fingerprint *string `json:"fingerprint,omitempty"`
	ObjectType  string  `json:"objectType"`
	StartColumn *int    `json:"startColumn,omitempty"`
	StartLine   *int    `json:"startLine,omitempty"`
}

// SuccessResponse An object that is returned for a successful API request that returns nothing.
type SuccessResponse struct {
	Message *string `json:"message,omitempty"`
}

// Vulnerability defines model for Vulnerability.
type Vulnerability struct {
	Cvss        *[]VulnerabilityCvss `json:"cvss"`
	Description *string              `json:"description,omitempty"`

	// Distro Distro provides information about a detected OS distribution.
	Distro            *VulnerabilityDistro   `json:"distro,omitempty"`
	Fix               *VulnerabilityFix      `json:"fix,omitempty"`
	LayerId           *string                `json:"layerId,omitempty"`
	Links             *[]string              `json:"links"`
	Package           *Package               `json:"package,omitempty"`
	Path              *string                `json:"path,omitempty"`
	Severity          *VulnerabilitySeverity `json:"severity,omitempty"`
	VulnerabilityName *string                `json:"vulnerabilityName,omitempty"`
}

// VulnerabilityCvss defines model for VulnerabilityCvss.
type VulnerabilityCvss struct {
	Metrics *VulnerabilityCvssMetrics `json:"metrics,omitempty"`
	Vector  *string                   `json:"vector,omitempty"`
	Version *string                   `json:"version,omitempty"`
}

// VulnerabilityCvssMetrics defines model for VulnerabilityCvssMetrics.
type VulnerabilityCvssMetrics struct {
	BaseScore           *float32 `json:"baseScore,omitempty"`
	ExploitabilityScore *float32 `json:"exploitabilityScore,omitempty"`
	ImpactScore         *float32 `json:"impactScore,omitempty"`
}

// VulnerabilityDistro Distro provides information about a detected OS distribution.
type VulnerabilityDistro struct {
	// IDLike the ID_LIKE field found within Linux OS /etc/os-release file
	IDLike *[]string `json:"IDLike"`

	// Name Name of the OS distribution
	Name *string `json:"name,omitempty"`

	// Version Version of the OS distribution (major or major.minor version)
	Version *string `json:"version,omitempty"`
}

// VulnerabilityFindingInfo defines model for VulnerabilityFindingInfo.
type VulnerabilityFindingInfo struct {
	Cvss        *[]VulnerabilityCvss `json:"cvss"`
	Description *string              `json:"description,omitempty"`

	// Distro Distro provides information about a detected OS distribution.
	Distro            *VulnerabilityDistro   `json:"distro,omitempty"`
	Fix               *VulnerabilityFix      `json:"fix,omitempty"`
	LayerId           *string                `json:"layerId,omitempty"`
	Links             *[]string              `json:"links"`
	ObjectType        string                 `json:"objectType"`
	Package           *Package               `json:"package,omitempty"`
	Path              *string                `json:"path,omitempty"`
	Severity          *VulnerabilitySeverity `json:"severity,omitempty"`
	VulnerabilityName *string                `json:"vulnerabilityName,omitempty"`
}

// VulnerabilityFix defines model for VulnerabilityFix.
type VulnerabilityFix struct {
	State    *string   `json:"state,omitempty"`
	Versions *[]string `json:"versions"`
}

// VulnerabilitySeverity defines model for VulnerabilitySeverity.
type VulnerabilitySeverity string

// ScanID defines model for scanID.
type ScanID = string

// ScanState defines model for scanState.
type ScanState = string

// UnknownError An object that is returned for a failed API request.
type UnknownError = ErrorResponse

// GetScansParams defines parameters for GetScans.
type GetScansParams struct {
	// State scan state, e.g. pending
	State *ScanState `form:"state,omitempty" json:"state,omitempty"`
}

// CreateScanJSONRequestBody defines body for CreateScan for application/json ContentType.
type CreateScanJSONRequestBody = Scan

// AsPackageFindingInfo returns the union data inside the ScanFinding_FindingInfo as a PackageFindingInfo
func (t ScanFinding_FindingInfo) AsPackageFindingInfo() (PackageFindingInfo, error) {
	var body PackageFindingInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageFindingInfo overwrites any union data inside the ScanFinding_FindingInfo as the provided PackageFindingInfo
func (t *ScanFinding_FindingInfo) FromPackageFindingInfo(v PackageFindingInfo) error {
	v.ObjectType = "Package"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageFindingInfo performs a merge with any union data inside the ScanFinding_FindingInfo, using the provided PackageFindingInfo
func (t *ScanFinding_FindingInfo) MergePackageFindingInfo(v PackageFindingInfo) error {
	v.ObjectType = "Package"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVulnerabilityFindingInfo returns the union data inside the ScanFinding_FindingInfo as a VulnerabilityFindingInfo
func (t ScanFinding_FindingInfo) AsVulnerabilityFindingInfo() (VulnerabilityFindingInfo, error) {
	var body VulnerabilityFindingInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVulnerabilityFindingInfo overwrites any union data inside the ScanFinding_FindingInfo as the provided VulnerabilityFindingInfo
func (t *ScanFinding_FindingInfo) FromVulnerabilityFindingInfo(v VulnerabilityFindingInfo) error {
	v.ObjectType = "Vulnerability"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVulnerabilityFindingInfo performs a merge with any union data inside the ScanFinding_FindingInfo, using the provided VulnerabilityFindingInfo
func (t *ScanFinding_FindingInfo) MergeVulnerabilityFindingInfo(v VulnerabilityFindingInfo) error {
	v.ObjectType = "Vulnerability"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMalwareFindingInfo returns the union data inside the ScanFinding_FindingInfo as a MalwareFindingInfo
func (t ScanFinding_FindingInfo) AsMalwareFindingInfo() (MalwareFindingInfo, error) {
	var body MalwareFindingInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMalwareFindingInfo overwrites any union data inside the ScanFinding_FindingInfo as the provided MalwareFindingInfo
func (t *ScanFinding_FindingInfo) FromMalwareFindingInfo(v MalwareFindingInfo) error {
	v.ObjectType = "Malware"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMalwareFindingInfo performs a merge with any union data inside the ScanFinding_FindingInfo, using the provided MalwareFindingInfo
func (t *ScanFinding_FindingInfo) MergeMalwareFindingInfo(v MalwareFindingInfo) error {
	v.ObjectType = "Malware"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSecretFindingInfo returns the union data inside the ScanFinding_FindingInfo as a SecretFindingInfo
func (t ScanFinding_FindingInfo) AsSecretFindingInfo() (SecretFindingInfo, error) {
	var body SecretFindingInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSecretFindingInfo overwrites any union data inside the ScanFinding_FindingInfo as the provided SecretFindingInfo
func (t *ScanFinding_FindingInfo) FromSecretFindingInfo(v SecretFindingInfo) error {
	v.ObjectType = "Secret"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSecretFindingInfo performs a merge with any union data inside the ScanFinding_FindingInfo, using the provided SecretFindingInfo
func (t *ScanFinding_FindingInfo) MergeSecretFindingInfo(v SecretFindingInfo) error {
	v.ObjectType = "Secret"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMisconfigurationFindingInfo returns the union data inside the ScanFinding_FindingInfo as a MisconfigurationFindingInfo
func (t ScanFinding_FindingInfo) AsMisconfigurationFindingInfo() (MisconfigurationFindingInfo, error) {
	var body MisconfigurationFindingInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMisconfigurationFindingInfo overwrites any union data inside the ScanFinding_FindingInfo as the provided MisconfigurationFindingInfo
func (t *ScanFinding_FindingInfo) FromMisconfigurationFindingInfo(v MisconfigurationFindingInfo) error {
	v.ObjectType = "Misconfiguration"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMisconfigurationFindingInfo performs a merge with any union data inside the ScanFinding_FindingInfo, using the provided MisconfigurationFindingInfo
func (t *ScanFinding_FindingInfo) MergeMisconfigurationFindingInfo(v MisconfigurationFindingInfo) error {
	v.ObjectType = "Misconfiguration"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRootkitFindingInfo returns the union data inside the ScanFinding_FindingInfo as a RootkitFindingInfo
func (t ScanFinding_FindingInfo) AsRootkitFindingInfo() (RootkitFindingInfo, error) {
	var body RootkitFindingInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRootkitFindingInfo overwrites any union data inside the ScanFinding_FindingInfo as the provided RootkitFindingInfo
func (t *ScanFinding_FindingInfo) FromRootkitFindingInfo(v RootkitFindingInfo) error {
	v.ObjectType = "Rootkit"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRootkitFindingInfo performs a merge with any union data inside the ScanFinding_FindingInfo, using the provided RootkitFindingInfo
func (t *ScanFinding_FindingInfo) MergeRootkitFindingInfo(v RootkitFindingInfo) error {
	v.ObjectType = "Rootkit"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExploitFindingInfo returns the union data inside the ScanFinding_FindingInfo as a ExploitFindingInfo
func (t ScanFinding_FindingInfo) AsExploitFindingInfo() (ExploitFindingInfo, error) {
	var body ExploitFindingInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExploitFindingInfo overwrites any union data inside the ScanFinding_FindingInfo as the provided ExploitFindingInfo
func (t *ScanFinding_FindingInfo) FromExploitFindingInfo(v ExploitFindingInfo) error {
	v.ObjectType = "Exploit"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExploitFindingInfo performs a merge with any union data inside the ScanFinding_FindingInfo, using the provided ExploitFindingInfo
func (t *ScanFinding_FindingInfo) MergeExploitFindingInfo(v ExploitFindingInfo) error {
	v.ObjectType = "Exploit"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInfoFinderFindingInfo returns the union data inside the ScanFinding_FindingInfo as a InfoFinderFindingInfo
func (t ScanFinding_FindingInfo) AsInfoFinderFindingInfo() (InfoFinderFindingInfo, error) {
	var body InfoFinderFindingInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInfoFinderFindingInfo overwrites any union data inside the ScanFinding_FindingInfo as the provided InfoFinderFindingInfo
func (t *ScanFinding_FindingInfo) FromInfoFinderFindingInfo(v InfoFinderFindingInfo) error {
	v.ObjectType = "InfoFinder"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInfoFinderFindingInfo performs a merge with any union data inside the ScanFinding_FindingInfo, using the provided InfoFinderFindingInfo
func (t *ScanFinding_FindingInfo) MergeInfoFinderFindingInfo(v InfoFinderFindingInfo) error {
	v.ObjectType = "InfoFinder"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ScanFinding_FindingInfo) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"objectType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ScanFinding_FindingInfo) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "Exploit":
		return t.AsExploitFindingInfo()
	case "InfoFinder":
		return t.AsInfoFinderFindingInfo()
	case "Malware":
		return t.AsMalwareFindingInfo()
	case "Misconfiguration":
		return t.AsMisconfigurationFindingInfo()
	case "Package":
		return t.AsPackageFindingInfo()
	case "Rootkit":
		return t.AsRootkitFindingInfo()
	case "Secret":
		return t.AsSecretFindingInfo()
	case "Vulnerability":
		return t.AsVulnerabilityFindingInfo()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ScanFinding_FindingInfo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ScanFinding_FindingInfo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
