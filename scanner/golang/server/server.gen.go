// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/openclarity/vmclarity/scanner/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check if the API is alive and responsive
	// (GET /livez)
	IsAlive(ctx echo.Context) error
	// Check if the API is ready to receive traffic
	// (GET /readyz)
	IsReady(ctx echo.Context) error
	// Get current scan result
	// (GET /scan/result)
	GetScanResult(ctx echo.Context) error
	// Start a scan
	// (POST /scan/start)
	StartScan(ctx echo.Context) error
	// Get current scan details
	// (GET /scan/status)
	GetScan(ctx echo.Context) error
	// Stop a scan
	// (DELETE /scan/stop)
	StopScan(ctx echo.Context, params StopScanParams) error
	// Fetches runtime scanner details
	// (GET /scanner)
	GetScannerInfo(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// IsAlive converts echo context to params.
func (w *ServerInterfaceWrapper) IsAlive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsAlive(ctx)
	return err
}

// IsReady converts echo context to params.
func (w *ServerInterfaceWrapper) IsReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsReady(ctx)
	return err
}

// GetScanResult converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResult(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScanResult(ctx)
	return err
}

// StartScan converts echo context to params.
func (w *ServerInterfaceWrapper) StartScan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartScan(ctx)
	return err
}

// GetScan converts echo context to params.
func (w *ServerInterfaceWrapper) GetScan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScan(ctx)
	return err
}

// StopScan converts echo context to params.
func (w *ServerInterfaceWrapper) StopScan(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params StopScanParams
	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StopScan(ctx, params)
	return err
}

// GetScannerInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetScannerInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScannerInfo(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/livez", wrapper.IsAlive)
	router.GET(baseURL+"/readyz", wrapper.IsReady)
	router.GET(baseURL+"/scan/result", wrapper.GetScanResult)
	router.POST(baseURL+"/scan/start", wrapper.StartScan)
	router.GET(baseURL+"/scan/status", wrapper.GetScan)
	router.DELETE(baseURL+"/scan/stop", wrapper.StopScan)
	router.GET(baseURL+"/scanner", wrapper.GetScannerInfo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
