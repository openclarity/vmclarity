// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/openclarity/vmclarity/scanner/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all findings for a given scan.
	// (GET /findings/{scanID})
	GetScanFindingsForScan(ctx echo.Context, scanID ScanID) error
	// Check if the API is alive and responsive.
	// (GET /livez)
	IsAlive(ctx echo.Context) error
	// Check if the API is ready to receive traffic.
	// (GET /readyz)
	IsReady(ctx echo.Context) error
	// Get scan.
	// (GET /scan/{scanID})
	GetScan(ctx echo.Context, scanID ScanID) error
	// Submit a scan event.
	// (POST /scan/{scanID}/event)
	SubmitScanEvent(ctx echo.Context, scanID ScanID) error
	// Mark scan as aborted.
	// (POST /scan/{scanID}/stop)
	MarkScanAborted(ctx echo.Context, scanID ScanID) error
	// Get all scans.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a new scan.
	// (POST /scans)
	CreateScan(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetScanFindingsForScan converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanFindingsForScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScanFindingsForScan(ctx, scanID)
	return err
}

// IsAlive converts echo context to params.
func (w *ServerInterfaceWrapper) IsAlive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsAlive(ctx)
	return err
}

// IsReady converts echo context to params.
func (w *ServerInterfaceWrapper) IsReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsReady(ctx)
	return err
}

// GetScan converts echo context to params.
func (w *ServerInterfaceWrapper) GetScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScan(ctx, scanID)
	return err
}

// SubmitScanEvent converts echo context to params.
func (w *ServerInterfaceWrapper) SubmitScanEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SubmitScanEvent(ctx, scanID)
	return err
}

// MarkScanAborted converts echo context to params.
func (w *ServerInterfaceWrapper) MarkScanAborted(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MarkScanAborted(ctx, scanID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Optional query parameter "metaSelectors" -------------

	err = runtime.BindQueryParameter("form", true, false, "metaSelectors", ctx.QueryParams(), &params.MetaSelectors)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metaSelectors: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// CreateScan converts echo context to params.
func (w *ServerInterfaceWrapper) CreateScan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateScan(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/findings/:scanID", wrapper.GetScanFindingsForScan)
	router.GET(baseURL+"/livez", wrapper.IsAlive)
	router.GET(baseURL+"/readyz", wrapper.IsReady)
	router.GET(baseURL+"/scan/:scanID", wrapper.GetScan)
	router.POST(baseURL+"/scan/:scanID/event", wrapper.SubmitScanEvent)
	router.POST(baseURL+"/scan/:scanID/stop", wrapper.MarkScanAborted)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.CreateScan)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
