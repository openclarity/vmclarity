// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/openclarity/vmclarity/scanner/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check if the API is alive and responsive
	// (GET /livez)
	IsAlive(ctx echo.Context) error
	// Check if the API is ready to receive traffic
	// (GET /readyz)
	IsReady(ctx echo.Context) error
	// Create a scan
	// (POST /scan)
	CreateScan(ctx echo.Context) error
	// Stop a scan
	// (DELETE /scan/{scanID})
	StopScan(ctx echo.Context, scanID ScanID) error
	// Get scan details
	// (GET /scan/{scanID})
	GetScan(ctx echo.Context, scanID ScanID) error
	// Get scan result
	// (GET /scan/{scanID}/result)
	GetScanResult(ctx echo.Context, scanID ScanID) error
	// Fetches runtime scanner details
	// (GET /scanner)
	GetScannerInfo(ctx echo.Context) error
	// List all scans
	// (GET /scans)
	ListScans(ctx echo.Context, params ListScansParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// IsAlive converts echo context to params.
func (w *ServerInterfaceWrapper) IsAlive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsAlive(ctx)
	return err
}

// IsReady converts echo context to params.
func (w *ServerInterfaceWrapper) IsReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsReady(ctx)
	return err
}

// CreateScan converts echo context to params.
func (w *ServerInterfaceWrapper) CreateScan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateScan(ctx)
	return err
}

// StopScan converts echo context to params.
func (w *ServerInterfaceWrapper) StopScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StopScan(ctx, scanID)
	return err
}

// GetScan converts echo context to params.
func (w *ServerInterfaceWrapper) GetScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScan(ctx, scanID)
	return err
}

// GetScanResult converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResult(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScanResult(ctx, scanID)
	return err
}

// GetScannerInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetScannerInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScannerInfo(ctx)
	return err
}

// ListScans converts echo context to params.
func (w *ServerInterfaceWrapper) ListScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListScansParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListScans(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/livez", wrapper.IsAlive)
	router.GET(baseURL+"/readyz", wrapper.IsReady)
	router.POST(baseURL+"/scan", wrapper.CreateScan)
	router.DELETE(baseURL+"/scan/:scanID", wrapper.StopScan)
	router.GET(baseURL+"/scan/:scanID", wrapper.GetScan)
	router.GET(baseURL+"/scan/:scanID/result", wrapper.GetScanResult)
	router.GET(baseURL+"/scanner", wrapper.GetScannerInfo)
	router.GET(baseURL+"/scans", wrapper.ListScans)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
