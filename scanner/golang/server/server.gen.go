// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/openclarity/vmclarity/scanner/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all available findings.
	// (GET /findings)
	GetFindings(ctx echo.Context, params GetFindingsParams) error
	// Get all findings for a given scan.
	// (GET /findings/{scanID})
	GetScanFindingsForScan(ctx echo.Context, scanID ScanID) error
	// Check if the API is alive and responsive.
	// (GET /livez)
	IsAlive(ctx echo.Context) error
	// Check if the API is ready to receive traffic.
	// (GET /readyz)
	IsReady(ctx echo.Context) error
	// Get scan.
	// (GET /scan/{scanID})
	GetScan(ctx echo.Context, scanID ScanID) error
	// Submit a scan event.
	// (POST /scan/{scanID}/event)
	SubmitScanEvent(ctx echo.Context, scanID ScanID) error
	// Mark scan as aborted.
	// (POST /scan/{scanID}/stop)
	MarkScanAborted(ctx echo.Context, scanID ScanID) error
	// Get all scans.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a new scan.
	// (POST /scans)
	CreateScan(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetFindings converts echo context to params.
func (w *ServerInterfaceWrapper) GetFindings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFindingsParams
	// ------------- Optional query parameter "metaSelectors" -------------

	err = runtime.BindQueryParameter("form", true, false, "metaSelectors", ctx.QueryParams(), &params.MetaSelectors)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metaSelectors: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFindings(ctx, params)
	return err
}

// GetScanFindingsForScan converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanFindingsForScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScanFindingsForScan(ctx, scanID)
	return err
}

// IsAlive converts echo context to params.
func (w *ServerInterfaceWrapper) IsAlive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsAlive(ctx)
	return err
}

// IsReady converts echo context to params.
func (w *ServerInterfaceWrapper) IsReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsReady(ctx)
	return err
}

// GetScan converts echo context to params.
func (w *ServerInterfaceWrapper) GetScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScan(ctx, scanID)
	return err
}

// SubmitScanEvent converts echo context to params.
func (w *ServerInterfaceWrapper) SubmitScanEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SubmitScanEvent(ctx, scanID)
	return err
}

// MarkScanAborted converts echo context to params.
func (w *ServerInterfaceWrapper) MarkScanAborted(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MarkScanAborted(ctx, scanID)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Optional query parameter "metaSelectors" -------------

	err = runtime.BindQueryParameter("form", true, false, "metaSelectors", ctx.QueryParams(), &params.MetaSelectors)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metaSelectors: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// CreateScan converts echo context to params.
func (w *ServerInterfaceWrapper) CreateScan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateScan(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/findings", wrapper.GetFindings)
	router.GET(baseURL+"/findings/:scanID", wrapper.GetScanFindingsForScan)
	router.GET(baseURL+"/livez", wrapper.IsAlive)
	router.GET(baseURL+"/readyz", wrapper.IsReady)
	router.GET(baseURL+"/scan/:scanID", wrapper.GetScan)
	router.POST(baseURL+"/scan/:scanID/event", wrapper.SubmitScanEvent)
	router.POST(baseURL+"/scan/:scanID/stop", wrapper.MarkScanAborted)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.CreateScan)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"GePn5/8NAAD//9MqRdp6SgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
