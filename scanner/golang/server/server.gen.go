// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/openclarity/vmclarity/scanner/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check if the API is alive and responsive
	// (GET /livez)
	IsAlive(ctx echo.Context) error
	// Check if the API is ready to receive traffic
	// (GET /readyz)
	IsReady(ctx echo.Context) error
	// Get current scan result
	// (GET /scan/result)
	GetScanResult(ctx echo.Context) error
	// Start a scan
	// (POST /scan/start)
	StartScan(ctx echo.Context) error
	// Get current scan details
	// (GET /scan/status)
	GetScan(ctx echo.Context) error
	// Stop a scan
	// (DELETE /scan/stop)
	StopScan(ctx echo.Context, params StopScanParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// IsAlive converts echo context to params.
func (w *ServerInterfaceWrapper) IsAlive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsAlive(ctx)
	return err
}

// IsReady converts echo context to params.
func (w *ServerInterfaceWrapper) IsReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsReady(ctx)
	return err
}

// GetScanResult converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResult(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScanResult(ctx)
	return err
}

// StartScan converts echo context to params.
func (w *ServerInterfaceWrapper) StartScan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartScan(ctx)
	return err
}

// GetScan converts echo context to params.
func (w *ServerInterfaceWrapper) GetScan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScan(ctx)
	return err
}

// StopScan converts echo context to params.
func (w *ServerInterfaceWrapper) StopScan(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params StopScanParams
	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StopScan(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/livez", wrapper.IsAlive)
	router.GET(baseURL+"/readyz", wrapper.IsReady)
	router.GET(baseURL+"/scan/result", wrapper.GetScanResult)
	router.POST(baseURL+"/scan/start", wrapper.StartScan)
	router.GET(baseURL+"/scan/status", wrapper.GetScan)
	router.DELETE(baseURL+"/scan/stop", wrapper.StopScan)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
