// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/scanner/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check if the API is alive and responsive
	// (GET /livez)
	IsAlive(ctx echo.Context) error
	// Check if the API is ready to receive traffic
	// (GET /readyz)
	IsReady(ctx echo.Context) error
	// Get current scan details
	// (GET /scan)
	GetScan(ctx echo.Context) error
	// Get current scan result
	// (GET /scan/result)
	GetScanResult(ctx echo.Context) error
	// Start a new scan
	// (POST /scan/start)
	StartScan(ctx echo.Context) error
	// Stop a scan
	// (DELETE /scan/stop)
	StopScan(ctx echo.Context) error
	// Fetches runtime scanner details
	// (GET /scanner)
	GetScannerInfo(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// IsAlive converts echo context to params.
func (w *ServerInterfaceWrapper) IsAlive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsAlive(ctx)
	return err
}

// IsReady converts echo context to params.
func (w *ServerInterfaceWrapper) IsReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsReady(ctx)
	return err
}

// GetScan converts echo context to params.
func (w *ServerInterfaceWrapper) GetScan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScan(ctx)
	return err
}

// GetScanResult converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResult(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScanResult(ctx)
	return err
}

// StartScan converts echo context to params.
func (w *ServerInterfaceWrapper) StartScan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartScan(ctx)
	return err
}

// StopScan converts echo context to params.
func (w *ServerInterfaceWrapper) StopScan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StopScan(ctx)
	return err
}

// GetScannerInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetScannerInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScannerInfo(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/livez", wrapper.IsAlive)
	router.GET(baseURL+"/readyz", wrapper.IsReady)
	router.GET(baseURL+"/scan", wrapper.GetScan)
	router.GET(baseURL+"/scan/result", wrapper.GetScanResult)
	router.POST(baseURL+"/scan/start", wrapper.StartScan)
	router.DELETE(baseURL+"/scan/stop", wrapper.StopScan)
	router.GET(baseURL+"/scanner", wrapper.GetScannerInfo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//xSRNxzfOQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
