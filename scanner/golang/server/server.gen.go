// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/openclarity/vmclarity/scanner/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check if the API is alive and responsive.
	// (GET /livez)
	IsAlive(ctx echo.Context) error
	// Check if the API is ready to receive traffic.
	// (GET /readyz)
	IsReady(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scan/{scanID})
	DeleteScan(ctx echo.Context, scanID ScanID) error
	// Get scan details.
	// (GET /scan/{scanID})
	GetScan(ctx echo.Context, scanID ScanID) error
	// Get scan result
	// (GET /scan/{scanID}/result)
	GetScanResult(ctx echo.Context, scanID ScanID) error
	// Stop currently running scan.
	// (POST /scan/{scanID}/stop)
	StopScan(ctx echo.Context, scanID ScanID) error
	// Fetches runtime scanner details.
	// (GET /scanner)
	GetScannerInfo(ctx echo.Context) error
	// Get all scans.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a new scan.
	// (POST /scans)
	CreateScan(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// IsAlive converts echo context to params.
func (w *ServerInterfaceWrapper) IsAlive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsAlive(ctx)
	return err
}

// IsReady converts echo context to params.
func (w *ServerInterfaceWrapper) IsReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsReady(ctx)
	return err
}

// DeleteScan converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteScan(ctx, scanID)
	return err
}

// GetScan converts echo context to params.
func (w *ServerInterfaceWrapper) GetScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScan(ctx, scanID)
	return err
}

// GetScanResult converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResult(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScanResult(ctx, scanID)
	return err
}

// StopScan converts echo context to params.
func (w *ServerInterfaceWrapper) StopScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StopScan(ctx, scanID)
	return err
}

// GetScannerInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetScannerInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScannerInfo(ctx)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// CreateScan converts echo context to params.
func (w *ServerInterfaceWrapper) CreateScan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateScan(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/livez", wrapper.IsAlive)
	router.GET(baseURL+"/readyz", wrapper.IsReady)
	router.DELETE(baseURL+"/scan/:scanID", wrapper.DeleteScan)
	router.GET(baseURL+"/scan/:scanID", wrapper.GetScan)
	router.GET(baseURL+"/scan/:scanID/result", wrapper.GetScanResult)
	router.POST(baseURL+"/scan/:scanID/stop", wrapper.StopScan)
	router.GET(baseURL+"/scanner", wrapper.GetScannerInfo)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.CreateScan)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
