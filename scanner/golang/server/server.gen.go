// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/openclarity/vmclarity/scanner/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check if the API is alive and responsive.
	// (GET /livez)
	IsAlive(ctx echo.Context) error
	// Check if the API is ready to receive traffic.
	// (GET /readyz)
	IsReady(ctx echo.Context) error
	// Delete a scan.
	// (DELETE /scan/{scanID})
	DeleteScan(ctx echo.Context, scanID ScanID) error
	// Get scan details.
	// (GET /scan/{scanID})
	GetScan(ctx echo.Context, scanID ScanID) error
	// Get scan result
	// (GET /scan/{scanID}/result)
	GetScanResult(ctx echo.Context, scanID ScanID) error
	// Stop currently running scan.
	// (POST /scan/{scanID}/stop)
	StopScan(ctx echo.Context, scanID ScanID) error
	// Fetches runtime scanner details.
	// (GET /scanner)
	GetScannerInfo(ctx echo.Context) error
	// Get all scans.
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
	// Create a new scan.
	// (POST /scans)
	CreateScan(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// IsAlive converts echo context to params.
func (w *ServerInterfaceWrapper) IsAlive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsAlive(ctx)
	return err
}

// IsReady converts echo context to params.
func (w *ServerInterfaceWrapper) IsReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsReady(ctx)
	return err
}

// DeleteScan converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteScan(ctx, scanID)
	return err
}

// GetScan converts echo context to params.
func (w *ServerInterfaceWrapper) GetScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScan(ctx, scanID)
	return err
}

// GetScanResult converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResult(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScanResult(ctx, scanID)
	return err
}

// StopScan converts echo context to params.
func (w *ServerInterfaceWrapper) StopScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StopScan(ctx, scanID)
	return err
}

// GetScannerInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetScannerInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScannerInfo(ctx)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// CreateScan converts echo context to params.
func (w *ServerInterfaceWrapper) CreateScan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateScan(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/livez", wrapper.IsAlive)
	router.GET(baseURL+"/readyz", wrapper.IsReady)
	router.DELETE(baseURL+"/scan/:scanID", wrapper.DeleteScan)
	router.GET(baseURL+"/scan/:scanID", wrapper.GetScan)
	router.GET(baseURL+"/scan/:scanID/result", wrapper.GetScanResult)
	router.POST(baseURL+"/scan/:scanID/stop", wrapper.StopScan)
	router.GET(baseURL+"/scanner", wrapper.GetScannerInfo)
	router.GET(baseURL+"/scans", wrapper.GetScans)
	router.POST(baseURL+"/scans", wrapper.CreateScan)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
