// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/openclarity/vmclarity/scanner/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check if the API is alive and responsive
	// (GET /livez)
	IsAlive(ctx echo.Context) error
	// Check if the API is ready to receive traffic
	// (GET /readyz)
	IsReady(ctx echo.Context) error
	// Create a scan
	// (POST /scan)
	CreateScan(ctx echo.Context) error
	// Stop a scan
	// (DELETE /scan/{scanID})
	StopScan(ctx echo.Context, scanID ScanID) error
	// Get scan details
	// (GET /scan/{scanID})
	GetScan(ctx echo.Context, scanID ScanID) error
	// Get scan result
	// (GET /scan/{scanID}/result)
	GetScanResult(ctx echo.Context, scanID ScanID) error
	// Fetches runtime scanner details
	// (GET /scanner-info)
	GetScannerInfo(ctx echo.Context) error
	// Get all scans based on the filter
	// (GET /scans)
	GetScans(ctx echo.Context, params GetScansParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// IsAlive converts echo context to params.
func (w *ServerInterfaceWrapper) IsAlive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsAlive(ctx)
	return err
}

// IsReady converts echo context to params.
func (w *ServerInterfaceWrapper) IsReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IsReady(ctx)
	return err
}

// CreateScan converts echo context to params.
func (w *ServerInterfaceWrapper) CreateScan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateScan(ctx)
	return err
}

// StopScan converts echo context to params.
func (w *ServerInterfaceWrapper) StopScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StopScan(ctx, scanID)
	return err
}

// GetScan converts echo context to params.
func (w *ServerInterfaceWrapper) GetScan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScan(ctx, scanID)
	return err
}

// GetScanResult converts echo context to params.
func (w *ServerInterfaceWrapper) GetScanResult(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scanID" -------------
	var scanID ScanID

	err = runtime.BindStyledParameterWithOptions("simple", "scanID", ctx.Param("scanID"), &scanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScanResult(ctx, scanID)
	return err
}

// GetScannerInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetScannerInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScannerInfo(ctx)
	return err
}

// GetScans converts echo context to params.
func (w *ServerInterfaceWrapper) GetScans(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScansParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScans(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/livez", wrapper.IsAlive)
	router.GET(baseURL+"/readyz", wrapper.IsReady)
	router.POST(baseURL+"/scan", wrapper.CreateScan)
	router.DELETE(baseURL+"/scan/:scanID", wrapper.StopScan)
	router.GET(baseURL+"/scan/:scanID", wrapper.GetScan)
	router.GET(baseURL+"/scan/:scanID/result", wrapper.GetScanResult)
	router.GET(baseURL+"/scanner-info", wrapper.GetScannerInfo)
	router.GET(baseURL+"/scans", wrapper.GetScans)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Y6YhIVJUTXNjGzQPD/8OAAD//+ZuuUMjPAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
