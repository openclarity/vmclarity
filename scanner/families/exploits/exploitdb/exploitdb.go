// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package exploitdb

import (
	"context"
	"encoding/json"
	"fmt"
	log "github.com/sirupsen/logrus"
	exploitmodels "github.com/vulsio/go-exploitdb/models"
	"net/url"

	"github.com/openclarity/vmclarity/scanner/families/exploits/exploitdb/config"
	"github.com/openclarity/vmclarity/scanner/families/exploits/types"
	"github.com/openclarity/vmclarity/scanner/job_manager"
	"github.com/openclarity/vmclarity/scanner/utils"
)

const ScannerName = "exploitdb"

type Scanner struct {
	name       string
	logger     *log.Entry
	config     config.Config
	resultChan chan job_manager.Result
}

func New(_ string, c job_manager.IsConfig, logger *log.Entry, resultChan chan job_manager.Result) job_manager.Job {
	conf := c.(*types.ScannersConfig) // nolint:forcetypeassert
	return &Scanner{
		name:       ScannerName,
		logger:     logger.Dup().WithField("scanner", ScannerName),
		config:     config.Config{BaseURL: conf.ExploitDB.BaseURL},
		resultChan: resultChan,
	}
}

func (a *Scanner) Run(ctx context.Context, sourceType utils.SourceType, userInput string) error {
	go func(ctx context.Context) {
		retResults := types.ScannerResult{
			ScannedInput: userInput,
			ScannerName:  ScannerName,
		}
		if !a.isValidInputType(sourceType) {
			a.sendResults(retResults, nil)
			return
		}

		cveIDs := stringToArray(userInput)
		if cveIDs == nil {
			a.sendResults(retResults, nil)
			return
		}

		// get exploits (get request to exploit db)
		exploits, err := a.getExploitsFromCVEIDs(ctx, cveIDs)
		if err != nil {
			a.sendResults(retResults, fmt.Errorf("failed to get exploits from cve ids: %w", err))
			return
		}
		retResults.Exploits = exploits

		a.sendResults(retResults, nil)
	}(ctx)

	return nil
}

func (a *Scanner) getExploitsFromCVEIDs(ctx context.Context, cveIDs []string) ([]types.Exploit, error) {
	var ret []types.Exploit
	prefix, err := url.JoinPath(a.config.BaseURL, "cves")
	if err != nil {
		return nil, fmt.Errorf("failed to join URLPath: %w", err)
	}
	responses, err := getExploitsViaHTTP(ctx, cveIDs, prefix)
	if err != nil {
		return nil, fmt.Errorf("failed to get exploits via HTTP: %w", err)
	}
	for _, res := range responses {
		exps := []exploitmodels.Exploit{}
		if err := json.Unmarshal([]byte(res.json), &exps); err != nil {
			return nil, fmt.Errorf("failed to unmarshal json: %w", err)
		}
		exploits := convertToCommonExploits(exps, res.request.cveID)
		ret = append(ret, exploits...)
	}
	return ret, nil
}

func (a *Scanner) isValidInputType(sourceType utils.SourceType) bool {
	switch sourceType {
	case "csv":
		return true
	case utils.DIR, utils.ROOTFS, utils.FILE, utils.IMAGE, utils.SBOM, utils.DOCKERARCHIVE, utils.OCIARCHIVE, utils.OCIDIR:
		a.logger.Infof("source type %v is not supported for exploitsdb, skipping.", sourceType)
	default:
		a.logger.Infof("unknown source type %v, skipping.", sourceType)
	}
	return false
}

func (a *Scanner) sendResults(results types.ScannerResult, err error) {
	if err != nil {
		a.logger.Error(err)
		results.Error = err
	}
	select {
	case a.resultChan <- &results:
	default:
		a.logger.Error("Failed to send results on channel")
	}
}
