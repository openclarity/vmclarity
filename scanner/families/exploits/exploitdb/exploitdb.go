// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package exploitdb

import (
	"context"
	"encoding/json"
	"fmt"
	familiestypes "github.com/openclarity/vmclarity/scanner/families/types"
	scanner "github.com/openclarity/vmclarity/scanner/types"
	log "github.com/sirupsen/logrus"
	exploitmodels "github.com/vulsio/go-exploitdb/models"
	"net/url"

	exploitdbconfig "github.com/openclarity/vmclarity/scanner/families/exploits/exploitdb/config"
	"github.com/openclarity/vmclarity/scanner/families/exploits/types"
)

const ScannerName = "exploitdb"

func init() {
	types.FactoryRegister(ScannerName, New)
}

type Scanner struct {
	logger *log.Entry
	config exploitdbconfig.Config
}

func New(_ string, config types.ScannersConfig, logger *log.Entry) familiestypes.Scanner[[]types.Exploit] {
	return &Scanner{
		logger: logger.Dup().WithField("scanner", ScannerName),
		config: config.ExploitDB,
	}
}

func (a *Scanner) Scan(ctx context.Context, sourceType scanner.InputType, userInput string) ([]types.Exploit, error) {
	if !a.isValidInputType(sourceType) {
		return nil, nil
	}

	cveIDs := stringToArray(userInput)
	if cveIDs == nil {
		return nil, nil
	}

	// get exploits (get request to exploit db)
	exploits, err := a.getExploitsFromCVEIDs(ctx, cveIDs)
	if err != nil {
		return nil, fmt.Errorf("failed to get exploits from cve ids: %w", err)
	}

	return exploits, nil
}

func (a *Scanner) getExploitsFromCVEIDs(ctx context.Context, cveIDs []string) ([]types.Exploit, error) {
	var ret []types.Exploit
	prefix, err := url.JoinPath(a.config.BaseURL, "cves")
	if err != nil {
		return nil, fmt.Errorf("failed to join URLPath: %w", err)
	}
	responses, err := getExploitsViaHTTP(ctx, cveIDs, prefix)
	if err != nil {
		return nil, fmt.Errorf("failed to get exploits via HTTP: %w", err)
	}
	for _, res := range responses {
		exps := []exploitmodels.Exploit{}
		if err := json.Unmarshal([]byte(res.json), &exps); err != nil {
			return nil, fmt.Errorf("failed to unmarshal json: %w", err)
		}
		exploits := convertToCommonExploits(exps, res.request.cveID)
		ret = append(ret, exploits...)
	}
	return ret, nil
}

func (a *Scanner) isValidInputType(sourceType scanner.InputType) bool {
	switch sourceType {
	case "csv":
		return true
	case scanner.DIR, scanner.ROOTFS, scanner.FILE, scanner.IMAGE, scanner.SBOM, scanner.DOCKERARCHIVE, scanner.OCIARCHIVE, scanner.OCIDIR:
		a.logger.Infof("source type %v is not supported for exploitsdb, skipping.", sourceType)
	default:
		a.logger.Infof("unknown source type %v, skipping.", sourceType)
	}
	return false
}
