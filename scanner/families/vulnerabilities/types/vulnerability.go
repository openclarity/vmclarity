// Copyright Â© 2022 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package types

import (
	"encoding/json"
	"fmt"
	"sort"

	log "github.com/sirupsen/logrus"
	"github.com/yudai/gojsondiff"
	"github.com/yudai/gojsondiff/formatter"
)

type Vulnerability struct {
	ID          string   `json:"id"`
	Description string   `json:"description,omitempty"`
	Links       []string `json:"links"`
	Distro      Distro   `json:"distro"`
	CVSS        []CVSS   `json:"cvss"`
	Fix         Fix      `json:"fix"`
	Severity    string   `json:"severity,omitempty"`
	Package     Package  `json:"package"`
	LayerID     string   `json:"layerID"`
	Path        string   `json:"path"`
}

func (v Vulnerability) sorted() Vulnerability {
	sort.Slice(v.CVSS, func(i, j int) bool {
		return v.CVSS[i].Version < v.CVSS[j].Version
	})
	sort.Strings(v.Links)
	sort.Strings(v.Fix.Versions)
	sort.Strings(v.Package.CPEs)
	sort.Strings(v.Package.Licenses)
	return v
}

type CVSS struct {
	Source         string      `json:"source,omitempty"`
	Type           string      `json:"type,omitempty"`
	Version        string      `json:"version"`
	Vector         string      `json:"vector"`
	Metrics        CvssMetrics `json:"metrics"`
	VendorMetadata interface{} `json:"vendorMetadata"`
}

type CvssMetrics struct {
	BaseScore           float64  `json:"baseScore"`
	ExploitabilityScore *float64 `json:"exploitabilityScore,omitempty"`
	ImpactScore         *float64 `json:"impactScore,omitempty"`
}

type Fix struct {
	Versions []string `json:"versions"`
	State    string   `json:"state"`
}

func (f Fix) enrich(ff Fix) Fix {
	f.Versions = mergeSlicesWithoutDuplicates(f.Versions, ff.Versions)

	if f.State == "" || f.State == "unknown" {
		f.State = ff.State
	}

	return f
}

type Package struct {
	Name     string   `json:"name"`
	Version  string   `json:"version"`
	Type     string   `json:"type"`     // apk, gem, deb, ...
	Language string   `json:"language"` // java, python, go, ...
	Licenses []string `json:"licenses"`
	CPEs     []string `json:"cpes"`
	PURL     string   `json:"purl"`
}

// Distro provides information about a detected Linux distribution.
type Distro struct {
	Name    string   `json:"name"`    // Name of the Linux distribution
	Version string   `json:"version"` // Version of the Linux distribution (major or major.minor version)
	IDLike  []string `json:"idLike"`  // the ID_LIKE field found within the /etc/os-release file
}

func (d Distro) enrich(dd Distro) Distro {
	if d.Name == "" {
		d.Name = dd.Name
	}

	if d.Version == "" {
		d.Version = dd.Version
	}

	d.IDLike = mergeSlicesWithoutDuplicates(d.IDLike, dd.IDLike)

	return d
}

type VulnerabilityKey string // Unique identification of a vulnerability ID per package (name and version)

func NewVulnerabilityKey(vulnerability Vulnerability) VulnerabilityKey {
	return VulnerabilityKey(fmt.Sprintf("%s.%s.%s", vulnerability.ID, vulnerability.Package.Name, vulnerability.Package.Version))
}

type VulnerabilityDiff struct {
	CompareToID string                 `json:"compareToID"`
	JSONDiff    map[string]interface{} `json:"jsonDiff"`
	ASCIIDiff   string                 `json:"asciiDiff"`
}

func mergeSlicesWithoutDuplicates[T comparable](slice1, slice2 []T) []T {
	if slice1 == nil && slice2 == nil {
		return nil
	}

	elementMap := make(map[T]bool)
	result := []T{}

	for _, elem := range slice1 {
		if !elementMap[elem] {
			elementMap[elem] = true
			result = append(result, elem)
		}
	}

	for _, elem := range slice2 {
		if !elementMap[elem] {
			elementMap[elem] = true
			result = append(result, elem)
		}
	}

	return result
}

func mergeCVSSSlicesWithoutDuplicates(cvss1, cvss2 []CVSS) []CVSS {
	if cvss1 == nil && cvss2 == nil {
		return nil
	}

	cvss := append(cvss1, cvss2...)

	// remove duplicates from cvss
	cvssMap := make(map[string]CVSS)
	for _, c := range cvss {
		b, err := json.Marshal(c)
		if err != nil {
			log.Errorf("failed to marshal cvss. c=%+v: %v", c, err)
			continue
		}
		cvssMap[string(b)] = c
	}

	cvss = make([]CVSS, 0, len(cvssMap))
	for _, c := range cvssMap {
		cvss = append(cvss, c)
	}

	return cvss
}

// handleVulnerabilityWithExistingKey merges two vulnerabilities with the same key.
func handleVulnerabilityWithExistingKey(vulnerability Vulnerability, otherVulnerability Vulnerability) Vulnerability {
	// Adopt longest description
	description := vulnerability.Description
	if len(otherVulnerability.Description) > len(description) {
		description = otherVulnerability.Description
	}

	return Vulnerability{
		ID:          vulnerability.ID, // Keep the original ID
		Description: description,
		Links:       mergeSlicesWithoutDuplicates(vulnerability.Links, otherVulnerability.Links),
		Distro:      vulnerability.Distro.enrich(otherVulnerability.Distro),
		CVSS:        mergeCVSSSlicesWithoutDuplicates(vulnerability.CVSS, otherVulnerability.CVSS),
		Fix:         vulnerability.Fix.enrich(otherVulnerability.Fix),
		Severity:    vulnerability.Severity, // Keep the original severity
		Package:     vulnerability.Package,  // Keep the original package
		LayerID:     vulnerability.LayerID,  // Keep the original layerID
		Path:        vulnerability.Path,     // Keep the original path
	}
}

func getDiff(vulnerability, compareToVulnerability Vulnerability, compareToID string) (*VulnerabilityDiff, error) {
	compareToVulnerabilityB, err := json.Marshal(compareToVulnerability.sorted())
	if err != nil {
		return nil, fmt.Errorf("failed to Marshal. compareToVulnerability=%+v: %w", compareToVulnerability, err)
	}

	vulnerabilityB, err := json.Marshal(vulnerability.sorted())
	if err != nil {
		return nil, fmt.Errorf("failed to Marshal. vulnerability=%+v: %w", vulnerability, err)
	}

	differ := gojsondiff.New()
	diff, err := differ.Compare(compareToVulnerabilityB, vulnerabilityB)
	if err != nil {
		return nil, fmt.Errorf("failed to compare vulnerabilities: %w", err)
	}

	// nolint:nilnil
	if !diff.Modified() {
		return nil, nil
	}

	var templateJSON map[string]interface{}
	err = json.Unmarshal(compareToVulnerabilityB, &templateJSON)
	if err != nil {
		return nil, fmt.Errorf("failed to Unmarshal. compareToVulnerabilityB=%s: %w", string(compareToVulnerabilityB), err)
	}

	asciiDiff, err := getASCIIFormatDiff(compareToVulnerabilityB, diff)
	if err != nil {
		return nil, fmt.Errorf("failed to get ascii format diff: %w", err)
	}

	jsonDiff, err := formatter.NewDeltaFormatter().FormatAsJson(diff)
	if err != nil {
		return nil, fmt.Errorf("failed to format delta diff: %w", err)
	}

	// TODO: do we want to ignore some fields in the diff calculation, links for example?

	return &VulnerabilityDiff{
		JSONDiff:    jsonDiff,
		ASCIIDiff:   asciiDiff,
		CompareToID: compareToID,
	}, nil
}

func getASCIIFormatDiff(compareToVulnerabilityB []byte, diff gojsondiff.Diff) (string, error) {
	config := formatter.AsciiFormatterConfig{
		ShowArrayIndex: true,
	}

	var compareToVulnerabilityJSON map[string]interface{}
	_ = json.Unmarshal(compareToVulnerabilityB, &compareToVulnerabilityJSON)
	asciiDiff, err := formatter.NewAsciiFormatter(compareToVulnerabilityJSON, config).Format(diff)
	if err != nil {
		return "", fmt.Errorf("failed to format ascii diff: %w", err)
	}

	return asciiDiff, nil
}
