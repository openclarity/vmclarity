// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scanner.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	scanner.proto

It has these top-level messages:
	Metadata
	ScannerInfo
	ScanRequest
	ScanSummary
	ScanResult
	Finding
	Secret
	Misconfiguration
	Rootkit
	Exploit
	InfoFinder
	Vulnerability
	Package
	VulnerabilityFix
	VulnerabilityCvss
	VulnerabilityCvssMetrics
	VulnerabilityDistro
	Malware
	Empty
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type ScanFamily int32

const (
	ScanFamily_SCAN_FAMILY_PACKAGE          ScanFamily = 0
	ScanFamily_SCAN_FAMILY_VULNERABILITY    ScanFamily = 1
	ScanFamily_SCAN_FAMILY_MALWARE          ScanFamily = 2
	ScanFamily_SCAN_FAMILY_SECRET           ScanFamily = 3
	ScanFamily_SCAN_FAMILY_MISCONFIGURATION ScanFamily = 4
	ScanFamily_SCAN_FAMILY_ROOTKIT          ScanFamily = 5
	ScanFamily_SCAN_FAMILY_EXPLOIT          ScanFamily = 6
	ScanFamily_SCAN_FAMILY_INFO_FINDER      ScanFamily = 7
)

var ScanFamily_name = map[int32]string{
	0: "SCAN_FAMILY_PACKAGE",
	1: "SCAN_FAMILY_VULNERABILITY",
	2: "SCAN_FAMILY_MALWARE",
	3: "SCAN_FAMILY_SECRET",
	4: "SCAN_FAMILY_MISCONFIGURATION",
	5: "SCAN_FAMILY_ROOTKIT",
	6: "SCAN_FAMILY_EXPLOIT",
	7: "SCAN_FAMILY_INFO_FINDER",
}
var ScanFamily_value = map[string]int32{
	"SCAN_FAMILY_PACKAGE":          0,
	"SCAN_FAMILY_VULNERABILITY":    1,
	"SCAN_FAMILY_MALWARE":          2,
	"SCAN_FAMILY_SECRET":           3,
	"SCAN_FAMILY_MISCONFIGURATION": 4,
	"SCAN_FAMILY_ROOTKIT":          5,
	"SCAN_FAMILY_EXPLOIT":          6,
	"SCAN_FAMILY_INFO_FINDER":      7,
}

func (x ScanFamily) String() string {
	return proto1.EnumName(ScanFamily_name, int32(x))
}
func (ScanFamily) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ScanObjectType int32

const (
	ScanObjectType_SCAN_OBJECT_TYPE_SBOM          ScanObjectType = 0
	ScanObjectType_SCAN_OBJECT_TYPE_IMAGE         ScanObjectType = 1
	ScanObjectType_SCAN_OBJECT_TYPE_DOCKERARCHIVE ScanObjectType = 2
	ScanObjectType_SCAN_OBJECT_TYPE_OCIARCHIVE    ScanObjectType = 3
	ScanObjectType_SCAN_OBJECT_TYPE_OCIDIR        ScanObjectType = 4
	ScanObjectType_SCAN_OBJECT_TYPE_DIR           ScanObjectType = 5
	ScanObjectType_SCAN_OBJECT_TYPE_ROOTFS        ScanObjectType = 6
	ScanObjectType_SCAN_OBJECT_TYPE_FILE          ScanObjectType = 7
)

var ScanObjectType_name = map[int32]string{
	0: "SCAN_OBJECT_TYPE_SBOM",
	1: "SCAN_OBJECT_TYPE_IMAGE",
	2: "SCAN_OBJECT_TYPE_DOCKERARCHIVE",
	3: "SCAN_OBJECT_TYPE_OCIARCHIVE",
	4: "SCAN_OBJECT_TYPE_OCIDIR",
	5: "SCAN_OBJECT_TYPE_DIR",
	6: "SCAN_OBJECT_TYPE_ROOTFS",
	7: "SCAN_OBJECT_TYPE_FILE",
}
var ScanObjectType_value = map[string]int32{
	"SCAN_OBJECT_TYPE_SBOM":          0,
	"SCAN_OBJECT_TYPE_IMAGE":         1,
	"SCAN_OBJECT_TYPE_DOCKERARCHIVE": 2,
	"SCAN_OBJECT_TYPE_OCIARCHIVE":    3,
	"SCAN_OBJECT_TYPE_OCIDIR":        4,
	"SCAN_OBJECT_TYPE_DIR":           5,
	"SCAN_OBJECT_TYPE_ROOTFS":        6,
	"SCAN_OBJECT_TYPE_FILE":          7,
}

func (x ScanObjectType) String() string {
	return proto1.EnumName(ScanObjectType_name, int32(x))
}
func (ScanObjectType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MisconfigurationSeverity int32

const (
	MisconfigurationSeverity_MISCONFIGURATION_SEVERITY_HIGH   MisconfigurationSeverity = 0
	MisconfigurationSeverity_MISCONFIGURATION_SEVERITY_MEDIUM MisconfigurationSeverity = 1
	MisconfigurationSeverity_MISCONFIGURATION_SEVERITY_LOW    MisconfigurationSeverity = 2
)

var MisconfigurationSeverity_name = map[int32]string{
	0: "MISCONFIGURATION_SEVERITY_HIGH",
	1: "MISCONFIGURATION_SEVERITY_MEDIUM",
	2: "MISCONFIGURATION_SEVERITY_LOW",
}
var MisconfigurationSeverity_value = map[string]int32{
	"MISCONFIGURATION_SEVERITY_HIGH":   0,
	"MISCONFIGURATION_SEVERITY_MEDIUM": 1,
	"MISCONFIGURATION_SEVERITY_LOW":    2,
}

func (x MisconfigurationSeverity) String() string {
	return proto1.EnumName(MisconfigurationSeverity_name, int32(x))
}
func (MisconfigurationSeverity) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type VulnerabilitySeverity int32

const (
	VulnerabilitySeverity_VULNERABILITY_SEVERITY_CRITICAL   VulnerabilitySeverity = 0
	VulnerabilitySeverity_VULNERABILITY_SEVERITY_HIGH       VulnerabilitySeverity = 1
	VulnerabilitySeverity_VULNERABILITY_SEVERITY_MEDIUM     VulnerabilitySeverity = 2
	VulnerabilitySeverity_VULNERABILITY_SEVERITY_LOW        VulnerabilitySeverity = 3
	VulnerabilitySeverity_VULNERABILITY_SEVERITY_NEGLIGIBLE VulnerabilitySeverity = 4
)

var VulnerabilitySeverity_name = map[int32]string{
	0: "VULNERABILITY_SEVERITY_CRITICAL",
	1: "VULNERABILITY_SEVERITY_HIGH",
	2: "VULNERABILITY_SEVERITY_MEDIUM",
	3: "VULNERABILITY_SEVERITY_LOW",
	4: "VULNERABILITY_SEVERITY_NEGLIGIBLE",
}
var VulnerabilitySeverity_value = map[string]int32{
	"VULNERABILITY_SEVERITY_CRITICAL":   0,
	"VULNERABILITY_SEVERITY_HIGH":       1,
	"VULNERABILITY_SEVERITY_MEDIUM":     2,
	"VULNERABILITY_SEVERITY_LOW":        3,
	"VULNERABILITY_SEVERITY_NEGLIGIBLE": 4,
}

func (x VulnerabilitySeverity) String() string {
	return proto1.EnumName(VulnerabilitySeverity_name, int32(x))
}
func (VulnerabilitySeverity) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RootkitType int32

const (
	RootkitType_ROOTKIT_TYPE_UNKNOWN     RootkitType = 0
	RootkitType_ROOTKIT_TYPE_MEMORY      RootkitType = 1
	RootkitType_ROOTKIT_TYPE_KERNEL      RootkitType = 2
	RootkitType_ROOTKIT_TYPE_APPLICATION RootkitType = 3
	RootkitType_ROOTKIT_TYPE_FIRMWARE    RootkitType = 4
)

var RootkitType_name = map[int32]string{
	0: "ROOTKIT_TYPE_UNKNOWN",
	1: "ROOTKIT_TYPE_MEMORY",
	2: "ROOTKIT_TYPE_KERNEL",
	3: "ROOTKIT_TYPE_APPLICATION",
	4: "ROOTKIT_TYPE_FIRMWARE",
}
var RootkitType_value = map[string]int32{
	"ROOTKIT_TYPE_UNKNOWN":     0,
	"ROOTKIT_TYPE_MEMORY":      1,
	"ROOTKIT_TYPE_KERNEL":      2,
	"ROOTKIT_TYPE_APPLICATION": 3,
	"ROOTKIT_TYPE_FIRMWARE":    4,
}

func (x RootkitType) String() string {
	return proto1.EnumName(RootkitType_name, int32(x))
}
func (RootkitType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type InfoType int32

const (
	InfoType_INFO_TYPE_UNKNOWN                        InfoType = 0
	InfoType_INFO_TYPE_SSH_KNOWN_HOST_FINGERPRINT     InfoType = 1
	InfoType_INFO_TYPE_SSH_AUTHORIZED_KEY_FINGERPRINT InfoType = 2
	InfoType_INFO_TYPE_SSH_PRIVATE_KEY_FINGERPRINT    InfoType = 3
	InfoType_INFO_TYPE_SSH_DAEMON_KEY_FINGERPRINT     InfoType = 4
)

var InfoType_name = map[int32]string{
	0: "INFO_TYPE_UNKNOWN",
	1: "INFO_TYPE_SSH_KNOWN_HOST_FINGERPRINT",
	2: "INFO_TYPE_SSH_AUTHORIZED_KEY_FINGERPRINT",
	3: "INFO_TYPE_SSH_PRIVATE_KEY_FINGERPRINT",
	4: "INFO_TYPE_SSH_DAEMON_KEY_FINGERPRINT",
}
var InfoType_value = map[string]int32{
	"INFO_TYPE_UNKNOWN":                        0,
	"INFO_TYPE_SSH_KNOWN_HOST_FINGERPRINT":     1,
	"INFO_TYPE_SSH_AUTHORIZED_KEY_FINGERPRINT": 2,
	"INFO_TYPE_SSH_PRIVATE_KEY_FINGERPRINT":    3,
	"INFO_TYPE_SSH_DAEMON_KEY_FINGERPRINT":     4,
}

func (x InfoType) String() string {
	return proto1.EnumName(InfoType_name, int32(x))
}
func (InfoType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Metadata struct {
	Annotations map[string]string `protobuf:"bytes,1,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto1.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Metadata) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type ScannerInfo struct {
	Metadata   *Metadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Name       string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Version    string    `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	ApiVersion string    `protobuf:"bytes,4,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
}

func (m *ScannerInfo) Reset()                    { *m = ScannerInfo{} }
func (m *ScannerInfo) String() string            { return proto1.CompactTextString(m) }
func (*ScannerInfo) ProtoMessage()               {}
func (*ScannerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ScannerInfo) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ScannerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScannerInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ScannerInfo) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

type ScanRequest struct {
	Id   string         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type ScanObjectType `protobuf:"varint,3,opt,name=type,enum=proto.ScanObjectType" json:"type,omitempty"`
	Path string         `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
}

func (m *ScanRequest) Reset()                    { *m = ScanRequest{} }
func (m *ScanRequest) String() string            { return proto1.CompactTextString(m) }
func (*ScanRequest) ProtoMessage()               {}
func (*ScanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ScanRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ScanRequest) GetType() ScanObjectType {
	if m != nil {
		return m.Type
	}
	return ScanObjectType_SCAN_OBJECT_TYPE_SBOM
}

func (m *ScanRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type ScanSummary struct {
	KnownViruses       int32  `protobuf:"varint,1,opt,name=known_viruses,json=knownViruses" json:"known_viruses,omitempty"`
	ScannedDirectories int32  `protobuf:"varint,2,opt,name=scanned_directories,json=scannedDirectories" json:"scanned_directories,omitempty"`
	ScannedFiles       int32  `protobuf:"varint,3,opt,name=scanned_files,json=scannedFiles" json:"scanned_files,omitempty"`
	InfectedFiles      int32  `protobuf:"varint,4,opt,name=infected_files,json=infectedFiles" json:"infected_files,omitempty"`
	SuspectedFiles     int32  `protobuf:"varint,5,opt,name=suspected_files,json=suspectedFiles" json:"suspected_files,omitempty"`
	DataScanned        string `protobuf:"bytes,6,opt,name=data_scanned,json=dataScanned" json:"data_scanned,omitempty"`
	DataRead           string `protobuf:"bytes,7,opt,name=data_read,json=dataRead" json:"data_read,omitempty"`
	TimeTaken          string `protobuf:"bytes,8,opt,name=time_taken,json=timeTaken" json:"time_taken,omitempty"`
}

func (m *ScanSummary) Reset()                    { *m = ScanSummary{} }
func (m *ScanSummary) String() string            { return proto1.CompactTextString(m) }
func (*ScanSummary) ProtoMessage()               {}
func (*ScanSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ScanSummary) GetKnownViruses() int32 {
	if m != nil {
		return m.KnownViruses
	}
	return 0
}

func (m *ScanSummary) GetScannedDirectories() int32 {
	if m != nil {
		return m.ScannedDirectories
	}
	return 0
}

func (m *ScanSummary) GetScannedFiles() int32 {
	if m != nil {
		return m.ScannedFiles
	}
	return 0
}

func (m *ScanSummary) GetInfectedFiles() int32 {
	if m != nil {
		return m.InfectedFiles
	}
	return 0
}

func (m *ScanSummary) GetSuspectedFiles() int32 {
	if m != nil {
		return m.SuspectedFiles
	}
	return 0
}

func (m *ScanSummary) GetDataScanned() string {
	if m != nil {
		return m.DataScanned
	}
	return ""
}

func (m *ScanSummary) GetDataRead() string {
	if m != nil {
		return m.DataRead
	}
	return ""
}

func (m *ScanSummary) GetTimeTaken() string {
	if m != nil {
		return m.TimeTaken
	}
	return ""
}

type ScanResult struct {
	Metadata *Metadata    `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Request  *ScanRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Findings []*Finding   `protobuf:"bytes,3,rep,name=findings" json:"findings,omitempty"`
	Error    string       `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	Summary  *ScanSummary `protobuf:"bytes,5,opt,name=summary" json:"summary,omitempty"`
}

func (m *ScanResult) Reset()                    { *m = ScanResult{} }
func (m *ScanResult) String() string            { return proto1.CompactTextString(m) }
func (*ScanResult) ProtoMessage()               {}
func (*ScanResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ScanResult) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ScanResult) GetRequest() *ScanRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ScanResult) GetFindings() []*Finding {
	if m != nil {
		return m.Findings
	}
	return nil
}

func (m *ScanResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ScanResult) GetSummary() *ScanSummary {
	if m != nil {
		return m.Summary
	}
	return nil
}

type Finding struct {
	// Types that are valid to be assigned to FindingInfo:
	//	*Finding_Package
	//	*Finding_Vulnerability
	//	*Finding_Malware
	//	*Finding_Secret
	//	*Finding_Misconfiguration
	//	*Finding_Rootkit
	//	*Finding_Exploit
	//	*Finding_Infofinder
	FindingInfo isFinding_FindingInfo `protobuf_oneof:"finding_info"`
}

func (m *Finding) Reset()                    { *m = Finding{} }
func (m *Finding) String() string            { return proto1.CompactTextString(m) }
func (*Finding) ProtoMessage()               {}
func (*Finding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isFinding_FindingInfo interface {
	isFinding_FindingInfo()
}

type Finding_Package struct {
	Package *Package `protobuf:"bytes,1,opt,name=package,oneof"`
}
type Finding_Vulnerability struct {
	Vulnerability *Vulnerability `protobuf:"bytes,2,opt,name=vulnerability,oneof"`
}
type Finding_Malware struct {
	Malware *Malware `protobuf:"bytes,3,opt,name=malware,oneof"`
}
type Finding_Secret struct {
	Secret *Secret `protobuf:"bytes,4,opt,name=secret,oneof"`
}
type Finding_Misconfiguration struct {
	Misconfiguration *Misconfiguration `protobuf:"bytes,5,opt,name=misconfiguration,oneof"`
}
type Finding_Rootkit struct {
	Rootkit *Rootkit `protobuf:"bytes,6,opt,name=rootkit,oneof"`
}
type Finding_Exploit struct {
	Exploit *Exploit `protobuf:"bytes,7,opt,name=exploit,oneof"`
}
type Finding_Infofinder struct {
	Infofinder *InfoFinder `protobuf:"bytes,8,opt,name=infofinder,oneof"`
}

func (*Finding_Package) isFinding_FindingInfo()          {}
func (*Finding_Vulnerability) isFinding_FindingInfo()    {}
func (*Finding_Malware) isFinding_FindingInfo()          {}
func (*Finding_Secret) isFinding_FindingInfo()           {}
func (*Finding_Misconfiguration) isFinding_FindingInfo() {}
func (*Finding_Rootkit) isFinding_FindingInfo()          {}
func (*Finding_Exploit) isFinding_FindingInfo()          {}
func (*Finding_Infofinder) isFinding_FindingInfo()       {}

func (m *Finding) GetFindingInfo() isFinding_FindingInfo {
	if m != nil {
		return m.FindingInfo
	}
	return nil
}

func (m *Finding) GetPackage() *Package {
	if x, ok := m.GetFindingInfo().(*Finding_Package); ok {
		return x.Package
	}
	return nil
}

func (m *Finding) GetVulnerability() *Vulnerability {
	if x, ok := m.GetFindingInfo().(*Finding_Vulnerability); ok {
		return x.Vulnerability
	}
	return nil
}

func (m *Finding) GetMalware() *Malware {
	if x, ok := m.GetFindingInfo().(*Finding_Malware); ok {
		return x.Malware
	}
	return nil
}

func (m *Finding) GetSecret() *Secret {
	if x, ok := m.GetFindingInfo().(*Finding_Secret); ok {
		return x.Secret
	}
	return nil
}

func (m *Finding) GetMisconfiguration() *Misconfiguration {
	if x, ok := m.GetFindingInfo().(*Finding_Misconfiguration); ok {
		return x.Misconfiguration
	}
	return nil
}

func (m *Finding) GetRootkit() *Rootkit {
	if x, ok := m.GetFindingInfo().(*Finding_Rootkit); ok {
		return x.Rootkit
	}
	return nil
}

func (m *Finding) GetExploit() *Exploit {
	if x, ok := m.GetFindingInfo().(*Finding_Exploit); ok {
		return x.Exploit
	}
	return nil
}

func (m *Finding) GetInfofinder() *InfoFinder {
	if x, ok := m.GetFindingInfo().(*Finding_Infofinder); ok {
		return x.Infofinder
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Finding) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _Finding_OneofMarshaler, _Finding_OneofUnmarshaler, _Finding_OneofSizer, []interface{}{
		(*Finding_Package)(nil),
		(*Finding_Vulnerability)(nil),
		(*Finding_Malware)(nil),
		(*Finding_Secret)(nil),
		(*Finding_Misconfiguration)(nil),
		(*Finding_Rootkit)(nil),
		(*Finding_Exploit)(nil),
		(*Finding_Infofinder)(nil),
	}
}

func _Finding_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Finding)
	// finding_info
	switch x := m.FindingInfo.(type) {
	case *Finding_Package:
		b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Package); err != nil {
			return err
		}
	case *Finding_Vulnerability:
		b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Vulnerability); err != nil {
			return err
		}
	case *Finding_Malware:
		b.EncodeVarint(3<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Malware); err != nil {
			return err
		}
	case *Finding_Secret:
		b.EncodeVarint(4<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Secret); err != nil {
			return err
		}
	case *Finding_Misconfiguration:
		b.EncodeVarint(5<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Misconfiguration); err != nil {
			return err
		}
	case *Finding_Rootkit:
		b.EncodeVarint(6<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Rootkit); err != nil {
			return err
		}
	case *Finding_Exploit:
		b.EncodeVarint(7<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Exploit); err != nil {
			return err
		}
	case *Finding_Infofinder:
		b.EncodeVarint(8<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Infofinder); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Finding.FindingInfo has unexpected type %T", x)
	}
	return nil
}

func _Finding_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Finding)
	switch tag {
	case 1: // finding_info.package
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Package)
		err := b.DecodeMessage(msg)
		m.FindingInfo = &Finding_Package{msg}
		return true, err
	case 2: // finding_info.vulnerability
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Vulnerability)
		err := b.DecodeMessage(msg)
		m.FindingInfo = &Finding_Vulnerability{msg}
		return true, err
	case 3: // finding_info.malware
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Malware)
		err := b.DecodeMessage(msg)
		m.FindingInfo = &Finding_Malware{msg}
		return true, err
	case 4: // finding_info.secret
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Secret)
		err := b.DecodeMessage(msg)
		m.FindingInfo = &Finding_Secret{msg}
		return true, err
	case 5: // finding_info.misconfiguration
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Misconfiguration)
		err := b.DecodeMessage(msg)
		m.FindingInfo = &Finding_Misconfiguration{msg}
		return true, err
	case 6: // finding_info.rootkit
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Rootkit)
		err := b.DecodeMessage(msg)
		m.FindingInfo = &Finding_Rootkit{msg}
		return true, err
	case 7: // finding_info.exploit
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Exploit)
		err := b.DecodeMessage(msg)
		m.FindingInfo = &Finding_Exploit{msg}
		return true, err
	case 8: // finding_info.infofinder
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(InfoFinder)
		err := b.DecodeMessage(msg)
		m.FindingInfo = &Finding_Infofinder{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Finding_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*Finding)
	// finding_info
	switch x := m.FindingInfo.(type) {
	case *Finding_Package:
		s := proto1.Size(x.Package)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Finding_Vulnerability:
		s := proto1.Size(x.Vulnerability)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Finding_Malware:
		s := proto1.Size(x.Malware)
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Finding_Secret:
		s := proto1.Size(x.Secret)
		n += proto1.SizeVarint(4<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Finding_Misconfiguration:
		s := proto1.Size(x.Misconfiguration)
		n += proto1.SizeVarint(5<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Finding_Rootkit:
		s := proto1.Size(x.Rootkit)
		n += proto1.SizeVarint(6<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Finding_Exploit:
		s := proto1.Size(x.Exploit)
		n += proto1.SizeVarint(7<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Finding_Infofinder:
		s := proto1.Size(x.Infofinder)
		n += proto1.SizeVarint(8<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Secret struct {
	Description string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	FilePath    string `protobuf:"bytes,2,opt,name=file_path,json=filePath" json:"file_path,omitempty"`
	StartLine   int32  `protobuf:"varint,3,opt,name=start_line,json=startLine" json:"start_line,omitempty"`
	EndLine     int32  `protobuf:"varint,4,opt,name=end_line,json=endLine" json:"end_line,omitempty"`
	StartColumn int32  `protobuf:"varint,5,opt,name=start_column,json=startColumn" json:"start_column,omitempty"`
	EndColumn   int32  `protobuf:"varint,6,opt,name=end_column,json=endColumn" json:"end_column,omitempty"`
	Fingerprint string `protobuf:"bytes,7,opt,name=fingerprint" json:"fingerprint,omitempty"`
}

func (m *Secret) Reset()                    { *m = Secret{} }
func (m *Secret) String() string            { return proto1.CompactTextString(m) }
func (*Secret) ProtoMessage()               {}
func (*Secret) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Secret) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Secret) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *Secret) GetStartLine() int32 {
	if m != nil {
		return m.StartLine
	}
	return 0
}

func (m *Secret) GetEndLine() int32 {
	if m != nil {
		return m.EndLine
	}
	return 0
}

func (m *Secret) GetStartColumn() int32 {
	if m != nil {
		return m.StartColumn
	}
	return 0
}

func (m *Secret) GetEndColumn() int32 {
	if m != nil {
		return m.EndColumn
	}
	return 0
}

func (m *Secret) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

type Misconfiguration struct {
	Id          string                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Location    string                   `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	Category    string                   `protobuf:"bytes,3,opt,name=category" json:"category,omitempty"`
	Message     string                   `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Description string                   `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Remediation string                   `protobuf:"bytes,6,opt,name=remediation" json:"remediation,omitempty"`
	Severity    MisconfigurationSeverity `protobuf:"varint,7,opt,name=severity,enum=proto.MisconfigurationSeverity" json:"severity,omitempty"`
}

func (m *Misconfiguration) Reset()                    { *m = Misconfiguration{} }
func (m *Misconfiguration) String() string            { return proto1.CompactTextString(m) }
func (*Misconfiguration) ProtoMessage()               {}
func (*Misconfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Misconfiguration) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Misconfiguration) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Misconfiguration) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Misconfiguration) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Misconfiguration) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Misconfiguration) GetRemediation() string {
	if m != nil {
		return m.Remediation
	}
	return ""
}

func (m *Misconfiguration) GetSeverity() MisconfigurationSeverity {
	if m != nil {
		return m.Severity
	}
	return MisconfigurationSeverity_MISCONFIGURATION_SEVERITY_HIGH
}

type Rootkit struct {
	RootkitName string      `protobuf:"bytes,1,opt,name=rootkit_name,json=rootkitName" json:"rootkit_name,omitempty"`
	RootkitType RootkitType `protobuf:"varint,2,opt,name=rootkit_type,json=rootkitType,enum=proto.RootkitType" json:"rootkit_type,omitempty"`
	Message     string      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *Rootkit) Reset()                    { *m = Rootkit{} }
func (m *Rootkit) String() string            { return proto1.CompactTextString(m) }
func (*Rootkit) ProtoMessage()               {}
func (*Rootkit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Rootkit) GetRootkitName() string {
	if m != nil {
		return m.RootkitName
	}
	return ""
}

func (m *Rootkit) GetRootkitType() RootkitType {
	if m != nil {
		return m.RootkitType
	}
	return RootkitType_ROOTKIT_TYPE_UNKNOWN
}

func (m *Rootkit) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Exploit struct {
	Name        string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Title       string   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	CveId       string   `protobuf:"bytes,4,opt,name=cve_id,json=cveId" json:"cve_id,omitempty"`
	SourceDb    string   `protobuf:"bytes,5,opt,name=source_db,json=sourceDb" json:"source_db,omitempty"`
	Urls        []string `protobuf:"bytes,6,rep,name=urls" json:"urls,omitempty"`
}

func (m *Exploit) Reset()                    { *m = Exploit{} }
func (m *Exploit) String() string            { return proto1.CompactTextString(m) }
func (*Exploit) ProtoMessage()               {}
func (*Exploit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Exploit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Exploit) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Exploit) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Exploit) GetCveId() string {
	if m != nil {
		return m.CveId
	}
	return ""
}

func (m *Exploit) GetSourceDb() string {
	if m != nil {
		return m.SourceDb
	}
	return ""
}

func (m *Exploit) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

type InfoFinder struct {
	Type InfoType `protobuf:"varint,1,opt,name=type,enum=proto.InfoType" json:"type,omitempty"`
	Path string   `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Data string   `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *InfoFinder) Reset()                    { *m = InfoFinder{} }
func (m *InfoFinder) String() string            { return proto1.CompactTextString(m) }
func (*InfoFinder) ProtoMessage()               {}
func (*InfoFinder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *InfoFinder) GetType() InfoType {
	if m != nil {
		return m.Type
	}
	return InfoType_INFO_TYPE_UNKNOWN
}

func (m *InfoFinder) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *InfoFinder) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Vulnerability struct {
	VulnerabilityName string                `protobuf:"bytes,1,opt,name=vulnerability_name,json=vulnerabilityName" json:"vulnerability_name,omitempty"`
	Description       string                `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Severity          VulnerabilitySeverity `protobuf:"varint,3,opt,name=severity,enum=proto.VulnerabilitySeverity" json:"severity,omitempty"`
	Links             []string              `protobuf:"bytes,4,rep,name=links" json:"links,omitempty"`
	Distro            *VulnerabilityDistro  `protobuf:"bytes,5,opt,name=distro" json:"distro,omitempty"`
	Cvss              []*VulnerabilityCvss  `protobuf:"bytes,6,rep,name=cvss" json:"cvss,omitempty"`
	Package           *Package              `protobuf:"bytes,7,opt,name=package" json:"package,omitempty"`
	Fix               *VulnerabilityFix     `protobuf:"bytes,8,opt,name=fix" json:"fix,omitempty"`
	LayerId           string                `protobuf:"bytes,9,opt,name=layer_id,json=layerId" json:"layer_id,omitempty"`
	Path              string                `protobuf:"bytes,10,opt,name=path" json:"path,omitempty"`
}

func (m *Vulnerability) Reset()                    { *m = Vulnerability{} }
func (m *Vulnerability) String() string            { return proto1.CompactTextString(m) }
func (*Vulnerability) ProtoMessage()               {}
func (*Vulnerability) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Vulnerability) GetVulnerabilityName() string {
	if m != nil {
		return m.VulnerabilityName
	}
	return ""
}

func (m *Vulnerability) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Vulnerability) GetSeverity() VulnerabilitySeverity {
	if m != nil {
		return m.Severity
	}
	return VulnerabilitySeverity_VULNERABILITY_SEVERITY_CRITICAL
}

func (m *Vulnerability) GetLinks() []string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Vulnerability) GetDistro() *VulnerabilityDistro {
	if m != nil {
		return m.Distro
	}
	return nil
}

func (m *Vulnerability) GetCvss() []*VulnerabilityCvss {
	if m != nil {
		return m.Cvss
	}
	return nil
}

func (m *Vulnerability) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *Vulnerability) GetFix() *VulnerabilityFix {
	if m != nil {
		return m.Fix
	}
	return nil
}

func (m *Vulnerability) GetLayerId() string {
	if m != nil {
		return m.LayerId
	}
	return ""
}

func (m *Vulnerability) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type Package struct {
	Name     string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version  string   `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Type     string   `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Language string   `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
	Licenses []string `protobuf:"bytes,5,rep,name=licenses" json:"licenses,omitempty"`
	Cpes     []string `protobuf:"bytes,6,rep,name=cpes" json:"cpes,omitempty"`
	Purl     string   `protobuf:"bytes,7,opt,name=purl" json:"purl,omitempty"`
}

func (m *Package) Reset()                    { *m = Package{} }
func (m *Package) String() string            { return proto1.CompactTextString(m) }
func (*Package) ProtoMessage()               {}
func (*Package) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Package) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Package) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Package) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Package) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Package) GetLicenses() []string {
	if m != nil {
		return m.Licenses
	}
	return nil
}

func (m *Package) GetCpes() []string {
	if m != nil {
		return m.Cpes
	}
	return nil
}

func (m *Package) GetPurl() string {
	if m != nil {
		return m.Purl
	}
	return ""
}

type VulnerabilityFix struct {
	Versions []string `protobuf:"bytes,1,rep,name=versions" json:"versions,omitempty"`
	State    string   `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (m *VulnerabilityFix) Reset()                    { *m = VulnerabilityFix{} }
func (m *VulnerabilityFix) String() string            { return proto1.CompactTextString(m) }
func (*VulnerabilityFix) ProtoMessage()               {}
func (*VulnerabilityFix) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *VulnerabilityFix) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *VulnerabilityFix) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type VulnerabilityCvss struct {
	Version string                    `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Vector  string                    `protobuf:"bytes,2,opt,name=vector" json:"vector,omitempty"`
	Metrics *VulnerabilityCvssMetrics `protobuf:"bytes,3,opt,name=metrics" json:"metrics,omitempty"`
}

func (m *VulnerabilityCvss) Reset()                    { *m = VulnerabilityCvss{} }
func (m *VulnerabilityCvss) String() string            { return proto1.CompactTextString(m) }
func (*VulnerabilityCvss) ProtoMessage()               {}
func (*VulnerabilityCvss) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *VulnerabilityCvss) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VulnerabilityCvss) GetVector() string {
	if m != nil {
		return m.Vector
	}
	return ""
}

func (m *VulnerabilityCvss) GetMetrics() *VulnerabilityCvssMetrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type VulnerabilityCvssMetrics struct {
	BaseScore           float64 `protobuf:"fixed64,1,opt,name=base_score,json=baseScore" json:"base_score,omitempty"`
	ExploitabilityScore float64 `protobuf:"fixed64,2,opt,name=exploitability_score,json=exploitabilityScore" json:"exploitability_score,omitempty"`
	ImpactScore         float64 `protobuf:"fixed64,3,opt,name=impact_score,json=impactScore" json:"impact_score,omitempty"`
}

func (m *VulnerabilityCvssMetrics) Reset()                    { *m = VulnerabilityCvssMetrics{} }
func (m *VulnerabilityCvssMetrics) String() string            { return proto1.CompactTextString(m) }
func (*VulnerabilityCvssMetrics) ProtoMessage()               {}
func (*VulnerabilityCvssMetrics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *VulnerabilityCvssMetrics) GetBaseScore() float64 {
	if m != nil {
		return m.BaseScore
	}
	return 0
}

func (m *VulnerabilityCvssMetrics) GetExploitabilityScore() float64 {
	if m != nil {
		return m.ExploitabilityScore
	}
	return 0
}

func (m *VulnerabilityCvssMetrics) GetImpactScore() float64 {
	if m != nil {
		return m.ImpactScore
	}
	return 0
}

type VulnerabilityDistro struct {
	Name    string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version string   `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	IdLike  []string `protobuf:"bytes,3,rep,name=id_like,json=idLike" json:"id_like,omitempty"`
}

func (m *VulnerabilityDistro) Reset()                    { *m = VulnerabilityDistro{} }
func (m *VulnerabilityDistro) String() string            { return proto1.CompactTextString(m) }
func (*VulnerabilityDistro) ProtoMessage()               {}
func (*VulnerabilityDistro) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *VulnerabilityDistro) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VulnerabilityDistro) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VulnerabilityDistro) GetIdLike() []string {
	if m != nil {
		return m.IdLike
	}
	return nil
}

type Malware struct {
	MalwareName string `protobuf:"bytes,1,opt,name=malware_name,json=malwareName" json:"malware_name,omitempty"`
	MalwareType string `protobuf:"bytes,2,opt,name=malware_type,json=malwareType" json:"malware_type,omitempty"`
	RuleName    string `protobuf:"bytes,3,opt,name=rule_name,json=ruleName" json:"rule_name,omitempty"`
	Path        string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
}

func (m *Malware) Reset()                    { *m = Malware{} }
func (m *Malware) String() string            { return proto1.CompactTextString(m) }
func (*Malware) ProtoMessage()               {}
func (*Malware) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Malware) GetMalwareName() string {
	if m != nil {
		return m.MalwareName
	}
	return ""
}

func (m *Malware) GetMalwareType() string {
	if m != nil {
		return m.MalwareType
	}
	return ""
}

func (m *Malware) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *Malware) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func init() {
	proto1.RegisterType((*Metadata)(nil), "proto.Metadata")
	proto1.RegisterType((*ScannerInfo)(nil), "proto.ScannerInfo")
	proto1.RegisterType((*ScanRequest)(nil), "proto.ScanRequest")
	proto1.RegisterType((*ScanSummary)(nil), "proto.ScanSummary")
	proto1.RegisterType((*ScanResult)(nil), "proto.ScanResult")
	proto1.RegisterType((*Finding)(nil), "proto.Finding")
	proto1.RegisterType((*Secret)(nil), "proto.Secret")
	proto1.RegisterType((*Misconfiguration)(nil), "proto.Misconfiguration")
	proto1.RegisterType((*Rootkit)(nil), "proto.Rootkit")
	proto1.RegisterType((*Exploit)(nil), "proto.Exploit")
	proto1.RegisterType((*InfoFinder)(nil), "proto.InfoFinder")
	proto1.RegisterType((*Vulnerability)(nil), "proto.Vulnerability")
	proto1.RegisterType((*Package)(nil), "proto.Package")
	proto1.RegisterType((*VulnerabilityFix)(nil), "proto.VulnerabilityFix")
	proto1.RegisterType((*VulnerabilityCvss)(nil), "proto.VulnerabilityCvss")
	proto1.RegisterType((*VulnerabilityCvssMetrics)(nil), "proto.VulnerabilityCvssMetrics")
	proto1.RegisterType((*VulnerabilityDistro)(nil), "proto.VulnerabilityDistro")
	proto1.RegisterType((*Malware)(nil), "proto.Malware")
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterEnum("proto.ScanFamily", ScanFamily_name, ScanFamily_value)
	proto1.RegisterEnum("proto.ScanObjectType", ScanObjectType_name, ScanObjectType_value)
	proto1.RegisterEnum("proto.MisconfigurationSeverity", MisconfigurationSeverity_name, MisconfigurationSeverity_value)
	proto1.RegisterEnum("proto.VulnerabilitySeverity", VulnerabilitySeverity_name, VulnerabilitySeverity_value)
	proto1.RegisterEnum("proto.RootkitType", RootkitType_name, RootkitType_value)
	proto1.RegisterEnum("proto.InfoType", InfoType_name, InfoType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scanner service

type ScannerClient interface {
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScannerInfo, error)
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResult, error)
}

type scannerClient struct {
	cc *grpc.ClientConn
}

func NewScannerClient(cc *grpc.ClientConn) ScannerClient {
	return &scannerClient{cc}
}

func (c *scannerClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScannerInfo, error) {
	out := new(ScannerInfo)
	err := grpc.Invoke(ctx, "/proto.Scanner/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := grpc.Invoke(ctx, "/proto.Scanner/Scan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scanner service

type ScannerServer interface {
	GetInfo(context.Context, *Empty) (*ScannerInfo, error)
	Scan(context.Context, *ScanRequest) (*ScanResult, error)
}

func RegisterScannerServer(s *grpc.Server, srv ScannerServer) {
	s.RegisterService(&_Scanner_serviceDesc, srv)
}

func _Scanner_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Scanner/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scanner_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Scanner/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scanner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Scanner",
	HandlerType: (*ScannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Scanner_GetInfo_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _Scanner_Scan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanner.proto",
}

func init() { proto1.RegisterFile("scanner.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1926 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x58, 0xcd, 0x6e, 0xe3, 0xc8,
	0x11, 0x5e, 0x8a, 0xb2, 0x28, 0x97, 0xc6, 0x1e, 0xb9, 0xc7, 0xb3, 0xa3, 0xf5, 0xce, 0xae, 0x67,
	0x94, 0x5d, 0xc4, 0xeb, 0xec, 0xce, 0x22, 0x5a, 0x04, 0xd8, 0xfc, 0x20, 0x80, 0x2c, 0x51, 0x36,
	0x33, 0xfa, 0x31, 0x28, 0xd9, 0x13, 0x2f, 0x02, 0x10, 0xb4, 0xd4, 0x76, 0x18, 0x4b, 0xa4, 0x42,
	0x52, 0xde, 0xf1, 0x21, 0x40, 0x6e, 0x41, 0x2e, 0x09, 0x90, 0x43, 0x6e, 0x79, 0x82, 0xe4, 0x9e,
	0x47, 0xc8, 0x2d, 0xd7, 0x3c, 0x41, 0xf2, 0x06, 0x39, 0xe5, 0x92, 0xea, 0xea, 0xa6, 0x44, 0xea,
	0xe7, 0x30, 0x17, 0xbb, 0xbb, 0xea, 0xab, 0xee, 0xfa, 0xaf, 0xa6, 0x60, 0x27, 0x1a, 0xba, 0xbe,
	0xcf, 0xc3, 0x57, 0xd3, 0x30, 0x88, 0x03, 0xb6, 0x45, 0xff, 0xaa, 0x7f, 0xd0, 0xa0, 0xd8, 0xe1,
	0xb1, 0x3b, 0x72, 0x63, 0x97, 0x9d, 0x40, 0x09, 0x21, 0x41, 0xec, 0xc6, 0x5e, 0xe0, 0x47, 0x15,
	0xed, 0x85, 0x7e, 0x54, 0xaa, 0xbd, 0x90, 0x02, 0xaf, 0x12, 0xd4, 0xab, 0xfa, 0x02, 0x62, 0xfa,
	0x71, 0xf8, 0x60, 0xa7, 0x85, 0x0e, 0x7e, 0x0a, 0xe5, 0x65, 0x00, 0x2b, 0x83, 0x7e, 0xc7, 0x1f,
	0xf0, 0x3c, 0xed, 0x68, 0xdb, 0x16, 0x4b, 0xb6, 0x0f, 0x5b, 0xf7, 0xee, 0x78, 0xc6, 0x2b, 0x39,
	0xa2, 0xc9, 0xcd, 0x8f, 0x72, 0x5f, 0x6b, 0xd5, 0xdf, 0x6b, 0x50, 0xea, 0x4b, 0x4d, 0x2d, 0xff,
	0x26, 0x60, 0xdf, 0x83, 0xe2, 0x44, 0xdd, 0x4c, 0x07, 0x94, 0x6a, 0x8f, 0x97, 0x14, 0xb2, 0xe7,
	0x00, 0xc6, 0x20, 0xef, 0xbb, 0x93, 0xe4, 0x54, 0x5a, 0xb3, 0x0a, 0x18, 0xf7, 0x3c, 0x8c, 0x50,
	0x9b, 0x8a, 0x4e, 0xe4, 0x64, 0xcb, 0x0e, 0xd1, 0xdc, 0xa9, 0xe7, 0x24, 0xdc, 0x3c, 0x71, 0x01,
	0x49, 0x97, 0x92, 0x52, 0xfd, 0x85, 0x54, 0xc5, 0xe6, 0xbf, 0x9e, 0xf1, 0x28, 0x66, 0xbb, 0x90,
	0xf3, 0x46, 0xca, 0x0a, 0x5c, 0xb1, 0xcf, 0x20, 0x1f, 0x3f, 0x4c, 0x39, 0x1d, 0xbb, 0x5b, 0x7b,
	0xaa, 0xd4, 0x12, 0x12, 0xbd, 0xeb, 0x5f, 0xf1, 0x61, 0x3c, 0x40, 0xa6, 0x4d, 0x10, 0xa1, 0xd8,
	0xd4, 0x8d, 0x7f, 0xa9, 0xee, 0xa0, 0x75, 0xf5, 0xef, 0x39, 0x79, 0x7c, 0x7f, 0x36, 0x99, 0xb8,
	0xe8, 0xa5, 0xef, 0xc0, 0xce, 0x9d, 0x1f, 0x7c, 0xeb, 0x3b, 0xf7, 0x5e, 0x38, 0x8b, 0x78, 0x44,
	0x37, 0x6d, 0xd9, 0x8f, 0x88, 0x78, 0x29, 0x69, 0xec, 0x4b, 0x78, 0x22, 0xe3, 0x38, 0x72, 0x46,
	0x5e, 0x88, 0x97, 0x04, 0xa1, 0x87, 0xd0, 0x1c, 0x41, 0x99, 0x62, 0x35, 0x17, 0x1c, 0x71, 0x6a,
	0x22, 0x70, 0xe3, 0x8d, 0x11, 0xaa, 0xcb, 0x53, 0x15, 0xb1, 0x25, 0x68, 0xec, 0x53, 0xd8, 0xf5,
	0xfc, 0x1b, 0x94, 0x99, 0xa3, 0xf2, 0x84, 0xda, 0x49, 0xa8, 0x12, 0xf6, 0x5d, 0x78, 0x1c, 0xcd,
	0xa2, 0x69, 0x1a, 0xb7, 0x45, 0xb8, 0xdd, 0x39, 0x59, 0x02, 0x5f, 0xc2, 0x23, 0x11, 0x0f, 0x47,
	0x5d, 0x52, 0x29, 0x90, 0xd9, 0x25, 0x41, 0x93, 0xb1, 0x1d, 0xb1, 0x0f, 0x61, 0x9b, 0x20, 0x21,
	0x77, 0x47, 0x15, 0x83, 0xf8, 0x45, 0x8a, 0x26, 0xee, 0xd9, 0x47, 0x00, 0xb1, 0x37, 0xe1, 0x4e,
	0xec, 0xde, 0x71, 0xbf, 0x52, 0x24, 0xee, 0xb6, 0xa0, 0x0c, 0x04, 0xa1, 0xfa, 0x2f, 0x0d, 0x40,
	0x06, 0x26, 0x9a, 0x8d, 0xe3, 0x77, 0x4b, 0x91, 0xcf, 0xc1, 0x08, 0x65, 0x3c, 0xc9, 0x69, 0xa5,
	0x1a, 0x4b, 0xc5, 0x4d, 0x45, 0xda, 0x4e, 0x20, 0xec, 0x18, 0x8a, 0x37, 0x9e, 0x3f, 0xf2, 0xfc,
	0x5b, 0xe1, 0x38, 0x51, 0x0e, 0xbb, 0x0a, 0xde, 0x92, 0x64, 0x7b, 0xce, 0x17, 0x39, 0xcd, 0xc3,
	0x30, 0x08, 0x55, 0x90, 0xe5, 0x46, 0xdc, 0x17, 0xc9, 0x00, 0x93, 0xaf, 0xb2, 0xf7, 0xa9, 0xd0,
	0xdb, 0x09, 0xa4, 0xfa, 0x37, 0x1d, 0x0c, 0x75, 0x32, 0xde, 0x6d, 0x4c, 0xdd, 0xe1, 0x9d, 0x7b,
	0xcb, 0x95, 0x55, 0xc9, 0xd5, 0xe7, 0x92, 0x7a, 0xf6, 0x9e, 0x9d, 0x00, 0xd8, 0x4f, 0x60, 0xe7,
	0x7e, 0x36, 0xc6, 0x9a, 0x71, 0xaf, 0xbd, 0xb1, 0x17, 0x3f, 0x28, 0xdb, 0xf6, 0x95, 0xc4, 0x65,
	0x9a, 0x87, 0x72, 0x59, 0xb0, 0xb8, 0x69, 0xe2, 0x8e, 0xbf, 0x75, 0x43, 0x99, 0xcb, 0x8b, 0x9b,
	0x3a, 0x92, 0x2a, 0x6e, 0x52, 0x00, 0xcc, 0x81, 0x42, 0xc4, 0x87, 0x21, 0x8f, 0xc9, 0xcc, 0x52,
	0x6d, 0x27, 0x31, 0x87, 0x88, 0x88, 0x54, 0x6c, 0x66, 0x42, 0x79, 0xe2, 0x45, 0xc3, 0xc0, 0xbf,
	0xf1, 0x6e, 0x67, 0x21, 0xb5, 0x03, 0xe5, 0x81, 0x67, 0xc9, 0xe9, 0x4b, 0x6c, 0x14, 0x5e, 0x11,
	0x11, 0xba, 0x85, 0x41, 0x10, 0xdf, 0x79, 0x31, 0x65, 0xd1, 0x42, 0x37, 0x5b, 0x52, 0x85, 0x6e,
	0x0a, 0x20, 0xb0, 0xfc, 0xed, 0x74, 0x1c, 0x20, 0xd6, 0xc8, 0x60, 0x4d, 0x49, 0x15, 0x58, 0x05,
	0x60, 0x5f, 0x01, 0x60, 0x72, 0x07, 0x22, 0x7a, 0x3c, 0xa4, 0x14, 0x2b, 0xd5, 0xf6, 0x14, 0x5c,
	0x34, 0x9e, 0x16, 0x31, 0x50, 0x22, 0x05, 0x3b, 0xd9, 0x85, 0x47, 0x2a, 0xdc, 0x8e, 0xa0, 0x56,
	0xff, 0xad, 0x41, 0x41, 0x1a, 0xce, 0x5e, 0x40, 0x69, 0xc4, 0xa3, 0x61, 0xe8, 0x4d, 0xc9, 0x52,
	0x4d, 0x65, 0xfc, 0x82, 0x24, 0x32, 0x5e, 0xd4, 0x8c, 0x43, 0x8d, 0x40, 0x76, 0xa8, 0xa2, 0x20,
	0x9c, 0xe3, 0x5e, 0x64, 0x7c, 0x14, 0xbb, 0x61, 0xec, 0x8c, 0x3d, 0x9f, 0xab, 0x1a, 0xdd, 0x26,
	0x4a, 0x1b, 0x09, 0xec, 0x03, 0x28, 0x72, 0x7f, 0x24, 0x99, 0xb2, 0x34, 0x0d, 0xdc, 0x13, 0x0b,
	0x6b, 0x4d, 0x4a, 0x0e, 0x83, 0xf1, 0x6c, 0xe2, 0xab, 0x8a, 0x2c, 0x11, 0xad, 0x41, 0x24, 0x71,
	0xb8, 0x90, 0x56, 0x80, 0x82, 0x3c, 0x1c, 0x29, 0x8a, 0x8d, 0xaa, 0xa3, 0x55, 0xb7, 0x3c, 0x9c,
	0x86, 0x9e, 0x1f, 0xab, 0x62, 0x4c, 0x93, 0xaa, 0xff, 0xd5, 0xa0, 0xbc, 0x1c, 0xad, 0x95, 0x76,
	0x78, 0x00, 0xc5, 0x71, 0x30, 0x94, 0x81, 0x56, 0xe6, 0x25, 0x7b, 0xc1, 0xc3, 0x15, 0xbf, 0x0d,
	0xb0, 0x0c, 0x64, 0x17, 0x9e, 0xef, 0x45, 0x83, 0x9e, 0xf0, 0x28, 0x12, 0x79, 0x2e, 0x2b, 0x27,
	0xd9, 0x2e, 0xfb, 0x74, 0x6b, 0xd5, 0xa7, 0x88, 0x08, 0xf9, 0x84, 0x8f, 0x3c, 0x79, 0xad, 0xea,
	0x33, 0x29, 0x12, 0xfb, 0x31, 0x14, 0x23, 0x8e, 0x2d, 0x5e, 0x14, 0x85, 0x41, 0x8d, 0xfa, 0x70,
	0x43, 0xfa, 0xf5, 0x15, 0xcc, 0x9e, 0x0b, 0x54, 0x7f, 0x03, 0x86, 0x4a, 0x33, 0xe1, 0x66, 0x95,
	0x66, 0x0e, 0x8d, 0x18, 0x15, 0x60, 0x45, 0xeb, 0x8a, 0x49, 0xf3, 0x83, 0x05, 0x84, 0xe6, 0x42,
	0x8e, 0xae, 0x63, 0xd9, 0x7c, 0xa5, 0xa1, 0x90, 0x88, 0x89, 0x4d, 0xda, 0x7e, 0x3d, 0x63, 0x7f,
	0xf5, 0x2f, 0x1a, 0x18, 0x2a, 0x75, 0xe7, 0xa3, 0x4d, 0x4b, 0x8d, 0x36, 0xec, 0x38, 0xb1, 0x17,
	0x8f, 0xe7, 0x53, 0x94, 0x36, 0xcb, 0x5e, 0xd3, 0x57, 0xbd, 0xf6, 0x14, 0x0a, 0xc3, 0x7b, 0xee,
	0x60, 0xf4, 0x54, 0xab, 0xc2, 0x9d, 0x45, 0x2d, 0x39, 0x0a, 0x66, 0xe1, 0x90, 0x3b, 0xa3, 0x6b,
	0xe5, 0xec, 0xa2, 0x24, 0x34, 0xaf, 0xc5, 0xfd, 0xb3, 0x70, 0x1c, 0xa1, 0x8b, 0x75, 0x71, 0xbf,
	0x58, 0x57, 0xaf, 0x00, 0x16, 0xa5, 0x82, 0x93, 0x46, 0x8e, 0x43, 0x8d, 0xcc, 0x7e, 0x9c, 0xaa,
	0xa5, 0x35, 0x83, 0x30, 0xb7, 0x18, 0x84, 0x82, 0x46, 0xbd, 0x5b, 0x6a, 0x4a, 0xeb, 0xea, 0x9f,
	0x75, 0xd8, 0xc9, 0x74, 0x2d, 0xf6, 0x05, 0xb0, 0x4c, 0xd7, 0x4a, 0x87, 0x61, 0x2f, 0xc3, 0xa1,
	0x60, 0x2c, 0x79, 0x21, 0xb7, 0xea, 0x85, 0xaf, 0x53, 0x99, 0x21, 0x47, 0xf8, 0xf3, 0x75, 0xed,
	0x72, 0x35, 0x2d, 0x84, 0xdf, 0xb1, 0x12, 0xef, 0xc4, 0x94, 0x14, 0xce, 0x90, 0x1b, 0x56, 0x83,
	0xc2, 0xc8, 0x8b, 0xe2, 0x30, 0x50, 0x6d, 0xee, 0x60, 0xdd, 0x69, 0x4d, 0x42, 0xd8, 0x0a, 0x89,
	0xd3, 0x21, 0x3f, 0xbc, 0x8f, 0xa4, 0x57, 0x4b, 0xb5, 0xca, 0x3a, 0x89, 0x06, 0xf2, 0x6d, 0x42,
	0xb1, 0xa3, 0xc5, 0x44, 0x30, 0xd6, 0x4d, 0x84, 0xc5, 0x3c, 0xf8, 0x0c, 0xf4, 0x1b, 0xef, 0xad,
	0x6a, 0x6b, 0xcf, 0xd6, 0x1d, 0xdb, 0xf2, 0xde, 0xda, 0x02, 0x23, 0x5a, 0xcb, 0xd8, 0x7d, 0xe0,
	0xa1, 0x48, 0x87, 0x6d, 0x99, 0x7f, 0xb4, 0xc7, 0x84, 0x48, 0x82, 0x05, 0xa9, 0x57, 0xcb, 0x5f,
	0x31, 0x27, 0xd5, 0x75, 0x6b, 0x73, 0x32, 0xf5, 0xdc, 0xca, 0x65, 0x9f, 0x5b, 0x2c, 0xf5, 0x5c,
	0xda, 0x56, 0xe9, 0x20, 0x7a, 0x86, 0xeb, 0xdf, 0xce, 0x16, 0xc5, 0x3f, 0xdf, 0x13, 0xcf, 0x1b,
	0x72, 0x3f, 0xa2, 0x67, 0x86, 0x4e, 0x3c, 0xb5, 0x17, 0x67, 0x0d, 0xa7, 0x7c, 0x9e, 0x8d, 0x62,
	0x4d, 0xda, 0x62, 0x5a, 0xaa, 0xfe, 0x45, 0xeb, 0x6a, 0x13, 0xca, 0xcb, 0x56, 0x8b, 0x73, 0x95,
	0x4a, 0xf2, 0x89, 0x8b, 0xe7, 0x26, 0x7b, 0x11, 0x59, 0x6c, 0x9c, 0xf1, 0xbc, 0xa2, 0x68, 0x53,
	0xfd, 0xad, 0x06, 0x7b, 0x2b, 0x31, 0x49, 0x5b, 0xaa, 0x65, 0x2d, 0x7d, 0x1f, 0x0a, 0xf7, 0xf4,
	0x00, 0x53, 0xc7, 0xa8, 0x1d, 0xfb, 0xa1, 0xa8, 0xf4, 0x38, 0xf4, 0x86, 0x91, 0x9a, 0xb3, 0x87,
	0x9b, 0x02, 0xde, 0x91, 0x30, 0x3b, 0xc1, 0x57, 0xff, 0xa8, 0x41, 0x65, 0x13, 0x4a, 0xf4, 0xf7,
	0x6b, 0x37, 0xe2, 0xf8, 0xdc, 0x0a, 0x42, 0x19, 0x0d, 0xcd, 0xde, 0x16, 0x94, 0xbe, 0x20, 0xb0,
	0xef, 0xc3, 0xbe, 0x9a, 0x7a, 0x49, 0xe9, 0x48, 0x60, 0x8e, 0x80, 0x4f, 0xb2, 0x3c, 0x29, 0x82,
	0xdd, 0xce, 0x9b, 0x60, 0x32, 0xc5, 0x0a, 0xaa, 0x13, 0xb4, 0x24, 0x69, 0x04, 0xc1, 0xc7, 0xf1,
	0x93, 0x35, 0x99, 0xfd, 0x8e, 0x39, 0xf1, 0x0c, 0x0c, 0x4f, 0x8c, 0xb5, 0x3b, 0x4e, 0xcf, 0x2b,
	0x74, 0x95, 0x87, 0x53, 0xed, 0x8e, 0x5c, 0x6e, 0xa8, 0xd7, 0x87, 0x50, 0x46, 0xbd, 0x3e, 0x32,
	0xad, 0x57, 0xd1, 0xa8, 0xda, 0x53, 0x90, 0x79, 0xeb, 0x5d, 0x40, 0xa8, 0xcd, 0x62, 0x77, 0x0b,
	0x67, 0x63, 0x75, 0x84, 0x9a, 0x41, 0x82, 0x40, 0xf2, 0xeb, 0xde, 0xe7, 0x06, 0x6c, 0x99, 0x93,
	0x69, 0xfc, 0x70, 0xfc, 0x1f, 0xf5, 0xdc, 0x6c, 0xb9, 0x13, 0x6f, 0xfc, 0x80, 0x3a, 0x3f, 0xe9,
	0x37, 0xea, 0x5d, 0xa7, 0x55, 0xef, 0x58, 0xed, 0x2b, 0xe7, 0xbc, 0xde, 0x78, 0x5d, 0x3f, 0x35,
	0xcb, 0xef, 0x61, 0x18, 0x3e, 0x48, 0x33, 0x2e, 0x2f, 0xda, 0x5d, 0xd3, 0xae, 0x9f, 0x58, 0x6d,
	0x6b, 0x70, 0x55, 0xd6, 0x96, 0xe5, 0x3a, 0xf5, 0xf6, 0x9b, 0xba, 0x6d, 0x96, 0x73, 0x98, 0x2e,
	0x2c, 0xcd, 0xe8, 0x9b, 0x0d, 0xdb, 0x1c, 0x94, 0x75, 0x6c, 0x61, 0xcf, 0x33, 0x02, 0x56, 0xbf,
	0xd1, 0xeb, 0xb6, 0xac, 0xd3, 0x0b, 0xbb, 0x3e, 0xb0, 0x7a, 0xdd, 0x72, 0x7e, 0xf9, 0x48, 0xbb,
	0xd7, 0x1b, 0xbc, 0xb6, 0x06, 0xe5, 0xad, 0x65, 0x86, 0xf9, 0xf3, 0xf3, 0x76, 0x0f, 0x19, 0x05,
	0xf4, 0xc2, 0xb3, 0x34, 0xc3, 0xea, 0xb6, 0x7a, 0x4e, 0xcb, 0xea, 0x36, 0x4d, 0xbb, 0x6c, 0x1c,
	0xff, 0x4f, 0x83, 0xdd, 0xec, 0xe7, 0x0b, 0x76, 0x87, 0xa7, 0x84, 0xef, 0x9d, 0xfc, 0xcc, 0x6c,
	0x0c, 0x9c, 0xc1, 0xd5, 0xb9, 0xe9, 0xf4, 0x4f, 0x7a, 0x1d, 0x34, 0xf7, 0x00, 0xde, 0x5f, 0x61,
	0x59, 0x1d, 0xe1, 0x0a, 0x8d, 0x55, 0xe1, 0xe3, 0x15, 0x5e, 0xb3, 0xd7, 0x78, 0x8d, 0xfe, 0xb0,
	0x1b, 0x67, 0xd6, 0xa5, 0x30, 0xfb, 0x10, 0x3e, 0x5c, 0xc1, 0xf4, 0x1a, 0x56, 0x02, 0xd0, 0xe7,
	0xba, 0x2e, 0x01, 0x9a, 0x96, 0x8d, 0xa6, 0x57, 0x60, 0x7f, 0xf5, 0x06, 0xe4, 0x6c, 0xad, 0x15,
	0x13, 0x9e, 0x69, 0xf5, 0xd1, 0xfe, 0x75, 0xf6, 0xb4, 0xac, 0xb6, 0x89, 0xd6, 0xff, 0x0e, 0x4b,
	0x6c, 0xd3, 0x9b, 0x40, 0x18, 0xb4, 0xec, 0x7f, 0x0c, 0xd4, 0xa5, 0x69, 0x63, 0x6c, 0x9d, 0x33,
	0xeb, 0xf4, 0x0c, 0x1d, 0xf2, 0x09, 0xbc, 0xd8, 0x8c, 0xe9, 0x98, 0x4d, 0xeb, 0xa2, 0x83, 0xae,
	0x79, 0x09, 0x1f, 0x6d, 0x46, 0xb5, 0x7b, 0x6f, 0xca, 0xb9, 0xe3, 0x7f, 0x68, 0xf0, 0x74, 0xed,
	0x0c, 0xc2, 0x19, 0x7b, 0x98, 0x49, 0xab, 0x85, 0x64, 0x03, 0xff, 0x5a, 0x8d, 0x7a, 0x1b, 0xf5,
	0x40, 0xc7, 0x6e, 0x00, 0x91, 0xa2, 0xa4, 0xc2, 0x06, 0x80, 0xd2, 0x32, 0xc7, 0x3e, 0x86, 0x83,
	0x0d, 0x10, 0xa1, 0xa2, 0x8e, 0x5f, 0x8c, 0x2f, 0x37, 0xf0, 0xbb, 0xe6, 0x69, 0xdb, 0x3a, 0xb5,
	0x4e, 0xd0, 0xa7, 0xf9, 0xe3, 0x3f, 0xe1, 0xd7, 0xbc, 0x9d, 0x79, 0xeb, 0xec, 0xab, 0x24, 0x95,
	0xae, 0xbf, 0xe8, 0xbe, 0xee, 0xf6, 0xde, 0x74, 0x51, 0x69, 0xcc, 0xd8, 0x0c, 0xa7, 0x63, 0x76,
	0x7a, 0xb6, 0x2a, 0x9b, 0x0c, 0x03, 0x73, 0xa8, 0x6b, 0xb6, 0x51, 0xc5, 0xe7, 0x50, 0xc9, 0x30,
	0xea, 0xe7, 0xe7, 0x6d, 0xf4, 0x00, 0x95, 0x86, 0x2e, 0x02, 0x9d, 0xe1, 0xb6, 0x2c, 0xbb, 0x43,
	0xf5, 0x96, 0x3f, 0xfe, 0xa7, 0x06, 0xc5, 0xe4, 0x59, 0x82, 0x6f, 0xa1, 0x3d, 0x2a, 0x82, 0x25,
	0x75, 0x8e, 0xe0, 0x93, 0x05, 0xb9, 0xdf, 0x3f, 0x73, 0x88, 0xe1, 0x9c, 0xf5, 0xfa, 0x03, 0x51,
	0x2f, 0xa7, 0xa6, 0x7d, 0x6e, 0x5b, 0xdd, 0x01, 0xea, 0xf7, 0x39, 0x1c, 0x65, 0x91, 0xf5, 0x8b,
	0xc1, 0x59, 0xcf, 0xb6, 0xbe, 0x31, 0x9b, 0xa8, 0xeb, 0x55, 0x06, 0x9d, 0xc3, 0xc1, 0xfc, 0x69,
	0x16, 0x8d, 0x8c, 0xcb, 0xfa, 0xc0, 0x5c, 0x81, 0xea, 0xab, 0x2a, 0x34, 0xeb, 0xe8, 0x93, 0xee,
	0x0a, 0x32, 0x5f, 0xe3, 0x60, 0xa8, 0x9f, 0x4c, 0xf0, 0x5b, 0xd8, 0x38, 0xe5, 0x31, 0xfd, 0x72,
	0xf2, 0x28, 0xf9, 0xf8, 0x11, 0x4d, 0xec, 0x20, 0xfd, 0xd9, 0x99, 0xfc, 0xb6, 0xf2, 0x05, 0xe4,
	0xc5, 0x96, 0xad, 0xf9, 0x04, 0x3e, 0xd8, 0xcb, 0xd0, 0xc4, 0x77, 0xf6, 0xc9, 0xf6, 0x37, 0xc6,
	0xab, 0x2f, 0x89, 0x7a, 0x5d, 0xa0, 0x7f, 0x5f, 0xfd, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x24, 0x76,
	0x45, 0xd2, 0x55, 0x12, 0x00, 0x00,
}
