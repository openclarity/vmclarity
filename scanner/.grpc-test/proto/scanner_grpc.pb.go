// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/scanner.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Scanner_GetInfo_FullMethodName = "/proto.Scanner/GetInfo"
	Scanner_Scan_FullMethodName    = "/proto.Scanner/Scan"
)

// ScannerClient is the client API for Scanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScannerClient interface {
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScannerInfo, error)
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResult, error)
}

type scannerClient struct {
	cc grpc.ClientConnInterface
}

func NewScannerClient(cc grpc.ClientConnInterface) ScannerClient {
	return &scannerClient{cc}
}

func (c *scannerClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScannerInfo, error) {
	out := new(ScannerInfo)
	err := c.cc.Invoke(ctx, Scanner_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := c.cc.Invoke(ctx, Scanner_Scan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScannerServer is the server API for Scanner service.
// All implementations should embed UnimplementedScannerServer
// for forward compatibility
type ScannerServer interface {
	GetInfo(context.Context, *Empty) (*ScannerInfo, error)
	Scan(context.Context, *ScanRequest) (*ScanResult, error)
}

// UnimplementedScannerServer should be embedded to have forward compatible implementations.
type UnimplementedScannerServer struct {
}

func (UnimplementedScannerServer) GetInfo(context.Context, *Empty) (*ScannerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedScannerServer) Scan(context.Context, *ScanRequest) (*ScanResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}

// UnsafeScannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScannerServer will
// result in compilation errors.
type UnsafeScannerServer interface {
	mustEmbedUnimplementedScannerServer()
}

func RegisterScannerServer(s grpc.ServiceRegistrar, srv ScannerServer) {
	s.RegisterService(&Scanner_ServiceDesc, srv)
}

func _Scanner_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scanner_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scanner_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scanner_Scan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Scanner_ServiceDesc is the grpc.ServiceDesc for Scanner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scanner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Scanner",
	HandlerType: (*ScannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Scanner_GetInfo_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _Scanner_Scan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scanner.proto",
}
