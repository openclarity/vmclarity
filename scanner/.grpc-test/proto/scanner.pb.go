// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: proto/scanner.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScanFamily int32

const (
	ScanFamily_SCAN_FAMILY_PACKAGE          ScanFamily = 0
	ScanFamily_SCAN_FAMILY_VULNERABILITY    ScanFamily = 1
	ScanFamily_SCAN_FAMILY_MALWARE          ScanFamily = 2
	ScanFamily_SCAN_FAMILY_SECRET           ScanFamily = 3
	ScanFamily_SCAN_FAMILY_MISCONFIGURATION ScanFamily = 4
	ScanFamily_SCAN_FAMILY_ROOTKIT          ScanFamily = 5
	ScanFamily_SCAN_FAMILY_EXPLOIT          ScanFamily = 6
	ScanFamily_SCAN_FAMILY_INFO_FINDER      ScanFamily = 7
)

// Enum value maps for ScanFamily.
var (
	ScanFamily_name = map[int32]string{
		0: "SCAN_FAMILY_PACKAGE",
		1: "SCAN_FAMILY_VULNERABILITY",
		2: "SCAN_FAMILY_MALWARE",
		3: "SCAN_FAMILY_SECRET",
		4: "SCAN_FAMILY_MISCONFIGURATION",
		5: "SCAN_FAMILY_ROOTKIT",
		6: "SCAN_FAMILY_EXPLOIT",
		7: "SCAN_FAMILY_INFO_FINDER",
	}
	ScanFamily_value = map[string]int32{
		"SCAN_FAMILY_PACKAGE":          0,
		"SCAN_FAMILY_VULNERABILITY":    1,
		"SCAN_FAMILY_MALWARE":          2,
		"SCAN_FAMILY_SECRET":           3,
		"SCAN_FAMILY_MISCONFIGURATION": 4,
		"SCAN_FAMILY_ROOTKIT":          5,
		"SCAN_FAMILY_EXPLOIT":          6,
		"SCAN_FAMILY_INFO_FINDER":      7,
	}
)

func (x ScanFamily) Enum() *ScanFamily {
	p := new(ScanFamily)
	*p = x
	return p
}

func (x ScanFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scanner_proto_enumTypes[0].Descriptor()
}

func (ScanFamily) Type() protoreflect.EnumType {
	return &file_proto_scanner_proto_enumTypes[0]
}

func (x ScanFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanFamily.Descriptor instead.
func (ScanFamily) EnumDescriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{0}
}

type ScanObjectType int32

const (
	ScanObjectType_SCAN_OBJECT_TYPE_SBOM          ScanObjectType = 0
	ScanObjectType_SCAN_OBJECT_TYPE_IMAGE         ScanObjectType = 1
	ScanObjectType_SCAN_OBJECT_TYPE_DOCKERARCHIVE ScanObjectType = 2
	ScanObjectType_SCAN_OBJECT_TYPE_OCIARCHIVE    ScanObjectType = 3
	ScanObjectType_SCAN_OBJECT_TYPE_OCIDIR        ScanObjectType = 4
	ScanObjectType_SCAN_OBJECT_TYPE_DIR           ScanObjectType = 5
	ScanObjectType_SCAN_OBJECT_TYPE_ROOTFS        ScanObjectType = 6
	ScanObjectType_SCAN_OBJECT_TYPE_FILE          ScanObjectType = 7
)

// Enum value maps for ScanObjectType.
var (
	ScanObjectType_name = map[int32]string{
		0: "SCAN_OBJECT_TYPE_SBOM",
		1: "SCAN_OBJECT_TYPE_IMAGE",
		2: "SCAN_OBJECT_TYPE_DOCKERARCHIVE",
		3: "SCAN_OBJECT_TYPE_OCIARCHIVE",
		4: "SCAN_OBJECT_TYPE_OCIDIR",
		5: "SCAN_OBJECT_TYPE_DIR",
		6: "SCAN_OBJECT_TYPE_ROOTFS",
		7: "SCAN_OBJECT_TYPE_FILE",
	}
	ScanObjectType_value = map[string]int32{
		"SCAN_OBJECT_TYPE_SBOM":          0,
		"SCAN_OBJECT_TYPE_IMAGE":         1,
		"SCAN_OBJECT_TYPE_DOCKERARCHIVE": 2,
		"SCAN_OBJECT_TYPE_OCIARCHIVE":    3,
		"SCAN_OBJECT_TYPE_OCIDIR":        4,
		"SCAN_OBJECT_TYPE_DIR":           5,
		"SCAN_OBJECT_TYPE_ROOTFS":        6,
		"SCAN_OBJECT_TYPE_FILE":          7,
	}
)

func (x ScanObjectType) Enum() *ScanObjectType {
	p := new(ScanObjectType)
	*p = x
	return p
}

func (x ScanObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scanner_proto_enumTypes[1].Descriptor()
}

func (ScanObjectType) Type() protoreflect.EnumType {
	return &file_proto_scanner_proto_enumTypes[1]
}

func (x ScanObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanObjectType.Descriptor instead.
func (ScanObjectType) EnumDescriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{1}
}

type MisconfigurationSeverity int32

const (
	MisconfigurationSeverity_MISCONFIGURATION_SEVERITY_HIGH   MisconfigurationSeverity = 0
	MisconfigurationSeverity_MISCONFIGURATION_SEVERITY_MEDIUM MisconfigurationSeverity = 1
	MisconfigurationSeverity_MISCONFIGURATION_SEVERITY_LOW    MisconfigurationSeverity = 2
)

// Enum value maps for MisconfigurationSeverity.
var (
	MisconfigurationSeverity_name = map[int32]string{
		0: "MISCONFIGURATION_SEVERITY_HIGH",
		1: "MISCONFIGURATION_SEVERITY_MEDIUM",
		2: "MISCONFIGURATION_SEVERITY_LOW",
	}
	MisconfigurationSeverity_value = map[string]int32{
		"MISCONFIGURATION_SEVERITY_HIGH":   0,
		"MISCONFIGURATION_SEVERITY_MEDIUM": 1,
		"MISCONFIGURATION_SEVERITY_LOW":    2,
	}
)

func (x MisconfigurationSeverity) Enum() *MisconfigurationSeverity {
	p := new(MisconfigurationSeverity)
	*p = x
	return p
}

func (x MisconfigurationSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MisconfigurationSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scanner_proto_enumTypes[2].Descriptor()
}

func (MisconfigurationSeverity) Type() protoreflect.EnumType {
	return &file_proto_scanner_proto_enumTypes[2]
}

func (x MisconfigurationSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MisconfigurationSeverity.Descriptor instead.
func (MisconfigurationSeverity) EnumDescriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{2}
}

type VulnerabilitySeverity int32

const (
	VulnerabilitySeverity_VULNERABILITY_SEVERITY_CRITICAL   VulnerabilitySeverity = 0
	VulnerabilitySeverity_VULNERABILITY_SEVERITY_HIGH       VulnerabilitySeverity = 1
	VulnerabilitySeverity_VULNERABILITY_SEVERITY_MEDIUM     VulnerabilitySeverity = 2
	VulnerabilitySeverity_VULNERABILITY_SEVERITY_LOW        VulnerabilitySeverity = 3
	VulnerabilitySeverity_VULNERABILITY_SEVERITY_NEGLIGIBLE VulnerabilitySeverity = 4
)

// Enum value maps for VulnerabilitySeverity.
var (
	VulnerabilitySeverity_name = map[int32]string{
		0: "VULNERABILITY_SEVERITY_CRITICAL",
		1: "VULNERABILITY_SEVERITY_HIGH",
		2: "VULNERABILITY_SEVERITY_MEDIUM",
		3: "VULNERABILITY_SEVERITY_LOW",
		4: "VULNERABILITY_SEVERITY_NEGLIGIBLE",
	}
	VulnerabilitySeverity_value = map[string]int32{
		"VULNERABILITY_SEVERITY_CRITICAL":   0,
		"VULNERABILITY_SEVERITY_HIGH":       1,
		"VULNERABILITY_SEVERITY_MEDIUM":     2,
		"VULNERABILITY_SEVERITY_LOW":        3,
		"VULNERABILITY_SEVERITY_NEGLIGIBLE": 4,
	}
)

func (x VulnerabilitySeverity) Enum() *VulnerabilitySeverity {
	p := new(VulnerabilitySeverity)
	*p = x
	return p
}

func (x VulnerabilitySeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VulnerabilitySeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scanner_proto_enumTypes[3].Descriptor()
}

func (VulnerabilitySeverity) Type() protoreflect.EnumType {
	return &file_proto_scanner_proto_enumTypes[3]
}

func (x VulnerabilitySeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VulnerabilitySeverity.Descriptor instead.
func (VulnerabilitySeverity) EnumDescriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{3}
}

type RootkitType int32

const (
	RootkitType_ROOTKIT_TYPE_UNKNOWN     RootkitType = 0
	RootkitType_ROOTKIT_TYPE_MEMORY      RootkitType = 1
	RootkitType_ROOTKIT_TYPE_KERNEL      RootkitType = 2
	RootkitType_ROOTKIT_TYPE_APPLICATION RootkitType = 3
	RootkitType_ROOTKIT_TYPE_FIRMWARE    RootkitType = 4
)

// Enum value maps for RootkitType.
var (
	RootkitType_name = map[int32]string{
		0: "ROOTKIT_TYPE_UNKNOWN",
		1: "ROOTKIT_TYPE_MEMORY",
		2: "ROOTKIT_TYPE_KERNEL",
		3: "ROOTKIT_TYPE_APPLICATION",
		4: "ROOTKIT_TYPE_FIRMWARE",
	}
	RootkitType_value = map[string]int32{
		"ROOTKIT_TYPE_UNKNOWN":     0,
		"ROOTKIT_TYPE_MEMORY":      1,
		"ROOTKIT_TYPE_KERNEL":      2,
		"ROOTKIT_TYPE_APPLICATION": 3,
		"ROOTKIT_TYPE_FIRMWARE":    4,
	}
)

func (x RootkitType) Enum() *RootkitType {
	p := new(RootkitType)
	*p = x
	return p
}

func (x RootkitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RootkitType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scanner_proto_enumTypes[4].Descriptor()
}

func (RootkitType) Type() protoreflect.EnumType {
	return &file_proto_scanner_proto_enumTypes[4]
}

func (x RootkitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RootkitType.Descriptor instead.
func (RootkitType) EnumDescriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{4}
}

type InfoType int32

const (
	InfoType_INFO_TYPE_UNKNOWN                        InfoType = 0
	InfoType_INFO_TYPE_SSH_KNOWN_HOST_FINGERPRINT     InfoType = 1
	InfoType_INFO_TYPE_SSH_AUTHORIZED_KEY_FINGERPRINT InfoType = 2
	InfoType_INFO_TYPE_SSH_PRIVATE_KEY_FINGERPRINT    InfoType = 3
	InfoType_INFO_TYPE_SSH_DAEMON_KEY_FINGERPRINT     InfoType = 4
)

// Enum value maps for InfoType.
var (
	InfoType_name = map[int32]string{
		0: "INFO_TYPE_UNKNOWN",
		1: "INFO_TYPE_SSH_KNOWN_HOST_FINGERPRINT",
		2: "INFO_TYPE_SSH_AUTHORIZED_KEY_FINGERPRINT",
		3: "INFO_TYPE_SSH_PRIVATE_KEY_FINGERPRINT",
		4: "INFO_TYPE_SSH_DAEMON_KEY_FINGERPRINT",
	}
	InfoType_value = map[string]int32{
		"INFO_TYPE_UNKNOWN":                        0,
		"INFO_TYPE_SSH_KNOWN_HOST_FINGERPRINT":     1,
		"INFO_TYPE_SSH_AUTHORIZED_KEY_FINGERPRINT": 2,
		"INFO_TYPE_SSH_PRIVATE_KEY_FINGERPRINT":    3,
		"INFO_TYPE_SSH_DAEMON_KEY_FINGERPRINT":     4,
	}
)

func (x InfoType) Enum() *InfoType {
	p := new(InfoType)
	*p = x
	return p
}

func (x InfoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InfoType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scanner_proto_enumTypes[5].Descriptor()
}

func (InfoType) Type() protoreflect.EnumType {
	return &file_proto_scanner_proto_enumTypes[5]
}

func (x InfoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InfoType.Descriptor instead.
func (InfoType) EnumDescriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{5}
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Annotations map[string]string `protobuf:"bytes,1,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{0}
}

func (x *Metadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{1}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ScannerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version  string    `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ScannerInfo) Reset() {
	*x = ScannerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScannerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScannerInfo) ProtoMessage() {}

func (x *ScannerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScannerInfo.ProtoReflect.Descriptor instead.
func (*ScannerInfo) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{2}
}

func (x *ScannerInfo) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ScannerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScannerInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Family ScanFamily     `protobuf:"varint,2,opt,name=family,proto3,enum=proto.ScanFamily" json:"family,omitempty"`
	Type   ScanObjectType `protobuf:"varint,3,opt,name=type,proto3,enum=proto.ScanObjectType" json:"type,omitempty"`
	Path   string         `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ScanRequest) Reset() {
	*x = ScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanRequest) ProtoMessage() {}

func (x *ScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanRequest.ProtoReflect.Descriptor instead.
func (*ScanRequest) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{3}
}

func (x *ScanRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScanRequest) GetFamily() ScanFamily {
	if x != nil {
		return x.Family
	}
	return ScanFamily_SCAN_FAMILY_PACKAGE
}

func (x *ScanRequest) GetType() ScanObjectType {
	if x != nil {
		return x.Type
	}
	return ScanObjectType_SCAN_OBJECT_TYPE_SBOM
}

func (x *ScanRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ScanSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnownViruses       int32  `protobuf:"varint,1,opt,name=known_viruses,json=knownViruses,proto3" json:"known_viruses,omitempty"`
	ScannedDirectories int32  `protobuf:"varint,2,opt,name=scanned_directories,json=scannedDirectories,proto3" json:"scanned_directories,omitempty"`
	ScannedFiles       int32  `protobuf:"varint,3,opt,name=scanned_files,json=scannedFiles,proto3" json:"scanned_files,omitempty"`
	InfectedFiles      int32  `protobuf:"varint,4,opt,name=infected_files,json=infectedFiles,proto3" json:"infected_files,omitempty"`
	SuspectedFiles     int32  `protobuf:"varint,5,opt,name=suspected_files,json=suspectedFiles,proto3" json:"suspected_files,omitempty"`
	DataScanned        string `protobuf:"bytes,6,opt,name=data_scanned,json=dataScanned,proto3" json:"data_scanned,omitempty"`
	DataRead           string `protobuf:"bytes,7,opt,name=data_read,json=dataRead,proto3" json:"data_read,omitempty"`
	TimeTaken          string `protobuf:"bytes,8,opt,name=time_taken,json=timeTaken,proto3" json:"time_taken,omitempty"`
}

func (x *ScanSummary) Reset() {
	*x = ScanSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanSummary) ProtoMessage() {}

func (x *ScanSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanSummary.ProtoReflect.Descriptor instead.
func (*ScanSummary) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{4}
}

func (x *ScanSummary) GetKnownViruses() int32 {
	if x != nil {
		return x.KnownViruses
	}
	return 0
}

func (x *ScanSummary) GetScannedDirectories() int32 {
	if x != nil {
		return x.ScannedDirectories
	}
	return 0
}

func (x *ScanSummary) GetScannedFiles() int32 {
	if x != nil {
		return x.ScannedFiles
	}
	return 0
}

func (x *ScanSummary) GetInfectedFiles() int32 {
	if x != nil {
		return x.InfectedFiles
	}
	return 0
}

func (x *ScanSummary) GetSuspectedFiles() int32 {
	if x != nil {
		return x.SuspectedFiles
	}
	return 0
}

func (x *ScanSummary) GetDataScanned() string {
	if x != nil {
		return x.DataScanned
	}
	return ""
}

func (x *ScanSummary) GetDataRead() string {
	if x != nil {
		return x.DataRead
	}
	return ""
}

func (x *ScanSummary) GetTimeTaken() string {
	if x != nil {
		return x.TimeTaken
	}
	return ""
}

type ScanResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata    `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Request  *ScanRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Findings []*Finding   `protobuf:"bytes,3,rep,name=findings,proto3" json:"findings,omitempty"`
	Error    string       `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Summary  *ScanSummary `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *ScanResult) Reset() {
	*x = ScanResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanResult) ProtoMessage() {}

func (x *ScanResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanResult.ProtoReflect.Descriptor instead.
func (*ScanResult) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{5}
}

func (x *ScanResult) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ScanResult) GetRequest() *ScanRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ScanResult) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

func (x *ScanResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ScanResult) GetSummary() *ScanSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type Finding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FindingInfo:
	//
	//	*Finding_Package
	//	*Finding_Vulnerability
	//	*Finding_Malware
	//	*Finding_Secret
	//	*Finding_Misconfiguration
	//	*Finding_Rootkit
	//	*Finding_Exploit
	//	*Finding_Infofinder
	FindingInfo isFinding_FindingInfo `protobuf_oneof:"finding_info"`
}

func (x *Finding) Reset() {
	*x = Finding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finding) ProtoMessage() {}

func (x *Finding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finding.ProtoReflect.Descriptor instead.
func (*Finding) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{6}
}

func (m *Finding) GetFindingInfo() isFinding_FindingInfo {
	if m != nil {
		return m.FindingInfo
	}
	return nil
}

func (x *Finding) GetPackage() *Package {
	if x, ok := x.GetFindingInfo().(*Finding_Package); ok {
		return x.Package
	}
	return nil
}

func (x *Finding) GetVulnerability() *Vulnerability {
	if x, ok := x.GetFindingInfo().(*Finding_Vulnerability); ok {
		return x.Vulnerability
	}
	return nil
}

func (x *Finding) GetMalware() *Malware {
	if x, ok := x.GetFindingInfo().(*Finding_Malware); ok {
		return x.Malware
	}
	return nil
}

func (x *Finding) GetSecret() *Secret {
	if x, ok := x.GetFindingInfo().(*Finding_Secret); ok {
		return x.Secret
	}
	return nil
}

func (x *Finding) GetMisconfiguration() *Misconfiguration {
	if x, ok := x.GetFindingInfo().(*Finding_Misconfiguration); ok {
		return x.Misconfiguration
	}
	return nil
}

func (x *Finding) GetRootkit() *Rootkit {
	if x, ok := x.GetFindingInfo().(*Finding_Rootkit); ok {
		return x.Rootkit
	}
	return nil
}

func (x *Finding) GetExploit() *Exploit {
	if x, ok := x.GetFindingInfo().(*Finding_Exploit); ok {
		return x.Exploit
	}
	return nil
}

func (x *Finding) GetInfofinder() *InfoFinder {
	if x, ok := x.GetFindingInfo().(*Finding_Infofinder); ok {
		return x.Infofinder
	}
	return nil
}

type isFinding_FindingInfo interface {
	isFinding_FindingInfo()
}

type Finding_Package struct {
	Package *Package `protobuf:"bytes,1,opt,name=package,proto3,oneof"`
}

type Finding_Vulnerability struct {
	Vulnerability *Vulnerability `protobuf:"bytes,2,opt,name=vulnerability,proto3,oneof"`
}

type Finding_Malware struct {
	Malware *Malware `protobuf:"bytes,3,opt,name=malware,proto3,oneof"`
}

type Finding_Secret struct {
	Secret *Secret `protobuf:"bytes,4,opt,name=secret,proto3,oneof"`
}

type Finding_Misconfiguration struct {
	Misconfiguration *Misconfiguration `protobuf:"bytes,5,opt,name=misconfiguration,proto3,oneof"`
}

type Finding_Rootkit struct {
	Rootkit *Rootkit `protobuf:"bytes,6,opt,name=rootkit,proto3,oneof"`
}

type Finding_Exploit struct {
	Exploit *Exploit `protobuf:"bytes,7,opt,name=exploit,proto3,oneof"`
}

type Finding_Infofinder struct {
	Infofinder *InfoFinder `protobuf:"bytes,8,opt,name=infofinder,proto3,oneof"`
}

func (*Finding_Package) isFinding_FindingInfo() {}

func (*Finding_Vulnerability) isFinding_FindingInfo() {}

func (*Finding_Malware) isFinding_FindingInfo() {}

func (*Finding_Secret) isFinding_FindingInfo() {}

func (*Finding_Misconfiguration) isFinding_FindingInfo() {}

func (*Finding_Rootkit) isFinding_FindingInfo() {}

func (*Finding_Exploit) isFinding_FindingInfo() {}

func (*Finding_Infofinder) isFinding_FindingInfo() {}

type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	FilePath    string `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	StartLine   int32  `protobuf:"varint,3,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine     int32  `protobuf:"varint,4,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	StartColumn int32  `protobuf:"varint,5,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	EndColumn   int32  `protobuf:"varint,6,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
	Fingerprint string `protobuf:"bytes,7,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (x *Secret) Reset() {
	*x = Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{7}
}

func (x *Secret) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Secret) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *Secret) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *Secret) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *Secret) GetStartColumn() int32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *Secret) GetEndColumn() int32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

func (x *Secret) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

type Misconfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Location    string                   `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Category    string                   `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Message     string                   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Description string                   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Remediation string                   `protobuf:"bytes,6,opt,name=remediation,proto3" json:"remediation,omitempty"`
	Severity    MisconfigurationSeverity `protobuf:"varint,7,opt,name=severity,proto3,enum=proto.MisconfigurationSeverity" json:"severity,omitempty"`
}

func (x *Misconfiguration) Reset() {
	*x = Misconfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Misconfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Misconfiguration) ProtoMessage() {}

func (x *Misconfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Misconfiguration.ProtoReflect.Descriptor instead.
func (*Misconfiguration) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{8}
}

func (x *Misconfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Misconfiguration) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Misconfiguration) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Misconfiguration) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Misconfiguration) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Misconfiguration) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

func (x *Misconfiguration) GetSeverity() MisconfigurationSeverity {
	if x != nil {
		return x.Severity
	}
	return MisconfigurationSeverity_MISCONFIGURATION_SEVERITY_HIGH
}

type Rootkit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootkitName string      `protobuf:"bytes,1,opt,name=rootkit_name,json=rootkitName,proto3" json:"rootkit_name,omitempty"`
	RootkitType RootkitType `protobuf:"varint,2,opt,name=rootkit_type,json=rootkitType,proto3,enum=proto.RootkitType" json:"rootkit_type,omitempty"`
	Message     string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Rootkit) Reset() {
	*x = Rootkit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rootkit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rootkit) ProtoMessage() {}

func (x *Rootkit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rootkit.ProtoReflect.Descriptor instead.
func (*Rootkit) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{9}
}

func (x *Rootkit) GetRootkitName() string {
	if x != nil {
		return x.RootkitName
	}
	return ""
}

func (x *Rootkit) GetRootkitType() RootkitType {
	if x != nil {
		return x.RootkitType
	}
	return RootkitType_ROOTKIT_TYPE_UNKNOWN
}

func (x *Rootkit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Exploit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Title       string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CveId       string   `protobuf:"bytes,4,opt,name=cve_id,json=cveId,proto3" json:"cve_id,omitempty"`
	SourceDb    string   `protobuf:"bytes,5,opt,name=source_db,json=sourceDb,proto3" json:"source_db,omitempty"`
	Urls        []string `protobuf:"bytes,6,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *Exploit) Reset() {
	*x = Exploit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exploit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exploit) ProtoMessage() {}

func (x *Exploit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exploit.ProtoReflect.Descriptor instead.
func (*Exploit) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{10}
}

func (x *Exploit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Exploit) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Exploit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Exploit) GetCveId() string {
	if x != nil {
		return x.CveId
	}
	return ""
}

func (x *Exploit) GetSourceDb() string {
	if x != nil {
		return x.SourceDb
	}
	return ""
}

func (x *Exploit) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type InfoFinder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type InfoType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.InfoType" json:"type,omitempty"`
	Path string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Data string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InfoFinder) Reset() {
	*x = InfoFinder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoFinder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoFinder) ProtoMessage() {}

func (x *InfoFinder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoFinder.ProtoReflect.Descriptor instead.
func (*InfoFinder) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{11}
}

func (x *InfoFinder) GetType() InfoType {
	if x != nil {
		return x.Type
	}
	return InfoType_INFO_TYPE_UNKNOWN
}

func (x *InfoFinder) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *InfoFinder) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Vulnerability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VulnerabilityName string                `protobuf:"bytes,1,opt,name=vulnerability_name,json=vulnerabilityName,proto3" json:"vulnerability_name,omitempty"`
	Description       string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Severity          VulnerabilitySeverity `protobuf:"varint,3,opt,name=severity,proto3,enum=proto.VulnerabilitySeverity" json:"severity,omitempty"`
	Links             []string              `protobuf:"bytes,4,rep,name=links,proto3" json:"links,omitempty"`
	Distro            *VulnerabilityDistro  `protobuf:"bytes,5,opt,name=distro,proto3" json:"distro,omitempty"`
	Cvss              []*VulnerabilityCvss  `protobuf:"bytes,6,rep,name=cvss,proto3" json:"cvss,omitempty"`
	Package           *Package              `protobuf:"bytes,7,opt,name=package,proto3" json:"package,omitempty"`
	Fix               *VulnerabilityFix     `protobuf:"bytes,8,opt,name=fix,proto3" json:"fix,omitempty"`
	LayerId           string                `protobuf:"bytes,9,opt,name=layer_id,json=layerId,proto3" json:"layer_id,omitempty"`
	Path              string                `protobuf:"bytes,10,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Vulnerability) Reset() {
	*x = Vulnerability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vulnerability) ProtoMessage() {}

func (x *Vulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vulnerability.ProtoReflect.Descriptor instead.
func (*Vulnerability) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{12}
}

func (x *Vulnerability) GetVulnerabilityName() string {
	if x != nil {
		return x.VulnerabilityName
	}
	return ""
}

func (x *Vulnerability) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Vulnerability) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_VULNERABILITY_SEVERITY_CRITICAL
}

func (x *Vulnerability) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Vulnerability) GetDistro() *VulnerabilityDistro {
	if x != nil {
		return x.Distro
	}
	return nil
}

func (x *Vulnerability) GetCvss() []*VulnerabilityCvss {
	if x != nil {
		return x.Cvss
	}
	return nil
}

func (x *Vulnerability) GetPackage() *Package {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *Vulnerability) GetFix() *VulnerabilityFix {
	if x != nil {
		return x.Fix
	}
	return nil
}

func (x *Vulnerability) GetLayerId() string {
	if x != nil {
		return x.LayerId
	}
	return ""
}

func (x *Vulnerability) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version  string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Type     string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Language string   `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	Licenses []string `protobuf:"bytes,5,rep,name=licenses,proto3" json:"licenses,omitempty"`
	Cpes     []string `protobuf:"bytes,6,rep,name=cpes,proto3" json:"cpes,omitempty"`
	Purl     string   `protobuf:"bytes,7,opt,name=purl,proto3" json:"purl,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{13}
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Package) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Package) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Package) GetLicenses() []string {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *Package) GetCpes() []string {
	if x != nil {
		return x.Cpes
	}
	return nil
}

func (x *Package) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

type VulnerabilityFix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions []string `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
	State    string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *VulnerabilityFix) Reset() {
	*x = VulnerabilityFix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityFix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityFix) ProtoMessage() {}

func (x *VulnerabilityFix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityFix.ProtoReflect.Descriptor instead.
func (*VulnerabilityFix) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{14}
}

func (x *VulnerabilityFix) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *VulnerabilityFix) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type VulnerabilityCvss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string                    `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Vector  string                    `protobuf:"bytes,2,opt,name=vector,proto3" json:"vector,omitempty"`
	Metrics *VulnerabilityCvssMetrics `protobuf:"bytes,3,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *VulnerabilityCvss) Reset() {
	*x = VulnerabilityCvss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityCvss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityCvss) ProtoMessage() {}

func (x *VulnerabilityCvss) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityCvss.ProtoReflect.Descriptor instead.
func (*VulnerabilityCvss) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{15}
}

func (x *VulnerabilityCvss) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VulnerabilityCvss) GetVector() string {
	if x != nil {
		return x.Vector
	}
	return ""
}

func (x *VulnerabilityCvss) GetMetrics() *VulnerabilityCvssMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type VulnerabilityCvssMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseScore           float64 `protobuf:"fixed64,1,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty"`
	ExploitabilityScore float64 `protobuf:"fixed64,2,opt,name=exploitability_score,json=exploitabilityScore,proto3" json:"exploitability_score,omitempty"`
	ImpactScore         float64 `protobuf:"fixed64,3,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`
}

func (x *VulnerabilityCvssMetrics) Reset() {
	*x = VulnerabilityCvssMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityCvssMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityCvssMetrics) ProtoMessage() {}

func (x *VulnerabilityCvssMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityCvssMetrics.ProtoReflect.Descriptor instead.
func (*VulnerabilityCvssMetrics) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{16}
}

func (x *VulnerabilityCvssMetrics) GetBaseScore() float64 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *VulnerabilityCvssMetrics) GetExploitabilityScore() float64 {
	if x != nil {
		return x.ExploitabilityScore
	}
	return 0
}

func (x *VulnerabilityCvssMetrics) GetImpactScore() float64 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

type VulnerabilityDistro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	IdLike  []string `protobuf:"bytes,3,rep,name=id_like,json=idLike,proto3" json:"id_like,omitempty"`
}

func (x *VulnerabilityDistro) Reset() {
	*x = VulnerabilityDistro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityDistro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityDistro) ProtoMessage() {}

func (x *VulnerabilityDistro) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityDistro.ProtoReflect.Descriptor instead.
func (*VulnerabilityDistro) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{17}
}

func (x *VulnerabilityDistro) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VulnerabilityDistro) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VulnerabilityDistro) GetIdLike() []string {
	if x != nil {
		return x.IdLike
	}
	return nil
}

type Malware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MalwareName string `protobuf:"bytes,1,opt,name=malware_name,json=malwareName,proto3" json:"malware_name,omitempty"`
	MalwareType string `protobuf:"bytes,2,opt,name=malware_type,json=malwareType,proto3" json:"malware_type,omitempty"`
	RuleName    string `protobuf:"bytes,3,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	Path        string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Malware) Reset() {
	*x = Malware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Malware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Malware) ProtoMessage() {}

func (x *Malware) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Malware.ProtoReflect.Descriptor instead.
func (*Malware) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{18}
}

func (x *Malware) GetMalwareName() string {
	if x != nil {
		return x.MalwareName
	}
	return ""
}

func (x *Malware) GetMalwareType() string {
	if x != nil {
		return x.MalwareType
	}
	return ""
}

func (x *Malware) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *Malware) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scanner_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scanner_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_scanner_proto_rawDescGZIP(), []int{19}
}

var File_proto_scanner_proto protoreflect.FileDescriptor

var file_proto_scanner_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x01, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x32, 0x0a,
	0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x68, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x0b,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x61,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xb7, 0x02, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x76,
	0x69, 0x72, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x56, 0x69, 0x72, 0x75, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x22,
	0xd7, 0x01, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x66, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xac, 0x03, 0x0a, 0x07, 0x46, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x0d, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x2a, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x6d, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x74, 0x6b, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x6b, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x72, 0x6f, 0x6f, 0x74, 0x6b, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e,
	0x66, 0x6f, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xe5, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x22, 0xf5, 0x01, 0x0a, 0x10, 0x4d, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x7d, 0x0a, 0x07, 0x52, 0x6f, 0x6f, 0x74,
	0x6b, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x6b, 0x69, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x6b,
	0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x6b, 0x69,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x6b, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x6b, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x63, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x76, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x64, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x59, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x96, 0x03, 0x0a, 0x0d, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x6f, 0x52, 0x06, 0x64, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x76, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x76, 0x73,
	0x73, 0x52, 0x04, 0x63, 0x76, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x29, 0x0a, 0x03, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x78, 0x52, 0x03, 0x66, 0x69, 0x78, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xab, 0x01, 0x0a, 0x07,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x22, 0x44, 0x0a, 0x10, 0x56, 0x75, 0x6c,
	0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x78, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x80, 0x01, 0x0a, 0x11, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x76, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x76,
	0x73, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x76, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x31,
	0x0a, 0x14, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x5c, 0x0a, 0x13, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x4c, 0x69,
	0x6b, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x2a, 0xe6,
	0x01, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x46,
	0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x46, 0x41,
	0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x53, 0x45,
	0x43, 0x52, 0x45, 0x54, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x46,
	0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41, 0x4e,
	0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x4b, 0x49, 0x54, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x49, 0x54, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43,
	0x41, 0x4e, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xfb, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43,
	0x41, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x42, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x41, 0x52, 0x43, 0x48,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x43, 0x49, 0x41, 0x52, 0x43,
	0x48, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x43, 0x49, 0x44, 0x49,
	0x52, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x10, 0x05, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x46, 0x53, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43,
	0x41, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x10, 0x07, 0x2a, 0x87, 0x01, 0x0a, 0x18, 0x4d, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x49, 0x53, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x4d, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x2a,
	0xc7, 0x01, 0x0a, 0x15, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x55, 0x4c,
	0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x12,
	0x21, 0x0a, 0x1d, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x45, 0x47,
	0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x2a, 0x92, 0x01, 0x0a, 0x0b, 0x52, 0x6f,
	0x6f, 0x74, 0x6b, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x4f,
	0x54, 0x4b, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x4f, 0x54, 0x4b, 0x49, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x4f, 0x4f, 0x54, 0x4b, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x4f, 0x4f, 0x54, 0x4b, 0x49, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4f, 0x54, 0x4b, 0x49, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x10, 0x04, 0x2a, 0xce,
	0x01, 0x0a, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x53, 0x48, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x46,
	0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x53, 0x48, 0x5f, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52,
	0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x53, 0x48, 0x5f, 0x44, 0x41, 0x45, 0x4d, 0x4f, 0x4e, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x32,
	0x65, 0x0a, 0x07, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x12,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_scanner_proto_rawDescOnce sync.Once
	file_proto_scanner_proto_rawDescData = file_proto_scanner_proto_rawDesc
)

func file_proto_scanner_proto_rawDescGZIP() []byte {
	file_proto_scanner_proto_rawDescOnce.Do(func() {
		file_proto_scanner_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_scanner_proto_rawDescData)
	})
	return file_proto_scanner_proto_rawDescData
}

var file_proto_scanner_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_scanner_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_proto_scanner_proto_goTypes = []interface{}{
	(ScanFamily)(0),                  // 0: proto.ScanFamily
	(ScanObjectType)(0),              // 1: proto.ScanObjectType
	(MisconfigurationSeverity)(0),    // 2: proto.MisconfigurationSeverity
	(VulnerabilitySeverity)(0),       // 3: proto.VulnerabilitySeverity
	(RootkitType)(0),                 // 4: proto.RootkitType
	(InfoType)(0),                    // 5: proto.InfoType
	(*Metadata)(nil),                 // 6: proto.Metadata
	(*KeyValue)(nil),                 // 7: proto.KeyValue
	(*ScannerInfo)(nil),              // 8: proto.ScannerInfo
	(*ScanRequest)(nil),              // 9: proto.ScanRequest
	(*ScanSummary)(nil),              // 10: proto.ScanSummary
	(*ScanResult)(nil),               // 11: proto.ScanResult
	(*Finding)(nil),                  // 12: proto.Finding
	(*Secret)(nil),                   // 13: proto.Secret
	(*Misconfiguration)(nil),         // 14: proto.Misconfiguration
	(*Rootkit)(nil),                  // 15: proto.Rootkit
	(*Exploit)(nil),                  // 16: proto.Exploit
	(*InfoFinder)(nil),               // 17: proto.InfoFinder
	(*Vulnerability)(nil),            // 18: proto.Vulnerability
	(*Package)(nil),                  // 19: proto.Package
	(*VulnerabilityFix)(nil),         // 20: proto.VulnerabilityFix
	(*VulnerabilityCvss)(nil),        // 21: proto.VulnerabilityCvss
	(*VulnerabilityCvssMetrics)(nil), // 22: proto.VulnerabilityCvssMetrics
	(*VulnerabilityDistro)(nil),      // 23: proto.VulnerabilityDistro
	(*Malware)(nil),                  // 24: proto.Malware
	(*Empty)(nil),                    // 25: proto.Empty
	nil,                              // 26: proto.Metadata.AnnotationsEntry
}
var file_proto_scanner_proto_depIdxs = []int32{
	26, // 0: proto.Metadata.annotations:type_name -> proto.Metadata.AnnotationsEntry
	6,  // 1: proto.ScannerInfo.metadata:type_name -> proto.Metadata
	0,  // 2: proto.ScanRequest.family:type_name -> proto.ScanFamily
	1,  // 3: proto.ScanRequest.type:type_name -> proto.ScanObjectType
	6,  // 4: proto.ScanResult.metadata:type_name -> proto.Metadata
	9,  // 5: proto.ScanResult.request:type_name -> proto.ScanRequest
	12, // 6: proto.ScanResult.findings:type_name -> proto.Finding
	10, // 7: proto.ScanResult.summary:type_name -> proto.ScanSummary
	19, // 8: proto.Finding.package:type_name -> proto.Package
	18, // 9: proto.Finding.vulnerability:type_name -> proto.Vulnerability
	24, // 10: proto.Finding.malware:type_name -> proto.Malware
	13, // 11: proto.Finding.secret:type_name -> proto.Secret
	14, // 12: proto.Finding.misconfiguration:type_name -> proto.Misconfiguration
	15, // 13: proto.Finding.rootkit:type_name -> proto.Rootkit
	16, // 14: proto.Finding.exploit:type_name -> proto.Exploit
	17, // 15: proto.Finding.infofinder:type_name -> proto.InfoFinder
	2,  // 16: proto.Misconfiguration.severity:type_name -> proto.MisconfigurationSeverity
	4,  // 17: proto.Rootkit.rootkit_type:type_name -> proto.RootkitType
	5,  // 18: proto.InfoFinder.type:type_name -> proto.InfoType
	3,  // 19: proto.Vulnerability.severity:type_name -> proto.VulnerabilitySeverity
	23, // 20: proto.Vulnerability.distro:type_name -> proto.VulnerabilityDistro
	21, // 21: proto.Vulnerability.cvss:type_name -> proto.VulnerabilityCvss
	19, // 22: proto.Vulnerability.package:type_name -> proto.Package
	20, // 23: proto.Vulnerability.fix:type_name -> proto.VulnerabilityFix
	22, // 24: proto.VulnerabilityCvss.metrics:type_name -> proto.VulnerabilityCvssMetrics
	25, // 25: proto.Scanner.GetInfo:input_type -> proto.Empty
	9,  // 26: proto.Scanner.Scan:input_type -> proto.ScanRequest
	8,  // 27: proto.Scanner.GetInfo:output_type -> proto.ScannerInfo
	11, // 28: proto.Scanner.Scan:output_type -> proto.ScanResult
	27, // [27:29] is the sub-list for method output_type
	25, // [25:27] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_proto_scanner_proto_init() }
func file_proto_scanner_proto_init() {
	if File_proto_scanner_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_scanner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScannerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Finding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Misconfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rootkit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exploit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoFinder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vulnerability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityFix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityCvss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityCvssMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityDistro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Malware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scanner_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_scanner_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Finding_Package)(nil),
		(*Finding_Vulnerability)(nil),
		(*Finding_Malware)(nil),
		(*Finding_Secret)(nil),
		(*Finding_Misconfiguration)(nil),
		(*Finding_Rootkit)(nil),
		(*Finding_Exploit)(nil),
		(*Finding_Infofinder)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_scanner_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_scanner_proto_goTypes,
		DependencyIndexes: file_proto_scanner_proto_depIdxs,
		EnumInfos:         file_proto_scanner_proto_enumTypes,
		MessageInfos:      file_proto_scanner_proto_msgTypes,
	}.Build()
	File_proto_scanner_proto = out.File
	file_proto_scanner_proto_rawDesc = nil
	file_proto_scanner_proto_goTypes = nil
	file_proto_scanner_proto_depIdxs = nil
}
