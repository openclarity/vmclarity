syntax = "proto3";
package proto;
option go_package = "./proto";

import "google.longrunning";

enum ScanFamily {
    SCAN_FAMILY_PACKAGE = 0;
    SCAN_FAMILY_VULNERABILITY = 1;
    SCAN_FAMILY_MALWARE = 2;
    SCAN_FAMILY_SECRET = 3;
    SCAN_FAMILY_MISCONFIGURATION = 4;
    SCAN_FAMILY_ROOTKIT = 5;
    SCAN_FAMILY_EXPLOIT = 6;
    SCAN_FAMILY_INFO_FINDER = 7;
}

enum ScanObjectType {
    SCAN_OBJECT_TYPE_SBOM = 0;
    SCAN_OBJECT_TYPE_IMAGE = 1;
    SCAN_OBJECT_TYPE_DOCKERARCHIVE = 2;
    SCAN_OBJECT_TYPE_OCIARCHIVE = 3;
    SCAN_OBJECT_TYPE_OCIDIR = 4;
    SCAN_OBJECT_TYPE_DIR = 5;
    SCAN_OBJECT_TYPE_ROOTFS = 6;
    SCAN_OBJECT_TYPE_FILE = 7;
}

message Metadata {
    map<string, string> annotations = 1;
}

message ScannerInfo {
    Metadata metadata = 1;
    string name = 2;
    string version = 3;
    string api_version = 4;
}

message ScanRequest {
    string id = 1;
    ScanObjectType type = 3;
    string path = 4;
}

message ScanSummary {
    int32 known_viruses = 1;
    int32 scanned_directories = 2;
    int32 scanned_files = 3;
    int32 infected_files = 4;
    int32 suspected_files = 5;
    string data_scanned = 6;
    string data_read = 7;
    string time_taken = 8;
}

message ScanResult {
    Metadata metadata = 1;
    ScanRequest request = 2;
    repeated Finding findings = 3;
    string error = 4;
    ScanSummary summary = 5;
}

message Finding {
    oneof finding_info {
        Package package = 1;
        Vulnerability vulnerability = 2;
        Malware malware = 3;
        Secret secret = 4;
        Misconfiguration misconfiguration = 5;
        Rootkit rootkit = 6;
        Exploit exploit = 7;
        InfoFinder infofinder = 8;
    }
}

message Secret {
    string description = 1;
    string file_path = 2;
    int32 start_line = 3;
    int32 end_line = 4;
    int32 start_column = 5;
    int32 end_column = 6;
    string fingerprint = 7;
}

message Misconfiguration {
    string id = 1;
    string location = 2;
    string category = 3;
    string message = 4;
    string description = 5;
    string remediation = 6;
    MisconfigurationSeverity severity = 7;
}

message Rootkit {
    string rootkit_name = 1;
    RootkitType rootkit_type = 2;
    string message = 3;
}

message Exploit {
    string name = 1;
    string title = 2;
    string description = 3;
    string cve_id = 4;
    string source_db = 5;
    repeated string urls = 6;
}

message InfoFinder {
    InfoType type = 1;
    string path = 2;
    string data = 3;
}

message Vulnerability {
    string vulnerability_name = 1;
    string description = 2;
    VulnerabilitySeverity severity = 3;
    repeated string links = 4;
    VulnerabilityDistro distro = 5;
    repeated VulnerabilityCvss cvss = 6;
    Package package = 7;
    VulnerabilityFix fix = 8;
    string layer_id = 9;
    string path = 10;
}

message Package {
    string name = 1;
    string version = 2;
    string type = 3;
    string language = 4;
    repeated string licenses = 5;
    repeated string cpes = 6;
    string purl = 7;
}

message VulnerabilityFix {
    repeated string versions = 1;
    string state = 2;
}

message VulnerabilityCvss {
    string version = 1;
    string vector = 2;
    VulnerabilityCvssMetrics metrics = 3;
}

message VulnerabilityCvssMetrics {
    double base_score = 1;
    double exploitability_score = 2;
    double impact_score = 3;
}

message VulnerabilityDistro {
    string name = 1;
    string version = 2;
    repeated string id_like = 3;
}

message Malware {
    string malware_name = 1;
    string malware_type = 2;
    string rule_name = 3;
    string path = 4;
}

enum MisconfigurationSeverity {
    MISCONFIGURATION_SEVERITY_HIGH = 0;
    MISCONFIGURATION_SEVERITY_MEDIUM = 1;
    MISCONFIGURATION_SEVERITY_LOW = 2;
}

enum VulnerabilitySeverity {
    VULNERABILITY_SEVERITY_CRITICAL = 0;
    VULNERABILITY_SEVERITY_HIGH = 1;
    VULNERABILITY_SEVERITY_MEDIUM = 2;
    VULNERABILITY_SEVERITY_LOW = 3;
    VULNERABILITY_SEVERITY_NEGLIGIBLE = 4;
}


enum RootkitType {
    ROOTKIT_TYPE_UNKNOWN = 0;
    ROOTKIT_TYPE_MEMORY = 1;
    ROOTKIT_TYPE_KERNEL = 2;
    ROOTKIT_TYPE_APPLICATION = 3;
    ROOTKIT_TYPE_FIRMWARE = 4;
}

enum InfoType {
    INFO_TYPE_UNKNOWN = 0;
    INFO_TYPE_SSH_KNOWN_HOST_FINGERPRINT = 1;
    INFO_TYPE_SSH_AUTHORIZED_KEY_FINGERPRINT = 2;
    INFO_TYPE_SSH_PRIVATE_KEY_FINGERPRINT = 3;
    INFO_TYPE_SSH_DAEMON_KEY_FINGERPRINT = 4;
}

message ResultState {
    oneof state {
        string nesto = 1;
    }
}

message Empty {}

service Scanner {
    rpc GetInfo(Empty) returns (ScannerInfo);
    rpc StartScan(ScanRequest) returns (ScanResult);
    rpc StopScan(Empty) returns (Empty);
    rpc GetResult(Empty) returns (ScanResult);
}
