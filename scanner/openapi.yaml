---
openapi: 3.0.1

info:
  title: VMClarity Scanner API
  version: 1.0.0

paths:
  /scanner:
    get:
      summary: Fetches runtime scanner details.
      operationId: GetScannerInfo
      responses:
        200:
          description: Scanner details fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScannerInfo'
        default:
          $ref: '#/components/responses/UnknownError'

  /scans:
    get:
      summary: Get all scans.
      operationId: GetScans
      parameters:
        - $ref: '#/components/parameters/scanState'
      responses:
        200:
          description: Scans fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scans'
        default:
          $ref: '#/components/responses/UnknownError'

    post:
      summary: Create a new scan.
      operationId: CreateScan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scan'
        required: true
      responses:
        201:
          description: Scan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
        400:
          description: Invalid scan supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          $ref: '#/components/responses/UnknownError'
      x-codegen-request-body-name: body

  /scan/{scanID}:
    get:
      summary: Get scan details.
      operationId: GetScan
      parameters:
        - $ref: '#/components/parameters/scanID'
      responses:
        200:
          description: Scan fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
        404:
          description: Scan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          $ref: '#/components/responses/UnknownError'

    delete:
      summary: Delete a scan.
      operationId: DeleteScan
      parameters:
        - $ref: '#/components/parameters/scanID'
      responses:
        200:
          description: Scan deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        404:
          description: Scan does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          $ref: '#/components/responses/UnknownError'

  /scan/{scanID}/stop:
    post:
      summary: Stop currently running scan.
      operationId: StopScan
      parameters:
        - $ref: '#/components/parameters/scanID'
      responses:
        200:
          description: Scan stopped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
        404:
          description: Scan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          $ref: '#/components/responses/UnknownError'


  /scan/{scanID}/result:
    get:
      summary: Get scan result
      operationId: GetScanResult
      parameters:
        - $ref: '#/components/parameters/scanID'
      responses:
        200:
          description: Scan result fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanFindings'
        202:
          description: Scan still in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanProgressResponse'
        404:
          description: Scan does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          $ref: '#/components/responses/UnknownError'

  /livez:
    get:
      summary: Check if the API is alive and responsive.
      operationId: IsAlive
      responses:
        200:
          description: API is alive and responsive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          $ref: '#/components/responses/UnknownError'

  /readyz:
    get:
      summary: Check if the API is ready to receive traffic.
      operationId: IsReady
      responses:
        200:
          description: API is ready to handle requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          $ref: '#/components/responses/UnknownError'

components:
  schemas:
    Annotations:
      type: array
      description: Generic map of string keys and string values to attach arbitrary non-identifying metadata to objects.
      items:
        type: object
        properties:
          key:
            type: string
          value:
            type: string

    Metadata:
      type: object
      properties:
        annotations:
          $ref: '#/components/schemas/Annotations'

    ScannerInfo:
      type: object
      description: Describes scanner runtime details.
      allOf:
        - $ref: '#/components/schemas/Metadata'
        - type: object
          properties:
            name:
              type: string
              description: Scanner name.
            version:
              type: string
              description: Scanner runtime version.

    ScanStatus:
      type: object
      required:
        - state
        - lastTransitionTime
      properties:
        state:
          description: |
            Describes the state of scan.

            | State      | Description                    |
            | ---------- | ------------------------------ |
            | Pending    | Initial state for Scan         |
            | InProgress | Scan is in progress            |
            | Aborted    | Scan has been aborted          |
            | Failed     | Scan has failed                |
            | Done       | Scan has finished successfully |
          type: string
          enum:
            - Pending
            - InProgress
            - Aborted
            - Failed
            - Done
          x-enum-varnames:
            - ScanStatusStatePending
            - ScanStatusStateInProgress
            - ScanStatusStateAborted
            - ScanStatusStateFailed
            - ScanStatusStateDone
        message:
          description: Human readable message.
          type: string
        lastTransitionTime:
          description: Last date time when the status has changed.
          type: string
          format: date-time

    Scans:
      type: object
      properties:
        count:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/Scan'

    Scan:
      type: object
      required:
        - inputs
      properties:
        id:
          type: string
          readOnly: true
        status:
          allOf:
            - $ref: '#/components/schemas/ScanStatus'
          readOnly: true
        startTime:
          type: string
          format: date-time
          readOnly: true
        endTime:
          type: string
          format: date-time
          readOnly: true
        jobsLeftToRun:
          type: integer
          readOnly: true
        jobsCompleted:
          type: integer
          readOnly: true
        inputs:
          type: array
          description: List of inputs to scan (some rational amount, e.g. 100).
          items:
            $ref: '#/components/schemas/ScanInput'
        timeoutSeconds:
          type: integer
          minimum: 0
          description: |
            The maximum time in seconds that a scan should
            run for before being automatically aborted.
          writeOnly: true

    Package:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        type:
          type: string
        language:
          type: string
        licenses:
          type: array
          items:
            type: string
          nullable: true
        cpes:
          type: array
          items:
            type: string
          nullable: true
        purl:
          type: string

    PackageFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/Package'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    VulnerabilityFix:
      type: object
      properties:
        versions:
          type: array
          items:
            type: string
          nullable: true
        state:
          type: string

    VulnerabilityCvss:
      type: object
      properties:
        version:
          type: string
        vector:
          type: string
        metrics:
          $ref: '#/components/schemas/VulnerabilityCvssMetrics'

    VulnerabilityCvssMetrics:
      type: object
      properties:
        baseScore:
          type: number
        exploitabilityScore:
          type: number
        impactScore:
          type: number

    VulnerabilityDistro:
      type: object
      description: Distro provides information about a detected OS distribution.
      properties:
        name:
          description: Name of the OS distribution
          type: string
        version:
          description: Version of the OS distribution (major or major.minor version)
          type: string
        IDLike:
          description: the ID_LIKE field found within Linux OS /etc/os-release file
          type: array
          items:
            type: string
          nullable: true

    VulnerabilitySeverity:
      type: string
      enum:
        - CRITICAL
        - HIGH
        - MEDIUM
        - LOW
        - NEGLIGIBLE

    Vulnerability:
      type: object
      properties:
        vulnerabilityName:
          type: string
        description:
          type: string
        severity:
          $ref: '#/components/schemas/VulnerabilitySeverity'
        links:
          type: array
          items:
            type: string
          nullable: true
        distro:
          $ref: '#/components/schemas/VulnerabilityDistro'
        cvss:
          type: array
          items:
            $ref: '#/components/schemas/VulnerabilityCvss'
          nullable: true
        package:
          $ref: '#/components/schemas/Package'
        fix:
          $ref: '#/components/schemas/VulnerabilityFix'
        layerId:
          type: string
        path:
          type: string

    VulnerabilityFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/Vulnerability'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    MalwareType:
      type: string

    Malware:
      type: object
      properties:
        malwareName:
          type: string
        malwareType:
          $ref: '#/components/schemas/MalwareType'
        ruleName:
          type: string
        path:
          type: string
          description: Path of the file that contains malware

    MalwareFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/Malware'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    Secret:
      type: object
      properties:
        description:
          type: string
        filePath:
          description: "Name of the file containing the secret"
          type: string
        startLine:
          type: integer
        endLine:
          type: integer
        startColumn:
          type: integer
        endColumn:
          type: integer
        fingerprint:
          description: "Note: this is not unique"
          type: string

    SecretFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/Secret'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    MisconfigurationSeverity:
      type: string
      enum:
        - MisconfigurationHighSeverity
        - MisconfigurationMediumSeverity
        - MisconfigurationLowSeverity

    Misconfiguration:
      type: object
      properties:
        id:
          type: string
          description: Check or test ID, if applicable (e.g. Lynis TestID, CIS Docker Benchmark checkpoint code, etc)
        location:
          type: string
          description: Location within the input object where the misconfiguration was recorded (e.g. filesystem path)
        category:
          type: string
          description: Specifies misconfiguration impact category
        message:
          type: string
          description: Short info about the misconfiguration
        description:
          type: string
          description: Additional context such as the potential impact
        remediation:
          type: string
          description: Possible fix for the misconfiguration
        severity:
          $ref: '#/components/schemas/MisconfigurationSeverity'

    MisconfigurationFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/Misconfiguration'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    RootkitType:
      type: string
      enum:
        - MEMORY
        - KERNEL
        - APPLICATION
        - FIRMWARE
        - UNKNOWN

    Rootkit:
      type: object
      properties:
        rootkitName:
          type: string
        rootkitType:
          $ref: '#/components/schemas/RootkitType'
        message:
          type: string

    RootkitFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/Rootkit'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    Exploit:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
        cveID:
          type: string
        sourceDB:
          type: string
        urls:
          type: array
          items:
            type: string
          nullable: true

    ExploitFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/Exploit'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    InfoType:
      type: string
      enum:
        - SSHKnownHostFingerprint
        - SSHAuthorizedKeyFingerprint
        - SSHPrivateKeyFingerprint
        - SSHDaemonKeyFingerprint
        - UNKNOWN

    InfoFinder:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/InfoType'
        path:
          type: string
          description: "File path containing the info"
        data:
          type: string
          description: "The data found by the scanner in the specific path for a specific type. See example for SSHKnownHostFingerprint info type"
          example: "2048 SHA256:YQuPOM8ld6FOA9HbKCgkCJWHuGt4aTRD7hstjJpRhxc xxxx (RSA)"

    InfoFinderFindingInfo:
      type: object
      allOf:
        - $ref: '#/components/schemas/InfoFinder'
        - type: object
          properties:
            objectType:
              type: string
          required: [objectType]

    FindingSummary:
      type: object
      properties:
        KnownViruses:
          type: integer
        EngineVersion:
          type: string
        ScannedDirectories:
          type: integer
        ScannedFiles:
          type: integer
        InfectedFiles:
          type: integer
        SuspectedFiles:
          type: integer
        DataScanned:
          type: string
        DataRead:
          type: string
        TimeTaken:
          type: string

    ScanFindings:
      type: object
      description: Describes the result of a scan.
      properties:
        count:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/ScanFinding'

    ScanFinding:
      type: object
      allOf:
        - $ref: '#/components/schemas/Metadata'
        - type: object
          required:
            - input
            - findingInfo
          properties:
            id:
              type: string
            scanID:
              type: string
              readOnly: true
            input:
              $ref: '#/components/schemas/ScanInput'
            findingInfo:
              anyOf:
                - $ref: '#/components/schemas/PackageFindingInfo'
                - $ref: '#/components/schemas/VulnerabilityFindingInfo'
                - $ref: '#/components/schemas/MalwareFindingInfo'
                - $ref: '#/components/schemas/SecretFindingInfo'
                - $ref: '#/components/schemas/MisconfigurationFindingInfo'
                - $ref: '#/components/schemas/RootkitFindingInfo'
                - $ref: '#/components/schemas/ExploitFindingInfo'
                - $ref: '#/components/schemas/InfoFinderFindingInfo'
              discriminator:
                propertyName: objectType
                mapping:
                  Package: '#/components/schemas/PackageFindingInfo'
                  Vulnerability: '#/components/schemas/VulnerabilityFindingInfo'
                  Malware: '#/components/schemas/MalwareFindingInfo'
                  Secret: '#/components/schemas/SecretFindingInfo'
                  Misconfiguration: '#/components/schemas/MisconfigurationFindingInfo'
                  Rootkit: '#/components/schemas/RootkitFindingInfo'
                  Exploit: '#/components/schemas/ExploitFindingInfo'
                  InfoFinder: '#/components/schemas/InfoFinderFindingInfo'
            summary:
              $ref: '#/components/schemas/FindingSummary'

    ScanInput:
      type: object
      description: Input data of an object to scan.
      required:
        - type
        - path
      properties:
        type:
          description: The input type (ROOTFS, DIR, IMAGE etc.)
          type: string
          enum:
            - SBOM
            - IMAGE
            - DOCKERARCHIVE
            - OCIARCHIVE
            - OCIDIR
            - DIR
            - ROOTFS
            - FILE
          x-enum-varnames:
            - InputTypeSBOM
            - InputTypeImage
            - InputTypeDockerArchive
            - InputTypeOCIArchive
            - InputTypeOCIDir
            - InputTypeDir
            - InputTypeRootFS
            - InputTypeFile
        path:
          description: The input path (/mnt/snapshot for ex.)
          type: string

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
      description: An object that is returned for a successful API request that returns nothing.

    ScanProgressResponse:
      type: object
      properties:
        message:
          type: string
        jobsDone:
          type: integer
        jobsRemaining:
          type: integer

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
      description: An object that is returned for a failed API request.

  responses:
    UnknownError:
      description: Unknown error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  parameters:
    scanID:
      name: scanID
      in: path
      required: true
      schema:
        type: string

    scanState:
      description: 'scan state, e.g. pending'
      in: query
      name: state
      schema:
        type: string
