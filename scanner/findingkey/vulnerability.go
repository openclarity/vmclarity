// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package findingkey

import (
	"fmt"

	apitypes "github.com/openclarity/vmclarity/api/types"
)

type VulnerabilityKey struct {
	VulnerabilityName string
	PackageName       string
	PackageVersion    string
}

// String returns an unique string representation of the vulnerability finding.
func (k VulnerabilityKey) String() string {
	return fmt.Sprintf("%s.%s.%s", k.VulnerabilityName, k.PackageName, k.PackageVersion)
}

// VulnerabilityString returns an unique string representation of the vulnerability independent of
// where the vulnerability finding was found by the scanner.
func (k VulnerabilityKey) VulnerabilityString() string {
	return k.VulnerabilityName
}

// Filter returns a string that can be used to filter the vulnerability finding in the database.
func (k VulnerabilityKey) Filter() string {
	return fmt.Sprintf(
		"findingInfo/vulnerabilityName eq '%s' and findingInfo/package/name eq '%s' and findingInfo/package/version eq '%s'",
		k.VulnerabilityName, k.PackageName, k.PackageVersion,
	)
}

func GenerateVulnerabilityKey(vuln apitypes.VulnerabilityFindingInfo) VulnerabilityKey {
	return VulnerabilityKey{
		VulnerabilityName: *vuln.VulnerabilityName,
		PackageName:       *vuln.Package.Name,
		PackageVersion:    *vuln.Package.Version,
	}
}
