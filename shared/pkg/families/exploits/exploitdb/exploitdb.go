// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package exploitdb

import (
	"fmt"

	"github.com/openclarity/kubeclarity/shared/pkg/job_manager"
	log "github.com/sirupsen/logrus"

	"github.com/openclarity/vmclarity/shared/pkg/families/exploits/common"
	"github.com/openclarity/vmclarity/shared/pkg/families/exploits/exploitdb/config"
)

const ScannerName = "exploitdb"

type Scanner struct {
	name       string
	logger     *log.Entry
	config     config.Config
}

func New(conf *common.ScannersConfig, logger *log.Entry) job_manager.Job[common.Input, common.Results] {
	return &Scanner{
		name:       ScannerName,
		logger:     logger.Dup().WithField("scanner", ScannerName),
		config:     config.Config{BaseURL: conf.ExploitDB.BaseURL},
	}
}

func (a *Scanner) Run(input common.Input) (common.Results, error) {
	retResults := common.Results{
		ScannerName:  ScannerName,
	}

	cveIDs := a.getCVEIDs(input)
	if cveIDs == nil {
		return retResults, nil
	}

	// get exploits (get request to exploit db)
	exploits, err := a.getExploitsFromCVEIDs(cveIDs)
	if err != nil {
		return retResults, fmt.Errorf("failed to get exploits from cve ids: %w", err)
	}
	retResults.Exploits = exploits

	return retResults, nil
}

func (a *Scanner) getCVEIDs(input common.Input) []string {
	switch common.InputType(input.InputType) {
	case common.InputTypeCSV:
		return stringToArray(input.CSV)
	case common.InputTypeArray:
		return input.Array
	default:
		a.logger.Infof("unknown source type %v, skipping.", input.InputType)
		return nil
	}
}
