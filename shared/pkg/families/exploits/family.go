// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package exploits

import (
	"fmt"
	"strings"

	"github.com/openclarity/kubeclarity/shared/pkg/job_manager"
	"github.com/openclarity/kubeclarity/shared/pkg/utils"
	log "github.com/sirupsen/logrus"
	"golang.org/x/exp/maps"

	"github.com/openclarity/vmclarity/shared/pkg/families/exploits/common"
	"github.com/openclarity/vmclarity/shared/pkg/families/exploits/job"
	"github.com/openclarity/vmclarity/shared/pkg/families/interfaces"
	"github.com/openclarity/vmclarity/shared/pkg/families/results"
	"github.com/openclarity/vmclarity/shared/pkg/families/types"
	"github.com/openclarity/vmclarity/shared/pkg/families/vulnerabilities"
)

type Exploits struct {
	conf   Config
	logger *log.Entry
}

func (e Exploits) Run(res *results.Results) (interfaces.IsResults, error) {
	e.logger.Info("Exploits Run...")

	manager := job_manager.New(e.conf.ScannersList, e.conf.ScannersConfig, e.logger, job.Factory)
	mergedResults := NewMergedExploits()

	if e.conf.InputFromVuln {
		e.logger.Infof("Using input from Vulnerabilities results")

		vulnResults, err := results.GetResult[*vulnerabilities.Results](res)
		if err != nil {
			return nil, fmt.Errorf("failed to get vulnerabilities results: %v", err)
		}

		cveIDs := getCVEIDsFromVulnerabilitiesResults(vulnResults)

		e.conf.Inputs = append(e.conf.Inputs, Input{
			Array:     cveIDs,
			InputType: common.InputTypeArray,
		})
	}

	for i, input := range e.conf.Inputs {
		if !validInputType(input.InputType) {
			return nil, fmt.Errorf("failed to scan input %d, invalid input type %v", i, input.InputType)
		}

		managerResults, err := manager.Run(input)
		if err != nil {
			return nil, fmt.Errorf("failed to scan input %q for exploits: %v", input.Input, err)
		}

		// Merge results.
		for name, result := range managerResults {
			e.logger.Infof("Merging result from %q", name)
			mergedResults = mergedResults.Merge(result)
		}
	}
	e.logger.Info("Exploits Done...")

	return &Results{
		Exploits: mergedResults,
	}, nil
}

// create a cveIDs array, as an input for the exploits scanners.
func getCVEIDsFromVulnerabilitiesResults(vulnResults *vulnerabilities.Results) []string {
	if vulnResults == nil || vulnResults.MergedResults == nil {
		return nil
	}

	cvesMap := make(map[string]bool)

	for _, mergedVulnerabilities := range vulnResults.MergedResults.MergedVulnerabilitiesByKey {
		for _, vulnerability := range mergedVulnerabilities {
			cvesMap[vulnerability.Vulnerability.ID] = true
		}
	}

	return maps.Keys(cvesMap)
}

func (e Exploits) GetType() types.FamilyType {
	return types.Exploits
}

// ensure types implement the requisite interfaces.
var _ interfaces.Family = &Exploits{}

func New(logger *log.Entry, conf Config) *Exploits {
	return &Exploits{
		conf:   conf,
		logger: logger.Dup().WithField("family", "exploits"),
	}
}
