package clam

import (
	"fmt"
	"github.com/openclarity/kubeclarity/shared/pkg/job_manager"
	"github.com/openclarity/kubeclarity/shared/pkg/utils"
	"github.com/openclarity/vmclarity/api/models"
	"github.com/openclarity/vmclarity/shared/pkg/families/malware/clam/config"
	"github.com/openclarity/vmclarity/shared/pkg/families/malware/clam/util"
	"github.com/openclarity/vmclarity/shared/pkg/families/malware/common"
	sharedutils "github.com/openclarity/vmclarity/shared/pkg/utils"
	log "github.com/sirupsen/logrus"
	"os/exec"
)

const ScannerName = "clam"

type Scanner struct {
	name       string
	logger     *log.Entry
	config     config.Config
	resultChan chan job_manager.Result
}

func (s *Scanner) Run(sourceType utils.SourceType, userInput string) error {
	go func() {
		retResults := common.Results{
			Source:      userInput,
			ScannerName: ScannerName,
		}

		if !s.isValidInputType(sourceType) {
			retResults.Error = fmt.Errorf("received invalid input type clam scanner: %v", sourceType)
			s.sendResults(retResults, retResults.Error)
			return
		}

		// Define the ClamAV command to run
		command := "sudo clamscan"
		args := []string{"--infected", "-r", userInput}

		// Execute the ClamAV command
		cmd := exec.Command(command, args...)
		out, err := sharedutils.RunCommand(cmd)
		if err != nil {
			retResults.Error = fmt.Errorf("failed to run clam command: %v", err)
			s.sendResults(retResults, retResults.Error)
			return
		}

		clamOutput := string(out)
		// Log the output of the ClamAV command
		s.logger.Infof("Clam output: %s", clamOutput)

		retResults.Scan = &models.MalwareScan{
			Malware: util.ParseMalwareScanOutput(clamOutput),
		}

		s.sendResults(retResults, nil)
	}()

	return nil
}

func New(c job_manager.IsConfig, logger *log.Entry, resultChan chan job_manager.Result) job_manager.Job {
	return &Scanner{
		name:       ScannerName,
		logger:     logger.Dup().WithField("scanner", ScannerName),
		config:     config.Config{},
		resultChan: resultChan,
	}
}

func (s *Scanner) isValidInputType(sourceType utils.SourceType) bool {
	switch sourceType {
	case utils.DIR:
		return true
	default:
		s.logger.Infof("source type %v is not supported for clam, skipping.", sourceType)
	}
	return false
}

func (s *Scanner) sendResults(results common.Results, err error) {
	if err != nil {
		s.logger.Error(err)
		results.Error = err
	}
	select {
	case s.resultChan <- &results:
	default:
		s.logger.Error("Failed to send results on channel")
	}
}
