// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/ui_backend/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of findings impact for the dashboard.
	// (GET /dashboard/findingsImpact)
	GetDashboardFindingsImpact(ctx echo.Context) error
	// Get a list of finding trends for all finding types.
	// (GET /dashboard/findingsTrends)
	GetDashboardFindingsTrends(ctx echo.Context, params GetDashboardFindingsTrendsParams) error
	// Get a list of riskiest assets for the dashboard.
	// (GET /dashboard/riskiestAssets)
	GetDashboardRiskiestAssets(ctx echo.Context) error
	// Get a list of riskiest regions for the dashboard.
	// (GET /dashboard/riskiestRegions)
	GetDashboardRiskiestRegions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDashboardFindingsImpact converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsImpact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsImpact(ctx)
	return err
}

// GetDashboardFindingsTrends converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsTrends(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardFindingsTrendsParams
	// ------------- Required query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Required query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsTrends(ctx, params)
	return err
}

// GetDashboardRiskiestAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestAssets(ctx)
	return err
}

// GetDashboardRiskiestRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestRegions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dashboard/findingsImpact", wrapper.GetDashboardFindingsImpact)
	router.GET(baseURL+"/dashboard/findingsTrends", wrapper.GetDashboardFindingsTrends)
	router.GET(baseURL+"/dashboard/riskiestAssets", wrapper.GetDashboardRiskiestAssets)
	router.GET(baseURL+"/dashboard/riskiestRegions", wrapper.GetDashboardRiskiestRegions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
