// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/ui_backend/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a findings trends.
	// (GET /dashboard/findingsTrends)
	GetDashboardFindingsTrends(ctx echo.Context, params GetDashboardFindingsTrendsParams) error
	// Get a list of riskiest assets for the dashboard.
	// (GET /dashboard/riskiestAssets)
	GetDashboardRiskiestAssets(ctx echo.Context) error
	// Get a list of riskiest regions for the dashboard.
	// (GET /dashboard/riskiestRegions)
	GetDashboardRiskiestRegions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDashboardFindingsTrends converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsTrends(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardFindingsTrendsParams
	// ------------- Required query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Required query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsTrends(ctx, params)
	return err
}

// GetDashboardRiskiestAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestAssets(ctx)
	return err
}

// GetDashboardRiskiestRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestRegions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dashboard/findingsTrends", wrapper.GetDashboardFindingsTrends)
	router.GET(baseURL+"/dashboard/riskiestAssets", wrapper.GetDashboardRiskiestAssets)
	router.GET(baseURL+"/dashboard/riskiestRegions", wrapper.GetDashboardRiskiestRegions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RYTXPbNhP+Kxi875GVnHR60Y1V5ZQTx/LItNNOxgeIXFGIQYBZgFY0Hv33DkDSovhh",
	"UW6U3iRgP559drFY8JlGKs2UBGk0nTzTjCFLwQC6fyDjkKdgf3JJJ/RbDrilHpXMLr5sexThW84RYjox",
	"mINHdbSGlFm9lcKUGTqhMTPwiynEzTaz+toglwnd7TwK31maCbjkwgD2+iuEaN1+25Q2DM1rsPcC/xr4",
	"zlrQmZIaHGF38lGqjZwhKhdFpKQBaexPlmWCR8xwJcdftZJ2be/t/wgrOqH/G+/TMS529djP+KJ0UriM",
	"QUfIM2uKTiqfBJxTx0ChaO3WdSfPDU1fErX8CpEhZs0M4ZogmBwlxIRLwoQgEdOgiVqRFeMiR9Aj6tEM",
	"VQZoeBFyClqzxFlHYPFcim1FZjs35Urhle486msNJpAr5YrvwLBQBVsdWa5S2bFRLBwh1DoNrWA/prC0",
	"AzJP6eQL9T/fktn0PQmkNkxGQB+8tvNLLmMukxBBxm26/1Qi1sSsgRhlmCAyT5eAjt1CTxNmCCMJfwJJ",
	"bMW12Y5UXpRT6ZtLAwmgi7ws+YEnrhV2Hbx+E/oMsPpDrPnj4ZTS4YCkXdZELfwemD4i21pUp/BMVgqd",
	"gs4g4isekRowi5obSPVQhC77rjN0HgdmEb6egkbt3fjTj/6HGfXo/d3V9Wzh/x5cBeHf1KOf/KvP/sLu",
	"3M6mi1lol4Lb6fz6Mvhwt/DDYH5NPbqYz8OPgd2c/XVzNQ/C14pXT6sSOyS24NLVn6USWLQ+SHYrt/A9",
	"E4oX10q7WlMmNgyhZ5PrSMkVT3J0LaDHBiplHns9aIgQ+jafciEB2ZILXuFtCr2SIB3+0Oprnps3VZw+",
	"XnIeXUDClayiaOMPHeQXoPZYMIJOqe/s7utlANJS2CG1Rq+723gX9QuuHzlo47qzbl8X9XJrBpWR3wiW",
	"+oQ5A0QrNBCT5ZZUmkVxD+Xe4tk6MEOIr5X7aeBKxbNi6zptJ6Jsmjgn3vqxPw1mpXlOdLW2cxq4UvGc",
	"2Dq63mkYmwYGoryvqW1PgfxaIyh6WUcnwP3GYXRXXLu7qxQgG27WrlO/NDw3B2+Y7Xy5jImSdjsdkUVd",
	"Q6q9woYLQaQyZAkEIXNEDW7fjW78ZjZKNnu6eccF5Pq6LNLb6uusPpIfHaOd4M7rH0y7QPfVw9EI6vW3",
	"PW88yA2PmLg/rPhp//y95sl6uLRQm+HCKcQ8T4fLS0gET/hSwFCddpbsEi9ZM9wIu3f/aSoYWurvAuLf",
	"BLYBPAHqIlnvRhejC+teZSBZxumE/jq6GL2zGWFm7ZIxjpleLxXDeLxqzVJJUQI2ee4WCWI6oR/A/FHp",
	"NMYv7+BzxZfu7O5FxvuH/847Klx93Ng9NN747y8uftjTvhFQx+v+No8i0K45xLBiuegdtV5Ajg++QrgP",
	"AnmaMtwWbBJW63fO78gJ1VKDrVnraGoa49kZOWt4+lmcieryaFyO1dPxhb1eNmsX1mA6K52fwGfl6j8j",
	"tLqWOxl1kxU+VSc9R0EndJzzsW00u4fdPwEAAP//PdnDiskUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
