// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/ui_backend/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of findings impact for the dashboard.
	// (GET /dashboard/findingsImpact)
	GetDashboardFindingsImpact(ctx echo.Context) error
	// Get a list of finding trends for all finding types.
	// (GET /dashboard/findingsTrends)
	GetDashboardFindingsTrends(ctx echo.Context, params GetDashboardFindingsTrendsParams) error
	// Get a list of riskiest assets for the dashboard.
	// (GET /dashboard/riskiestAssets)
	GetDashboardRiskiestAssets(ctx echo.Context) error
	// Get a list of riskiest regions for the dashboard.
	// (GET /dashboard/riskiestRegions)
	GetDashboardRiskiestRegions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDashboardFindingsImpact converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsImpact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsImpact(ctx)
	return err
}

// GetDashboardFindingsTrends converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsTrends(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardFindingsTrendsParams
	// ------------- Required query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Required query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsTrends(ctx, params)
	return err
}

// GetDashboardRiskiestAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestAssets(ctx)
	return err
}

// GetDashboardRiskiestRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestRegions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dashboard/findingsImpact", wrapper.GetDashboardFindingsImpact)
	router.GET(baseURL+"/dashboard/findingsTrends", wrapper.GetDashboardFindingsTrends)
	router.GET(baseURL+"/dashboard/riskiestAssets", wrapper.GetDashboardRiskiestAssets)
	router.GET(baseURL+"/dashboard/riskiestRegions", wrapper.GetDashboardRiskiestRegions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
