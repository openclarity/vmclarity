// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/ui_backend/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of finding trends for all finding types.
	// (GET /dashboard/findingsTrends)
	GetDashboardFindingsTrends(ctx echo.Context, params GetDashboardFindingsTrendsParams) error
	// Get a list of riskiest assets for the dashboard.
	// (GET /dashboard/riskiestAssets)
	GetDashboardRiskiestAssets(ctx echo.Context) error
	// Get a list of riskiest regions for the dashboard.
	// (GET /dashboard/riskiestRegions)
	GetDashboardRiskiestRegions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDashboardFindingsTrends converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsTrends(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardFindingsTrendsParams
	// ------------- Required query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Required query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsTrends(ctx, params)
	return err
}

// GetDashboardRiskiestAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestAssets(ctx)
	return err
}

// GetDashboardRiskiestRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestRegions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dashboard/findingsTrends", wrapper.GetDashboardFindingsTrends)
	router.GET(baseURL+"/dashboard/riskiestAssets", wrapper.GetDashboardRiskiestAssets)
	router.GET(baseURL+"/dashboard/riskiestRegions", wrapper.GetDashboardRiskiestRegions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RYTW/jNhD9KwTbQwuodnaLXnRTXScQNhsHjpNtsciBlsY2NxSpHVLxGoH/e0FKsmV9",
	"2HJbb2+JOB+Pb4aPQ7/RSCWpkiCNpv4bTRmyBAyg+w9kPOMJ2D+5pD79mgFuqEclsx93yx5F+JpxhJj6",
	"BjPwqI5WkDDrt1CYMEN9GjMDv5jc3GxS668Ncrmk261H4RtLUgHXXBjAzny5Ea3Gb4bShqE5Bntv8K+B",
	"b20EnSqpwRH2KF+kWssxonK7iJQ0II39k6Wp4BEzXMnhF62k/bbP9iPCgvr0h+G+HMN8VQ+DlE+LJHnK",
	"GHSEPLWhqF/mJOCSOgZyRxu36uu/1TwDSdT8C0SGmBUzhGuCYDKUEBMuCROCREyDJmpBFoyLDEEPqEdT",
	"VCmg4fmWE9CaLV10BBZPpNiUZDZrU3zJs9KtRwOtwYRyoVzzHQQWKmerpcplKVsW8g8nCLVJZ9awG9Os",
	"iAMyS6j/mQafHsh49J6EUhsmI6DPXjP5NZcxl8sZgoybdE8hRdAWCTErIEYZJojMkjmgozh31pZ7t84T",
	"IFooQ36ag1kDSLLrXMJkTIrj93OzJpHK8qYrEHJpYAloIVaOdJ8Orx2nnqe5QWmVGN1k5pZrYyk4SksK",
	"WOFkodCZ6xQivuBRaWfr1iSksniqOa4rpnYrO8jcQKL7ersOcOrQeiQYItscp6rWf/fB6ENwM6YefXq8",
	"vRtPg9/D23D2F/Xox+D2UzC1Kw/j0XQ8s5/Ch9Hk7jq8eZwGs3ByRz06nUxmH0K7OP7z/nYSzo41sB6V",
	"DXRYp7w2rrtsaYBFq5J34mLVeYdvqVA8v1qavZgwsWYIHYtcR0ou+DJDJwMdMVAp89KZQUOE0LX4mgkJ",
	"yOZc8BJv3ehIgfSpZt4R4+xcw1pJrfLl5PTsvtKnG8ujU1hyJUusTZQzV8rd4XLoCDqnrtOz74oeSAtj",
	"h9QGvWsX7DaCp1y/cNDG6bBuXgzVpqpvKiW/ESz8CXMBiFZoICbzDSk98xbuy73Fs3Fg+hBfaerzwBWO",
	"F8XWdqbORFkPcUm81cN9HszS85LoKuJyHrjC8ZLYWrTtPIz1AD1RPlXcNudAPiYEuZa1KAHuF9o1uDAg",
	"a25WblzYCZ6beNfMKl8mY6LczJUMyLTqIdXeYc2FIFIZMgeCkDqiest3TY3/MRsFmx1q3jI0OV2XeXkb",
	"us6qw/fJgdkZbr3u4bINdFc/nNxBtf82l90PcsMjJp4OO37UPUOv+HLV31qodX/jBGKeJf3tJSwFX/K5",
	"gL4+zSrZT7xgzXAj7NrTx5FgaKl/DElwH1oBeAXUebHeDa4GVza9SkGylFOf/jq4GryzFWFm5YoxjJle",
	"zRXDeLhoTEzLvAVs8dwtEsbUpzdg/ih9akOWd/DDxOf26u5NhvtHy9Y7aVw+ibbPtdf8+6ur/+wRX9tQ",
	"yzv+IYsi0E4cYliwTHSOWjuQw4PfG9zTP0sShpucTcKIOGsYtREqdcPGIHaybrXZ7YKE1jJ9b0LrN2f5",
	"Ht2x18lm5TbrTWfp8x34LFP9b4SWd3Yro27swtdSBjIU1KfDjA+tCm2ft38HAAD//7q1H/zQFAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
