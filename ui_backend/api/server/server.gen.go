// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a findings trends.
	// (GET /dashboard/findingsTrends)
	GetDashboardFindingsTrends(ctx echo.Context, params GetDashboardFindingsTrendsParams) error
	// Get a list of riskiest assets for the dashboard.
	// (GET /dashboard/riskiestAssets)
	GetDashboardRiskiestAssets(ctx echo.Context) error
	// Get a list of riskiest regions for the dashboard.
	// (GET /dashboard/riskiestRegions)
	GetDashboardRiskiestRegions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDashboardFindingsTrends converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsTrends(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardFindingsTrendsParams
	// ------------- Required query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Required query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsTrends(ctx, params)
	return err
}

// GetDashboardRiskiestAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestAssets(ctx)
	return err
}

// GetDashboardRiskiestRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestRegions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dashboard/findingsTrends", wrapper.GetDashboardFindingsTrends)
	router.GET(baseURL+"/dashboard/riskiestAssets", wrapper.GetDashboardRiskiestAssets)
	router.GET(baseURL+"/dashboard/riskiestRegions", wrapper.GetDashboardRiskiestRegions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RYzXLbNhB+FQzaIys56fSiG6vKKSeO5ZFpp52MDxC5ohCDALMArWg8evcOQNKi+GNR",
	"bpXeJGB/vv12sVjwmUYqzZQEaTSdPNOMIUvBALp/IOOQp2B/ckkn9FsOuKUelcwuvmx7FOFbzhFiOjGY",
	"g0d1tIaUWb2VwpQZOqExM/CLKcTNNrP62iCXCd3tPArfWZoJuOTCAPb6K4Ro3X7blDYMzWuw9wL/GvjO",
	"WtCZkhocYXfyUaqNnCEqF0WkpAFp7E+WZYJHzHAlx1+1knZt7+1nhBWd0J/G+3SMi1099jO+KJ0ULmPQ",
	"EfLMmqKTyicB59QxUChau3XdyXND05dELb9CZIhZM0O4JggmRwkx4ZIwIUjENGiiVmTFuMgR9Ih6NEOV",
	"ARpehJyC1ixx1hFYPJdiW5HZzk25UnilO4/6WoMJ5Eq54jswLFTBVkeWq1R2bBQLRwi1TkMr2I8pLO2A",
	"zFM6+UL9z7dkNn1PAqkNkxHQB6/t/JLLmMskRJBxm+4/lYg1MWsgRhkmiMzTJaBjt9DThBnCSMKfQBJb",
	"cW22I5UX5VT65tJAAugiL0t+4IlrhV0Hr9+EPgOs/hBr/ng4pXQ4IGmXNVELv5tjH5FtLahTaCYrhU5B",
	"ZxDxFY9IDZcFzQ2keihAB8w1hs7TwCzC1zPQKL0bf/rR/zCjHr2/u7qeLfzfg6sg/Jt69JN/9dlf2J3b",
	"2XQxC+1ScDudX18GH+4WfhjMr6lHF/N5+DGwm7O/bq7mQfha7eppVWGHxBZcuvKzVAKL1ge5bqUWvmdC",
	"8eJWaRdrysSGIfRsch0pueJJjq4D9NhApcxjrwcNEULf5lMuJCBbcsErvE2hVxKk+87I26qveWzeVHH6",
	"eMl5dAEJV7KKoo0/dJBfgNpjwQg6pb6ju6+XAUhLYYfUGr3u7uJd1C+4fuSgjWvOun1b1MutGVRGfiNY",
	"6hPmDBCt0EBMlltSaRbFPZR7i2frwAwhvlbup4ErFc+Kreu0nYiyaeKceOvH/jSYleY50dXazmngSsVz",
	"YuvoeqdhbBoYiPK+prY9BfJrjaDoZR2dAPcbh9Fdce3urlKAbLhZu0790vDcGLxhtvPlMiZK2u10RBZ1",
	"Dan2ChsuBJHKkCUQhMwRNbh9N7rxm9ko2ezp5h0XkOvrskhvq6+z+kR+dIp2gjuvfy7tAt1XD0cjqNff",
	"9rzxIDc8YuL+sOKn/eP3mifr4dJCbYYLpxDzPB0uLyERPOFLAUN12lmyS7xkzXAj7N79p6lgaKm/C4h/",
	"E9gG8ASoi2S9G12MLqx7lYFkGacT+uvoYvTOZoSZtUvGOGZ6vVQM4/GqNUslRQnY5LlbJIjphH4A80el",
	"0xi/vIOvFV+6s7sXGe/f/TvvqHD1bWP30Hjiv7+4+M9e9o2AOh73t3kUgXbNIYYVy0XvqPUCcnzwEcJ9",
	"D8jTlOG2YJOwWr9zfkdOqJYabM1aR1PTGM/OyFnD04/iTFSXR+NyrJ6OL+z1slm7sAbTWen8AD4rV/8b",
	"odW13Mmom6zwqTrpOQo6oeOcj22j2T3s/gkAAP//udatacgUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
