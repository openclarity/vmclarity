// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of riskiest assets for the dashboard.
	// (GET /dashboard/riskiestAssets)
	GetDashboardRiskiestAssets(ctx echo.Context) error
	// Get a list of riskiest regions for the dashboard.
	// (GET /dashboard/riskiestRegions)
	GetDashboardRiskiestRegions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDashboardRiskiestAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestAssets(ctx)
	return err
}

// GetDashboardRiskiestRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestRegions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dashboard/riskiestAssets", wrapper.GetDashboardRiskiestAssets)
	router.GET(baseURL+"/dashboard/riskiestRegions", wrapper.GetDashboardRiskiestRegions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXT4/bthP9KgR/v6NgOyl60c3YJoWB/sNmsz0EOdDSSJosNVSH1DrCwt+9ICWtJVnO",
	"ykU3vdkazsybN8NH8kkmpqwMATkr4ydZKVYlOODwD76qstLwHrUD9h+QZCz/qoEbGUlSJci4XyQjaZMC",
	"SuXXuabyJusYKZfH4zGSDLYyZCEE/kgPZA70jtmEuIkhB+T8T1VVGhPl0ND6izXkv50C/58hk7H83/oE",
	"e91a7Xpb4W2XpE2Zgk0YKx9Kxn1OASGpt3eOPu7QN36aeG5JmP0XSJxwhXICrWBwNROkAkkorUWiLFhh",
	"MpEp1DWDXclIVmwqYIdtySVYq/IQnUGlv5NuZOy4huiMrecvbVZ5jOTWWnA7ykxo0iiwNi1bM7z3PZox",
	"tB9eINQnvfMLL2O66+IA1aWMP8ntnx/Eu5u3YkfWKUpAfo7Ok79HSpFye2Pqtuljvp1xSovEGz2noJJC",
	"ZK2LCLGm3MLXShtsJ7hLhuQgB/bZSqUPiuGCEW1iKMO85sDihRhsjHu4mMFCwnDJ+FhrAlZ71NjjnS6a",
	"Y/cWcjTUM3VO0l0gqaPFisywUIKD0xk/2ZTvb3V93Jywc33Q3+YnaRY62gcE68KA2POJHbZrWlQlfhTc",
	"+QsVAghr2EEq9o3oPdvhkJFEB6V9qSKPpwlg2nJmd59iVs1kXK4D1zm+Kra5ab0S5TTEa+IdbpvrYPae",
	"r4lusG2vA9c5via2GdW4DuM0wEKU9wO35hrI3xKCVstmlIBPhnF1v6AN2t8tEAd0hXAFnAQvHMUH5ZWv",
	"plQY8uZyJW6HHmRODgfUWpBxYg+CoQpErRY3b6zG/5iNjs0Lak51uQcO94iRrlPb3jNdV8NbwYsneVh4",
	"jGTSnwJLjqHRPDyfH2MYCaPDROn78cjdXMoTyQLzYvlqbQ7LF5eQYl0uX0+Qa8xxr2Gpz4s0XdPo4TZt",
	"vk/bF2//7gZwXq//hF1+h0572/2vN1qxL+LjTmz/2HnFeQS2bdlvVpvVxqMwFZCqUMbyh9Vm9cbXplwR",
	"ylqnyhZ7ozhd89kNIm/J9DSEY2uXylj+DO6n3mdy6Zg8ON5uNv/aO2OSaeap8aFOErBBJlLIVK0v8v4M",
	"cj16EoXXSV2Wipu2TKGE7iVxIvl+VLwyPrO3Cu4zbA5keDGdvc934LNP9Z8R2h82s4yG+wI/hpfxpydZ",
	"s5axXNe49tN8/Hz8OwAA///a4D/mSg8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
