// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of riskiest assets for the dashboard.
	// (GET /dashboard/riskiestAssets)
	GetDashboardRiskiestAssets(ctx echo.Context) error
	// Get a list of riskiest regions for the dashboard.
	// (GET /dashboard/riskiestRegions)
	GetDashboardRiskiestRegions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDashboardRiskiestAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestAssets(ctx)
	return err
}

// GetDashboardRiskiestRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestRegions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dashboard/riskiestAssets", wrapper.GetDashboardRiskiestAssets)
	router.GET(baseURL+"/dashboard/riskiestRegions", wrapper.GetDashboardRiskiestRegions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXT4/bthP9KsT8fkfBdlL0opuxTQoD/YfNZnsIcqClkTRZilSH1HqFhb97QUpaS7Ic",
	"K0U3vdkcvpk3b4ZD8RkSU1ZGo3YW4meoJMsSHXL4h0+yrBS+J+WQ/QJpiOGvGrmBCLQsEeJ+E0RgkwJL",
	"6fe5pvIm65h0DsfjMQJGWxltMTj+qB+0Oeh3zCb4TYx2qJ3/KatKUSIdGb3+Yo32ayfH/2fMIIb/rU+0",
	"163VrrcV3XZB2pAp2oSp8q4g7mMKDEG9vQN6v0Ns/DxBbrUw+y+YOOEK6QRZwehq1pgK0kIqJRJp0QqT",
	"iUySqhntCiKo2FTIjtqUS7RW5sE7o0x/16qB2HGN0ZlaLyttVDhGsLUW3U5nJhRp5FiZVq0Z3fsazRja",
	"hSuC+qB3fuNlTnedH9R1CfEn2P75Qby7eSt22jqpE4TP0Xnw96RT0rm9MXVb9LHezjipROKNXlOUSSGy",
	"FiKCr6m2+FQpQ20Hd8FIO8yRfbRSqoNkvGAkmxidUV5zUPGCDzbGPVyMYDFhvGR8rJVGlntS1POdbppT",
	"9xZzMrpX6lykuyBSJ4sVmWEhBQfQmT7ZVO+vVX1cnHByvdPf5jtpljrZB0LrQoPY844dlmuaVCV+FDLg",
	"hDXsMBX7RpTySfSgti8gAnJY2mvJeCpN4NFmMnvwJLNsJp2ymFeHeVVacz26nOAU/ZpUh+dkMcMe9JrE",
	"Bkd0Ma8O85q0ZobDYnpDLH4jy/sBtvkWyl877+3ImjnwfDKMs/uFbBjx3QZxIFcIV+BproUb9yD9gKt1",
	"Koz25nIlbocIbU6AAykltHFij4KxCoqtFhdvPHT/sRqdmouGtm6reza05fDKv3pNh43HCJJ+xC+5Y0Zd",
	"8HI5jGkkTI4Sqe7HnXpzKU4EBeXF8t3KHJZvLjGluly+X2OuKKe9wqWYqzJdL+/kTH+fci8+7N21fp6n",
	"X6IuviOnvO3+1xslmVwjPu7E9o+dhQgekW2b7pvVZrXxLEyFWlYEMfyw2qze+NykK0Ja61TaYm8kp2s+",
	"+yzIWxG9DOFq2qUQw8/ofuoxky+JySvi7Wbzrz0eJpFm3g8f6iRBG4ZCipms1UXdX0iuR++c8OSoy1Jy",
	"06YppFD9AOzC95Pet4qfgy/qrQJ8Rs3B0F0sZ4/5Dnr2of4zQfurZVbR8GHAj+G5++kZalYQw7qmte/m",
	"4+fj3wEAAP//BF/Cvx8PAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
