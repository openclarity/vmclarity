// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/ui_backend/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of findings impact for the dashboard.
	// (GET /dashboard/findingsImpact)
	GetDashboardFindingsImpact(ctx echo.Context) error
	// Get a list of finding trends for all finding types.
	// (GET /dashboard/findingsTrends)
	GetDashboardFindingsTrends(ctx echo.Context, params GetDashboardFindingsTrendsParams) error
	// Get a list of riskiest assets for the dashboard.
	// (GET /dashboard/riskiestAssets)
	GetDashboardRiskiestAssets(ctx echo.Context) error
	// Get a list of riskiest regions for the dashboard.
	// (GET /dashboard/riskiestRegions)
	GetDashboardRiskiestRegions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDashboardFindingsImpact converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsImpact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsImpact(ctx)
	return err
}

// GetDashboardFindingsTrends converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsTrends(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardFindingsTrendsParams
	// ------------- Required query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Required query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsTrends(ctx, params)
	return err
}

// GetDashboardRiskiestAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestAssets(ctx)
	return err
}

// GetDashboardRiskiestRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestRegions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dashboard/findingsImpact", wrapper.GetDashboardFindingsImpact)
	router.GET(baseURL+"/dashboard/findingsTrends", wrapper.GetDashboardFindingsTrends)
	router.GET(baseURL+"/dashboard/riskiestAssets", wrapper.GetDashboardRiskiestAssets)
	router.GET(baseURL+"/dashboard/riskiestRegions", wrapper.GetDashboardRiskiestRegions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RaT3PiOBb/KirtHnarvCEzW3vhRhOSdjUkFCHpnZrqg7AfoIktuSU5DNXFd5+SZGNj",
	"S2B6oPuWoPekn35Pev/kbzjiacYZMCVx/xvOiCApKBDmP2DxnKag/6QM9/HXHMQWB5gR/eN+OMACvuZU",
	"QIz7SuQQYBmtISVab8lFShTu45go+I+y4mqbaX2pBGUrvNsFGP4kaZbAPU0UCO96VgjX529PJRUR6hjs",
	"SuBvA9/pGWTGmQRD2At7Y3zDRkJws4uIMwVM6T9JliU0Iopy1vtDcqZ/q1b7p4Al7uN/9Cpz9Oyo7A0y",
	"OisWsUvGICNBMz0V7pdrIjCLGgasop63rtv/1tAcMMQXf0CkkFoThahEAlQuGMSIMkSSBEVEgkR8iZaE",
	"JrkAeYMDnAmegVDUbjkFKcnKzC6AxE8s2ZZktm1T/GJXxbsAD6QEFbIlN4fvYOKEW7YcVi5N6RiwP5wg",
	"VC8614J+TPNiHmB5ivu/48HnZzQa/opCJhVhEeAvQXvx0Z9Zwqlq7yV6h/DOiffAIudsVPJcRHD3wc0C",
	"VYlbLReJQUQVpNK9Yp4kZKHVD6xIhCBbN2HFtu8piylbhWlGIgcHZLmESEFs6JVDntt74Tk0lClYgcDG",
	"N+xZPWbVknwnxALbXACL2xdhBpkAqWdDag1IcUUSxPJ0AcIcfqss9a0w4zQFJBOu0L8WoDYADO19CiIs",
	"RoVj/Hf7tkTlth3brJxtF9/TcHQd/exRYmSbmTGVSlNwlJYMRI2TJRdGXGYQ0SWNSjl9o9qE1AZPGfi+",
	"Jqq3soe8P8tdtM0JMH7bee6OHPP7Q6ilZ5gOhp8GDyMc4NeX8eNoNvgQjsP5bzjAk8H482CmR55Hw9lo",
	"rn8Kn4dPj/fhw8tsMA+fHnGAZ09P80+hHhz9fzp+CudO11IsXt2bQztZ25jTpU0DJFqXvCMzV5P34lJJ",
	"91lMSbIhAjyDVEacLekqF8ZBe+YQnKs37woSIgG+wfc8YSDIgia0xNsUOmIg6fNA9T0f0jfnGfofKsar",
	"gy25UBCjxRZRMyXEiBjvZZnGQbej5/SPJ4/ggRVccIvhi8Od2HnPh+s6F07gDcHL76CxwNlbyUj0Rlbg",
	"3UExfnHgUzvv2Xjrd82Ftxi/ON6ZnfdsvLXb74Jrhy+O9tlMezZYhzdyga6LbS+O/bU++5lbOOYrTwX+",
	"fRAxcia468KgHltMUXB2DJZdqJ9UHrBRddiBR192XIx3SSsmNVFz9dW6TceUqHWZBy1pArZi0uUdoUyW",
	"rrhbyuX0r5dLl2tRo8O2j0Is6WvR23SwDgNVZWFLW0AKMfUXdzIijEE8LSzhGRde40t4B0HV9tww8Vzq",
	"aUpAqiFRsOJi6y6xQKq7E8WblnHWfU7OjwatC54Ph+3OYakb+ueaDcpMuSnzka7We7n2FBOIaZ4eERjz",
	"zX7UlTMX0bTNnbeoznKROAfeQUi3lV1kOMP45SyYVfvqkEy4Ic5gVZ0xZ0zTBcU+ihm/j4RR8tVw1RY6",
	"xIBC2HgDPannMjuhU/lGQSrL2/lpvij0yzhcRehS88wkiMq3rQFzgaTeD65M96+JrWsGfwRlc4pr4j2Z",
	"9nphlprXRHciyfWDKxSvia1jTuvH2Jzge9LYcyAfcwTWlzk8gagG3NltIYA2VK2L3K5weCa/2xDt+XIW",
	"I246f+kNmtU1GK8UNjRJEOMKLQAJyAxRnRPjhjf+bjYKNj3e3NG6M36dWfO2/DqpN+dPNtSN4C7wtzid",
	"oO09dJjODnhzvGK8S4I/q4keA3GtcC2qPXaAeRRis/c4GU2eZr/hAH8azR5HYxzgwXQ6Dodlb/E+nE1M",
	"C9KVHtly2BE/WTzkSZ4yb596TJmnN6hro6mzgtKWPKigiuLJVJFrKJyeq8+9pGwFIhPU1fh85Ar6SK2p",
	"RFSa+5cz+jX3N8yPbc0I+DbnMouro3C5gyP3Bjrd1XDjez300i2gV289HELYul7GpPw+JEOtefK9qns1",
	"eDB5vRQ8aOz481QPEW5jWPSOqlkJGp3Pw6TQM5VKpOzj898sYryLtFAviITniB+8F9hYU3u+K4n1ytn2",
	"mG/8JMJrXcL35vntbJgOoM+J2Z7+4jUiuKCKRiRpeI+h/+1yTVfr7tIJ33QXTk0XoLs8g1VCV3SRQFed",
	"k1Zy9TKGs3AeDgc65H4MHz7iAE9Gd+HLBAd4/PQZB/hx9DAOH8IPY1fw1WvSwizFWz1+nQwTopdBLyEa",
	"TEOdU+9vLP7l5vbmViPjGTCSUdzH/725vfkF246lsXYvJnK94ETEvWXrKWxlz5g+HaYwC2Pcxw+g7kqd",
	"xutZ48uWX29vL/ZBS2Mlxzctz3kUgXXvMSxJnnij4B5k7+DbG/MZTJ6mRGztNhFByWFLWxYN+f2D9Z69",
	"G6PuYLNqlndms1AJDr6s+t29l0qkV73t74KTwuWXA7svP8BoZfP+5xjtxDtEw26i1Sk6abdGc+mKhDZW",
	"+tGENkv707dAtMvtznSWOj+Az3Kpn0Zo2VRwMmoSUvFeugHTb8a9nPa0T9992f0VAAD//zOgDEiRKQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
