// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/ui_backend/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of findings impact for the dashboard.
	// (GET /dashboard/findingsImpact)
	GetDashboardFindingsImpact(ctx echo.Context) error
	// Get a list of finding trends for all finding types.
	// (GET /dashboard/findingsTrends)
	GetDashboardFindingsTrends(ctx echo.Context, params GetDashboardFindingsTrendsParams) error
	// Get a list of riskiest assets for the dashboard.
	// (GET /dashboard/riskiestAssets)
	GetDashboardRiskiestAssets(ctx echo.Context) error
	// Get a list of riskiest regions for the dashboard.
	// (GET /dashboard/riskiestRegions)
	GetDashboardRiskiestRegions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDashboardFindingsImpact converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsImpact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsImpact(ctx)
	return err
}

// GetDashboardFindingsTrends converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsTrends(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardFindingsTrendsParams
	// ------------- Required query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Required query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsTrends(ctx, params)
	return err
}

// GetDashboardRiskiestAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestAssets(ctx)
	return err
}

// GetDashboardRiskiestRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestRegions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dashboard/findingsImpact", wrapper.GetDashboardFindingsImpact)
	router.GET(baseURL+"/dashboard/findingsTrends", wrapper.GetDashboardFindingsTrends)
	router.GET(baseURL+"/dashboard/riskiestAssets", wrapper.GetDashboardRiskiestAssets)
	router.GET(baseURL+"/dashboard/riskiestRegions", wrapper.GetDashboardRiskiestRegions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RaX3PiOBL/KirdPfpCdq/uhTeGkIxrIKGAZG5rax6E3YA2tuSR5GS4Kb77lSQbG1sC",
	"Mwszbwnqbv26W+p/8ncc8TTjDJiSuP8dZ0SQFBQI8x+weEFT0H9Shvv4aw5iiwPMiP5xvxxgAV9zKiDG",
	"fSVyCLCMNpASzbfiIiUK93FMFPxLWXK1zTS/VIKyNd7tAgzfSJolcE8TBcK7nyXCdfltUVIRoY7Brgj+",
	"NvCdliAzziQYgz2zV8bf2UgIbrSIOFPAlP6TZFlCI6IoZ72/JGf6t2q3fwpY4T7+R69yR8+uyt4go7Ni",
	"E7tlDDISNNOicL/cE4HZ1FjAMmq5dd7+9wbngCG+/AsihdSGKEQlEqBywSBGlCGSJCgiEiTiK7QiNMkF",
	"yBsc4EzwDISiVuUUpCRrI10AiZ9Ysi2N2fZN8YvdFe8CPJASVMhW3By+A8EJt9ZyeLl0pWPB/nDCoHrT",
	"hSb0Y1oUcoDlKe7/iQef52g0/B2FTCrCIn0YBv/LBdR/eBhO6/+OvikQjCTVb1+CNuDRtyzhVLX1j94g",
	"vHPqeODFc4wjeS4iuPvgthxViZstF4lBRBWk0r1jniRkqdkPPE+EIFu3kQu17ymLKVuHaUYihw3IagWR",
	"gti4RA55bu+S56BRpmANApt4srfqsZNQGt8JscC2EMDi9uWZQSZAamlIbQAprkiCWJ4uQZgLY5klIgoR",
	"JDOI6IpGqIgjDU+XerX1UEUc6xhGj+og20qMqVQa7VENMhAGN5IJV2jFhSHfq1TQ6QvTjg61xVO+uK+R",
	"alX2kPfHrgu3cZYJy84jcuRE3h9CLS/+dDD8NHgY4QC/PI8fR7PBh3AcLv7AAZ4Mxp8HM70yHw1no4X+",
	"KZwPnx7vw4fn2WARPj3iAM+enhafQr04+u90/BQunFGg2Lw64od+sr4x50S7Bki0Ke2OjKym3YvzL92n",
	"KiXJOxHgWaQy4mxF17kw8dcjQ3CuXr07SIgE+Bbf8oSBIEua0BJvk+iIg6QvWNR1PjTfgmfoP6hYrw62",
	"5EJBjJZbRI1IiBExgcZaGgfdjp4zlJ08ggdecMEtli8Od2Llng/XdS6cwBuEl9egscHZqmQkeiVr8GpQ",
	"rF8c+NTKPRtv/a658BbrF8c7s3LPxlu7/S64dvniaOdG7NlgHdHIBbpOtr049pe69DNVOBYrTyX+fRIx",
	"dCa567q/nltMzX92DpZdTD+pImCjqbALj75CtljvUlZMaqTm6qtN2xxTojZlHbSiCdiGSHdvhDJZhuJu",
	"JZczvl6usq1ljQ5qH4VYmq9l3maAdTio6vpa3AJSiKm/d5MRYQziaeEJz7rwOl/CGwiqtuemiXnJp00C",
	"Ug2JgjUXW3c3BFLdneizNI2zRXPa/GjSuuD5cPjuHCt1Qz+v+aCslJs0H+l6s6dri5hATPP0CMGYv+9X",
	"XTVzkU3btvP2v1kuEufCGwjp9rLLGM40fjkPZpVeHYoJN8QZrKsz5sxpuqHYZzET95EwTL4erlKhQw4o",
	"iE000EI9l9kJncpXClJZu51f5ouCv8zDVYYuOc8sgqh83RowFyjq/eDKcv+a2LpW8EdQNkVcE+/JstcL",
	"s+S8JroTRa4fXMF4TWwda1o/xqaAHyljz4F8LBDYWOaIBKJacFe3BQF6p2pT1HZFwDP13TvRkS9nMeJM",
	"L6c3aFbnYLxieKdJghhXaAlIQGYM1bkwbkTjH7ZGYU1PNHeM7kxcZ9a9rbhO6rP3k/NyQ7gL/MNKJ2h7",
	"Dx2uswveGq9Y71Lgz2qkx0BcK12LSscOMI9CbM4eJ6PJ0+wPHOBPo9njaIwDPJhOx+GwnC3eh7OJGUG6",
	"yiPbDjvyJ4uHPMlT5h7OAYvHlHlmg7o3mjo7KO3Jgw6qaJ5MF7mBIuhhB84VZWsQmaCuwecjV9BHakMl",
	"otLcv5zRrzm4BJl3vWOqGQKfci63uCYKlzs4cu+g01MNN76XwyjdAnr10cMhhK3rEUvKH0My1Jwnn5a6",
	"d4MHwuut4MFgx1+negzhdoZF7+ialaDR+XaYFHymU4mUfVv+m02Md5MW6iWRMI/4wXuBzTW1l7bSsF46",
	"Ox7zrZ9EeK1L+NY8v50d0wH0OTnbM1+8RgYXVNGIJI3oMfS/Qm7oetOdOuHv3YlTMwXoTs9gndA1XSbQ",
	"leekl1yzjOEsXITDgU65H8OHjzjAk9Fd+DzBAR4/fcYBfhw9jMOH8MPYlXz1nrRwS/Gsjl8mw4TobdBz",
	"iAbTUNfU+xuLf7u5vbnVyHgGjGQU9/G/b25vfsN2Ymm83YuJ3Cw5EXFv1XoKW9szpk+HaczCGPfxA6i7",
	"kqfxetb4cOX329uLfa/S2Mnxyco8jyKw4T2GFckTbxbcg+wdfFpjvnLJ05SIrVUTEZQcjrRlMZDfP1jv",
	"rXdj2B3WrIblna1ZsAQHH0796dalIulVnyDtgpPE5WdWuy8/wWnl8P7XOO3EO0TDb6I1KTrpt8Zw6YoG",
	"bez0sw3abO1P3wLRbrc7m7Pk+Qn2LLf6ZQYthwpOi5qCVLyVYcDMm3Evpz0d03dfdv8PAAD//2DzYYtw",
	"KQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
