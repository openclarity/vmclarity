// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/provider_service.proto

package provider_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Provider_RunScanningJob_FullMethodName           = "/provider.Provider/RunScanningJob"
	Provider_DiscoverScopes_FullMethodName           = "/provider.Provider/DiscoverScopes"
	Provider_DiscoverInstances_FullMethodName        = "/provider.Provider/DiscoverInstances"
	Provider_GetInstanceRootVolume_FullMethodName    = "/provider.Provider/GetInstanceRootVolume"
	Provider_WaitForInstanceReady_FullMethodName     = "/provider.Provider/WaitForInstanceReady"
	Provider_DeleteInstance_FullMethodName           = "/provider.Provider/DeleteInstance"
	Provider_AttachVolumeToInstance_FullMethodName   = "/provider.Provider/AttachVolumeToInstance"
	Provider_CopySnapshot_FullMethodName             = "/provider.Provider/CopySnapshot"
	Provider_DeleteSnapshot_FullMethodName           = "/provider.Provider/DeleteSnapshot"
	Provider_WaitForSnapshotReady_FullMethodName     = "/provider.Provider/WaitForSnapshotReady"
	Provider_CreateVolumeFromSnapshot_FullMethodName = "/provider.Provider/CreateVolumeFromSnapshot"
	Provider_TakeVolumeSnapshot_FullMethodName       = "/provider.Provider/TakeVolumeSnapshot"
	Provider_WaitForVolumeReady_FullMethodName       = "/provider.Provider/WaitForVolumeReady"
	Provider_WaitForVolumeAttached_FullMethodName    = "/provider.Provider/WaitForVolumeAttached"
	Provider_DeleteVolume_FullMethodName             = "/provider.Provider/DeleteVolume"
)

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderClient interface {
	// general operations
	RunScanningJob(ctx context.Context, in *RunScanningJobParams, opts ...grpc.CallOption) (*RunScanningJobResult, error)
	DiscoverScopes(ctx context.Context, in *DiscoverScopesParams, opts ...grpc.CallOption) (*DiscoverScopesResult, error)
	DiscoverInstances(ctx context.Context, in *DiscoverInstancesParams, opts ...grpc.CallOption) (*DiscoverInstancesResult, error)
	// operation on an instance
	GetInstanceRootVolume(ctx context.Context, in *GetInstanceRootVolumeParams, opts ...grpc.CallOption) (*GetInstanceRootVolumeResult, error)
	WaitForInstanceReady(ctx context.Context, in *WaitForInstanceReadyParams, opts ...grpc.CallOption) (*WaitForInstanceReadyResult, error)
	DeleteInstance(ctx context.Context, in *DeleteInstanceParams, opts ...grpc.CallOption) (*DeleteInstanceResult, error)
	AttachVolumeToInstance(ctx context.Context, in *AttachVolumeToInstanceParams, opts ...grpc.CallOption) (*AttachVolumeToInstanceResult, error)
	// operation on a snapshot
	CopySnapshot(ctx context.Context, in *CopySnapshotParams, opts ...grpc.CallOption) (*CopySnapshotResult, error)
	DeleteSnapshot(ctx context.Context, in *DeleteSnapshotParams, opts ...grpc.CallOption) (*DeleteSnapshotResult, error)
	WaitForSnapshotReady(ctx context.Context, in *WaitForSnapshotReadyParams, opts ...grpc.CallOption) (*WaitForSnapshotReadyResult, error)
	CreateVolumeFromSnapshot(ctx context.Context, in *CreateVolumeFromSnapshotParams, opts ...grpc.CallOption) (*CreateVolumeFromSnapshotResult, error)
	// operation on a volume
	TakeVolumeSnapshot(ctx context.Context, in *TakeVolumeSnapshotParams, opts ...grpc.CallOption) (*TakeVolumeSnapshotResult, error)
	WaitForVolumeReady(ctx context.Context, in *WaitForVolumeReadyParams, opts ...grpc.CallOption) (*WaitForVolumeReadyResult, error)
	WaitForVolumeAttached(ctx context.Context, in *WaitForVolumeAttachedParams, opts ...grpc.CallOption) (*WaitForVolumeAttachedResult, error)
	DeleteVolume(ctx context.Context, in *DeleteVolumeParams, opts ...grpc.CallOption) (*DeleteVolumeResult, error)
}

type providerClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderClient(cc grpc.ClientConnInterface) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) RunScanningJob(ctx context.Context, in *RunScanningJobParams, opts ...grpc.CallOption) (*RunScanningJobResult, error) {
	out := new(RunScanningJobResult)
	err := c.cc.Invoke(ctx, Provider_RunScanningJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DiscoverScopes(ctx context.Context, in *DiscoverScopesParams, opts ...grpc.CallOption) (*DiscoverScopesResult, error) {
	out := new(DiscoverScopesResult)
	err := c.cc.Invoke(ctx, Provider_DiscoverScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DiscoverInstances(ctx context.Context, in *DiscoverInstancesParams, opts ...grpc.CallOption) (*DiscoverInstancesResult, error) {
	out := new(DiscoverInstancesResult)
	err := c.cc.Invoke(ctx, Provider_DiscoverInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetInstanceRootVolume(ctx context.Context, in *GetInstanceRootVolumeParams, opts ...grpc.CallOption) (*GetInstanceRootVolumeResult, error) {
	out := new(GetInstanceRootVolumeResult)
	err := c.cc.Invoke(ctx, Provider_GetInstanceRootVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) WaitForInstanceReady(ctx context.Context, in *WaitForInstanceReadyParams, opts ...grpc.CallOption) (*WaitForInstanceReadyResult, error) {
	out := new(WaitForInstanceReadyResult)
	err := c.cc.Invoke(ctx, Provider_WaitForInstanceReady_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DeleteInstance(ctx context.Context, in *DeleteInstanceParams, opts ...grpc.CallOption) (*DeleteInstanceResult, error) {
	out := new(DeleteInstanceResult)
	err := c.cc.Invoke(ctx, Provider_DeleteInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) AttachVolumeToInstance(ctx context.Context, in *AttachVolumeToInstanceParams, opts ...grpc.CallOption) (*AttachVolumeToInstanceResult, error) {
	out := new(AttachVolumeToInstanceResult)
	err := c.cc.Invoke(ctx, Provider_AttachVolumeToInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) CopySnapshot(ctx context.Context, in *CopySnapshotParams, opts ...grpc.CallOption) (*CopySnapshotResult, error) {
	out := new(CopySnapshotResult)
	err := c.cc.Invoke(ctx, Provider_CopySnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DeleteSnapshot(ctx context.Context, in *DeleteSnapshotParams, opts ...grpc.CallOption) (*DeleteSnapshotResult, error) {
	out := new(DeleteSnapshotResult)
	err := c.cc.Invoke(ctx, Provider_DeleteSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) WaitForSnapshotReady(ctx context.Context, in *WaitForSnapshotReadyParams, opts ...grpc.CallOption) (*WaitForSnapshotReadyResult, error) {
	out := new(WaitForSnapshotReadyResult)
	err := c.cc.Invoke(ctx, Provider_WaitForSnapshotReady_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) CreateVolumeFromSnapshot(ctx context.Context, in *CreateVolumeFromSnapshotParams, opts ...grpc.CallOption) (*CreateVolumeFromSnapshotResult, error) {
	out := new(CreateVolumeFromSnapshotResult)
	err := c.cc.Invoke(ctx, Provider_CreateVolumeFromSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) TakeVolumeSnapshot(ctx context.Context, in *TakeVolumeSnapshotParams, opts ...grpc.CallOption) (*TakeVolumeSnapshotResult, error) {
	out := new(TakeVolumeSnapshotResult)
	err := c.cc.Invoke(ctx, Provider_TakeVolumeSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) WaitForVolumeReady(ctx context.Context, in *WaitForVolumeReadyParams, opts ...grpc.CallOption) (*WaitForVolumeReadyResult, error) {
	out := new(WaitForVolumeReadyResult)
	err := c.cc.Invoke(ctx, Provider_WaitForVolumeReady_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) WaitForVolumeAttached(ctx context.Context, in *WaitForVolumeAttachedParams, opts ...grpc.CallOption) (*WaitForVolumeAttachedResult, error) {
	out := new(WaitForVolumeAttachedResult)
	err := c.cc.Invoke(ctx, Provider_WaitForVolumeAttached_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DeleteVolume(ctx context.Context, in *DeleteVolumeParams, opts ...grpc.CallOption) (*DeleteVolumeResult, error) {
	out := new(DeleteVolumeResult)
	err := c.cc.Invoke(ctx, Provider_DeleteVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServer is the server API for Provider service.
// All implementations must embed UnimplementedProviderServer
// for forward compatibility
type ProviderServer interface {
	// general operations
	RunScanningJob(context.Context, *RunScanningJobParams) (*RunScanningJobResult, error)
	DiscoverScopes(context.Context, *DiscoverScopesParams) (*DiscoverScopesResult, error)
	DiscoverInstances(context.Context, *DiscoverInstancesParams) (*DiscoverInstancesResult, error)
	// operation on an instance
	GetInstanceRootVolume(context.Context, *GetInstanceRootVolumeParams) (*GetInstanceRootVolumeResult, error)
	WaitForInstanceReady(context.Context, *WaitForInstanceReadyParams) (*WaitForInstanceReadyResult, error)
	DeleteInstance(context.Context, *DeleteInstanceParams) (*DeleteInstanceResult, error)
	AttachVolumeToInstance(context.Context, *AttachVolumeToInstanceParams) (*AttachVolumeToInstanceResult, error)
	// operation on a snapshot
	CopySnapshot(context.Context, *CopySnapshotParams) (*CopySnapshotResult, error)
	DeleteSnapshot(context.Context, *DeleteSnapshotParams) (*DeleteSnapshotResult, error)
	WaitForSnapshotReady(context.Context, *WaitForSnapshotReadyParams) (*WaitForSnapshotReadyResult, error)
	CreateVolumeFromSnapshot(context.Context, *CreateVolumeFromSnapshotParams) (*CreateVolumeFromSnapshotResult, error)
	// operation on a volume
	TakeVolumeSnapshot(context.Context, *TakeVolumeSnapshotParams) (*TakeVolumeSnapshotResult, error)
	WaitForVolumeReady(context.Context, *WaitForVolumeReadyParams) (*WaitForVolumeReadyResult, error)
	WaitForVolumeAttached(context.Context, *WaitForVolumeAttachedParams) (*WaitForVolumeAttachedResult, error)
	DeleteVolume(context.Context, *DeleteVolumeParams) (*DeleteVolumeResult, error)
	mustEmbedUnimplementedProviderServer()
}

// UnimplementedProviderServer must be embedded to have forward compatible implementations.
type UnimplementedProviderServer struct {
}

func (UnimplementedProviderServer) RunScanningJob(context.Context, *RunScanningJobParams) (*RunScanningJobResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunScanningJob not implemented")
}
func (UnimplementedProviderServer) DiscoverScopes(context.Context, *DiscoverScopesParams) (*DiscoverScopesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverScopes not implemented")
}
func (UnimplementedProviderServer) DiscoverInstances(context.Context, *DiscoverInstancesParams) (*DiscoverInstancesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverInstances not implemented")
}
func (UnimplementedProviderServer) GetInstanceRootVolume(context.Context, *GetInstanceRootVolumeParams) (*GetInstanceRootVolumeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceRootVolume not implemented")
}
func (UnimplementedProviderServer) WaitForInstanceReady(context.Context, *WaitForInstanceReadyParams) (*WaitForInstanceReadyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForInstanceReady not implemented")
}
func (UnimplementedProviderServer) DeleteInstance(context.Context, *DeleteInstanceParams) (*DeleteInstanceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstance not implemented")
}
func (UnimplementedProviderServer) AttachVolumeToInstance(context.Context, *AttachVolumeToInstanceParams) (*AttachVolumeToInstanceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachVolumeToInstance not implemented")
}
func (UnimplementedProviderServer) CopySnapshot(context.Context, *CopySnapshotParams) (*CopySnapshotResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopySnapshot not implemented")
}
func (UnimplementedProviderServer) DeleteSnapshot(context.Context, *DeleteSnapshotParams) (*DeleteSnapshotResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnapshot not implemented")
}
func (UnimplementedProviderServer) WaitForSnapshotReady(context.Context, *WaitForSnapshotReadyParams) (*WaitForSnapshotReadyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForSnapshotReady not implemented")
}
func (UnimplementedProviderServer) CreateVolumeFromSnapshot(context.Context, *CreateVolumeFromSnapshotParams) (*CreateVolumeFromSnapshotResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolumeFromSnapshot not implemented")
}
func (UnimplementedProviderServer) TakeVolumeSnapshot(context.Context, *TakeVolumeSnapshotParams) (*TakeVolumeSnapshotResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeVolumeSnapshot not implemented")
}
func (UnimplementedProviderServer) WaitForVolumeReady(context.Context, *WaitForVolumeReadyParams) (*WaitForVolumeReadyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForVolumeReady not implemented")
}
func (UnimplementedProviderServer) WaitForVolumeAttached(context.Context, *WaitForVolumeAttachedParams) (*WaitForVolumeAttachedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForVolumeAttached not implemented")
}
func (UnimplementedProviderServer) DeleteVolume(context.Context, *DeleteVolumeParams) (*DeleteVolumeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}
func (UnimplementedProviderServer) mustEmbedUnimplementedProviderServer() {}

// UnsafeProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServer will
// result in compilation errors.
type UnsafeProviderServer interface {
	mustEmbedUnimplementedProviderServer()
}

func RegisterProviderServer(s grpc.ServiceRegistrar, srv ProviderServer) {
	s.RegisterService(&Provider_ServiceDesc, srv)
}

func _Provider_RunScanningJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunScanningJobParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).RunScanningJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_RunScanningJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).RunScanningJob(ctx, req.(*RunScanningJobParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DiscoverScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverScopesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DiscoverScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_DiscoverScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DiscoverScopes(ctx, req.(*DiscoverScopesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DiscoverInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverInstancesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DiscoverInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_DiscoverInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DiscoverInstances(ctx, req.(*DiscoverInstancesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetInstanceRootVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRootVolumeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetInstanceRootVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetInstanceRootVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetInstanceRootVolume(ctx, req.(*GetInstanceRootVolumeParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_WaitForInstanceReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForInstanceReadyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).WaitForInstanceReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_WaitForInstanceReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).WaitForInstanceReady(ctx, req.(*WaitForInstanceReadyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DeleteInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DeleteInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_DeleteInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DeleteInstance(ctx, req.(*DeleteInstanceParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_AttachVolumeToInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachVolumeToInstanceParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).AttachVolumeToInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_AttachVolumeToInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).AttachVolumeToInstance(ctx, req.(*AttachVolumeToInstanceParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_CopySnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopySnapshotParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).CopySnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_CopySnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).CopySnapshot(ctx, req.(*CopySnapshotParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DeleteSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnapshotParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DeleteSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_DeleteSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DeleteSnapshot(ctx, req.(*DeleteSnapshotParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_WaitForSnapshotReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForSnapshotReadyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).WaitForSnapshotReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_WaitForSnapshotReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).WaitForSnapshotReady(ctx, req.(*WaitForSnapshotReadyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_CreateVolumeFromSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeFromSnapshotParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).CreateVolumeFromSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_CreateVolumeFromSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).CreateVolumeFromSnapshot(ctx, req.(*CreateVolumeFromSnapshotParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_TakeVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeVolumeSnapshotParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).TakeVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_TakeVolumeSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).TakeVolumeSnapshot(ctx, req.(*TakeVolumeSnapshotParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_WaitForVolumeReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForVolumeReadyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).WaitForVolumeReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_WaitForVolumeReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).WaitForVolumeReady(ctx, req.(*WaitForVolumeReadyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_WaitForVolumeAttached_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForVolumeAttachedParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).WaitForVolumeAttached(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_WaitForVolumeAttached_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).WaitForVolumeAttached(ctx, req.(*WaitForVolumeAttachedParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_DeleteVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DeleteVolume(ctx, req.(*DeleteVolumeParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Provider_ServiceDesc is the grpc.ServiceDesc for Provider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunScanningJob",
			Handler:    _Provider_RunScanningJob_Handler,
		},
		{
			MethodName: "DiscoverScopes",
			Handler:    _Provider_DiscoverScopes_Handler,
		},
		{
			MethodName: "DiscoverInstances",
			Handler:    _Provider_DiscoverInstances_Handler,
		},
		{
			MethodName: "GetInstanceRootVolume",
			Handler:    _Provider_GetInstanceRootVolume_Handler,
		},
		{
			MethodName: "WaitForInstanceReady",
			Handler:    _Provider_WaitForInstanceReady_Handler,
		},
		{
			MethodName: "DeleteInstance",
			Handler:    _Provider_DeleteInstance_Handler,
		},
		{
			MethodName: "AttachVolumeToInstance",
			Handler:    _Provider_AttachVolumeToInstance_Handler,
		},
		{
			MethodName: "CopySnapshot",
			Handler:    _Provider_CopySnapshot_Handler,
		},
		{
			MethodName: "DeleteSnapshot",
			Handler:    _Provider_DeleteSnapshot_Handler,
		},
		{
			MethodName: "WaitForSnapshotReady",
			Handler:    _Provider_WaitForSnapshotReady_Handler,
		},
		{
			MethodName: "CreateVolumeFromSnapshot",
			Handler:    _Provider_CreateVolumeFromSnapshot_Handler,
		},
		{
			MethodName: "TakeVolumeSnapshot",
			Handler:    _Provider_TakeVolumeSnapshot_Handler,
		},
		{
			MethodName: "WaitForVolumeReady",
			Handler:    _Provider_WaitForVolumeReady_Handler,
		},
		{
			MethodName: "WaitForVolumeAttached",
			Handler:    _Provider_WaitForVolumeAttached_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _Provider_DeleteVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/provider_service.proto",
}
