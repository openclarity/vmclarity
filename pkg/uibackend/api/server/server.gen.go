// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/pkg/uibackend/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of findings impact for the dashboard.
	// (GET /dashboard/findingsImpact)
	GetDashboardFindingsImpact(ctx echo.Context) error
	// Get a list of finding trends for all finding types.
	// (GET /dashboard/findingsTrends)
	GetDashboardFindingsTrends(ctx echo.Context, params GetDashboardFindingsTrendsParams) error
	// Get a list of riskiest assets for the dashboard.
	// (GET /dashboard/riskiestAssets)
	GetDashboardRiskiestAssets(ctx echo.Context) error
	// Get a list of riskiest regions for the dashboard.
	// (GET /dashboard/riskiestRegions)
	GetDashboardRiskiestRegions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDashboardFindingsImpact converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsImpact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsImpact(ctx)
	return err
}

// GetDashboardFindingsTrends converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsTrends(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardFindingsTrendsParams
	// ------------- Required query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Required query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsTrends(ctx, params)
	return err
}

// GetDashboardRiskiestAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestAssets(ctx)
	return err
}

// GetDashboardRiskiestRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestRegions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dashboard/findingsImpact", wrapper.GetDashboardFindingsImpact)
	router.GET(baseURL+"/dashboard/findingsTrends", wrapper.GetDashboardFindingsTrends)
	router.GET(baseURL+"/dashboard/riskiestAssets", wrapper.GetDashboardRiskiestAssets)
	router.GET(baseURL+"/dashboard/riskiestRegions", wrapper.GetDashboardRiskiestRegions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
