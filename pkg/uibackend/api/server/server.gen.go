// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/pkg/uibackend/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of findings impact for the dashboard.
	// (GET /dashboard/findingsImpact)
	GetDashboardFindingsImpact(ctx echo.Context) error
	// Get a list of finding trends for all finding types.
	// (GET /dashboard/findingsTrends)
	GetDashboardFindingsTrends(ctx echo.Context, params GetDashboardFindingsTrendsParams) error
	// Get a list of riskiest assets for the dashboard.
	// (GET /dashboard/riskiestAssets)
	GetDashboardRiskiestAssets(ctx echo.Context) error
	// Get a list of riskiest regions for the dashboard.
	// (GET /dashboard/riskiestRegions)
	GetDashboardRiskiestRegions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDashboardFindingsImpact converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsImpact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDashboardFindingsImpact(ctx)
	return err
}

// GetDashboardFindingsTrends converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsTrends(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardFindingsTrendsParams
	// ------------- Required query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Required query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDashboardFindingsTrends(ctx, params)
	return err
}

// GetDashboardRiskiestAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDashboardRiskiestAssets(ctx)
	return err
}

// GetDashboardRiskiestRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDashboardRiskiestRegions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dashboard/findingsImpact", wrapper.GetDashboardFindingsImpact)
	router.GET(baseURL+"/dashboard/findingsTrends", wrapper.GetDashboardFindingsTrends)
	router.GET(baseURL+"/dashboard/riskiestAssets", wrapper.GetDashboardRiskiestAssets)
	router.GET(baseURL+"/dashboard/riskiestRegions", wrapper.GetDashboardRiskiestRegions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
