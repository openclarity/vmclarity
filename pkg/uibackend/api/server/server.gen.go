// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/openclarity/vmclarity/pkg/uibackend/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of findings impact for the dashboard.
	// (GET /dashboard/findingsImpact)
	GetDashboardFindingsImpact(ctx echo.Context) error
	// Get a list of finding trends for all finding types.
	// (GET /dashboard/findingsTrends)
	GetDashboardFindingsTrends(ctx echo.Context, params GetDashboardFindingsTrendsParams) error
	// Get a list of riskiest assets for the dashboard.
	// (GET /dashboard/riskiestAssets)
	GetDashboardRiskiestAssets(ctx echo.Context) error
	// Get a list of riskiest regions for the dashboard.
	// (GET /dashboard/riskiestRegions)
	GetDashboardRiskiestRegions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDashboardFindingsImpact converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsImpact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsImpact(ctx)
	return err
}

// GetDashboardFindingsTrends converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsTrends(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardFindingsTrendsParams
	// ------------- Required query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Required query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardFindingsTrends(ctx, params)
	return err
}

// GetDashboardRiskiestAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestAssets(ctx)
	return err
}

// GetDashboardRiskiestRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDashboardRiskiestRegions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dashboard/findingsImpact", wrapper.GetDashboardFindingsImpact)
	router.GET(baseURL+"/dashboard/findingsTrends", wrapper.GetDashboardFindingsTrends)
	router.GET(baseURL+"/dashboard/riskiestAssets", wrapper.GetDashboardRiskiestAssets)
	router.GET(baseURL+"/dashboard/riskiestRegions", wrapper.GetDashboardRiskiestRegions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+M5o94gikAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
