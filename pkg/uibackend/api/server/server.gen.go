// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/openclarity/vmclarity/pkg/uibackend/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of findings impact for the dashboard.
	// (GET /dashboard/findingsImpact)
	GetDashboardFindingsImpact(ctx echo.Context) error
	// Get a list of finding trends for all finding types.
	// (GET /dashboard/findingsTrends)
	GetDashboardFindingsTrends(ctx echo.Context, params GetDashboardFindingsTrendsParams) error
	// Get a list of riskiest assets for the dashboard.
	// (GET /dashboard/riskiestAssets)
	GetDashboardRiskiestAssets(ctx echo.Context) error
	// Get a list of riskiest regions for the dashboard.
	// (GET /dashboard/riskiestRegions)
	GetDashboardRiskiestRegions(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDashboardFindingsImpact converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsImpact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDashboardFindingsImpact(ctx)
	return err
}

// GetDashboardFindingsTrends converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardFindingsTrends(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardFindingsTrendsParams
	// ------------- Required query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Required query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDashboardFindingsTrends(ctx, params)
	return err
}

// GetDashboardRiskiestAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDashboardRiskiestAssets(ctx)
	return err
}

// GetDashboardRiskiestRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboardRiskiestRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDashboardRiskiestRegions(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dashboard/findingsImpact", wrapper.GetDashboardFindingsImpact)
	router.GET(baseURL+"/dashboard/findingsTrends", wrapper.GetDashboardFindingsTrends)
	router.GET(baseURL+"/dashboard/riskiestAssets", wrapper.GetDashboardRiskiestAssets)
	router.GET(baseURL+"/dashboard/riskiestRegions", wrapper.GetDashboardRiskiestRegions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ds6CKQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
