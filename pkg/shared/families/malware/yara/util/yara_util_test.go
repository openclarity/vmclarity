package util

import (
	"reflect"
	"testing"

	"github.com/openclarity/vmclarity/pkg/shared/families/malware/common"
)

func Test_extractDetectedMalware(t *testing.T) {
	type args struct {
		words []string
	}
	tests := []struct {
		name string
		args args
		want *common.DetectedMalware
	}{
		{
			name: "words len = 0",
			args: args{
				words: []string{},
			},
			want: nil,
		},
		{
			name: "words are exist",
			args: args{
				words: []string{
					"vmdetect",
					"author=\"nex\",description=\"Possibly employs anti-virtualization techniques\"",
					"/usr/bin/test",
				},
			},
			want: &common.DetectedMalware{
				Path:     "/usr/bin/test",
				RuleName: "vmdetect",
			},
		},
		{
			name: "rule name and type are set in metadata",
			args: args{
				words: []string{
					"vmdetect",
					"author=\"nex\",description=\"Possibly employs anti-virtualization techniques\",name=\"name\",type=\"type\"",
					"/usr/bin/test",
				},
			},
			want: &common.DetectedMalware{
				Path:        "/usr/bin/test",
				RuleName:    "vmdetect",
				MalwareName: "name",
				MalwareType: "type",
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := extractDetectedMalware(tt.args.words); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("extractDetectedMalware() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_parseYaraRuleMetadata(t *testing.T) {
	type args struct {
		metadata string
	}
	tests := []struct {
		name string
		args args
		want map[string]string
	}{
		{
			name: "sanity test",
			args: args{
				metadata: "author=\"_pusher_\",description=\"Looks for big numbers 256:sized\",date=\"2016-08\"",
			},
			want: map[string]string{
				"author":      "_pusher_",
				"description": "Looks for big numbers 256:sized",
				"date":        "2016-08",
			},
		},
		{
			name: "empty metadata ",
			args: args{
				metadata: "[]",
			},
			want: make(map[string]string),
		},
		{
			name: "empty string as metadata",
			args: args{},
			want: make(map[string]string),
		},
		{
			name: "no value defined for a metadata key",
			args: args{
				metadata: "author=\"_pusher_\",description,date=\"2016-08\"",
			},
			want: map[string]string{
				"author": "_pusher_",
				"date":   "2016-08",
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := parseYaraRuleMetadata(tt.args.metadata); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("parseYaraRuleMetadata() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_separateFields(t *testing.T) {
	type args struct {
		line string
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "missing [",
			args: args{
				line: "RijnDael_AES author=\"_pusher_\",description=\"RijnDael AES test\",date=\"2016-06\" /bin/test",
			},
			want: nil,
		},
		{
			name: "metadata without spaces",
			args: args{
				line: "RijnDael_AES [author=\"_pusher_\",description=\"RijnDael_AES_test\",date=\"2016-06\"] /bin/test",
			},
			want: []string{
				"RijnDael_AES",
				"author=\"_pusher_\",description=\"RijnDael_AES_test\",date=\"2016-06\"",
				"/bin/test",
			},
		},
		{
			name: "metadata with spaces",
			args: args{
				line: "RijnDael_AES [author=\"_pusher_\",description=\"RijnDael AES test spaces\",date=\"2016-06\"] /bin/test",
			},
			want: []string{
				"RijnDael_AES",
				"author=\"_pusher_\",description=\"RijnDael AES test spaces\",date=\"2016-06\"",
				"/bin/test",
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := separateFields(tt.args.line); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("separateFields() = %v, want %v", got, tt.want)
			}
		})
	}
}
