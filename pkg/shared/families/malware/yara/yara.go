// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package yara

import (
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"os/exec"

	"github.com/openclarity/kubeclarity/shared/pkg/job_manager"
	"github.com/openclarity/kubeclarity/shared/pkg/utils"
	log "github.com/sirupsen/logrus"

	"github.com/openclarity/vmclarity/pkg/shared/families/malware/common"
	"github.com/openclarity/vmclarity/pkg/shared/families/malware/yara/config"
	"github.com/openclarity/vmclarity/pkg/shared/families/malware/yara/util"
	sharedutils "github.com/openclarity/vmclarity/pkg/shared/utils"
)

const (
	ScannerName = "yara"
)

type Scanner struct {
	name             string
	logger           *log.Entry
	config           config.Config
	resultChan       chan job_manager.Result
	compiledRuleFile string
}

func (s *Scanner) Run(sourceType utils.SourceType, userInput string) error {
	go func() {
		retResults := common.Results{
			Source:      userInput,
			ScannerName: ScannerName,
		}

		if !s.isValidInputType(sourceType) {
			retResults.Error = fmt.Errorf("received invalid input type for YARA scanner: %v", sourceType)
			s.sendResults(retResults, nil)
			return
		}

		s.logger.Debugf("Yara binary path: %s", s.config.BinaryPath)
		s.logger.Debugf("Yara rules URL: %s", s.config.BinaryPath)
		s.logger.Debugf("Yara rules file path: %s", s.compiledRuleFile)

		// Define the yara args to run
		args := []string{"-C", s.compiledRuleFile, "-r", "-w", "-m", userInput}

		s.logger.Infof("Running yara...")
		// Execute the yara command
		// nolint:gosec
		yaraCommand := exec.Command(s.config.BinaryPath, args...)
		out, err := sharedutils.RunCommand(yaraCommand)
		if err != nil {
			s.sendResults(retResults, fmt.Errorf("failed to run yara command: %s", err.Error()))
			return
		}

		detectedMalware := util.ParseYaraScanOutput(string(out), s.logger)
		retResults.Malware = detectedMalware
		// In the case of Yara there is no scan summary.
		retResults.Summary = &common.ScanSummary{}

		s.sendResults(retResults, nil)
	}()

	return nil
}

func getRuleFilePath(compiledRuleURL string, logger *log.Entry) (string, error) {
	parsed, err := url.Parse(compiledRuleURL)
	if err != nil {
		return "", fmt.Errorf("failed to parse Yara rule URL=%s: %w", compiledRuleURL, err)
	}

	switch parsed.Scheme {
	case "file":
		return parsed.Path, nil
	case "http", "https":
		return downloadRules(compiledRuleURL, logger)
	default:
		return "", errors.New("unsupported Yara rules URL")
	}
}

func downloadRules(compiledRuleURL string, logger *log.Entry) (string, error) {
	logger.Infof("Downloading Yara rules...")
	out, err := os.CreateTemp(os.TempDir(), "compiledYaraRules")
	if err != nil {
		return "", fmt.Errorf("failed to create ouptut file=%s: %w", out.Name(), err)
	}

	defer out.Close()

	resp, err := http.Get(compiledRuleURL) // nolint:noctx,gosec
	if err != nil {
		return "", fmt.Errorf("failed to get url: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("failed to get url=%s: %s", compiledRuleURL, resp.Status)
	}

	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to write file=%s: %w", out.Name(), err)
	}
	logger.Infof("compiled rule path: %s", out.Name())

	return out.Name(), nil
}

func New(c job_manager.IsConfig, logger *log.Entry, resultChan chan job_manager.Result) job_manager.Job {
	conf := c.(*common.ScannersConfig) // nolint:forcetypeassert
	// Download compiled yara rule.
	compiledRuleFile, err := getRuleFilePath(conf.Yara.CompiledRuleURL, logger)
	if err != nil {
		logger.Errorf("Failed to get compiled rule file path: %v", err)
	}
	return &Scanner{
		name:             ScannerName,
		logger:           logger.Dup().WithField("scanner", ScannerName),
		config:           conf.Yara,
		resultChan:       resultChan,
		compiledRuleFile: compiledRuleFile,
	}
}

func (s *Scanner) isValidInputType(sourceType utils.SourceType) bool {
	switch sourceType {
	case utils.ROOTFS, utils.DIR:
		return true
	case utils.FILE, utils.IMAGE, utils.SBOM:
		fallthrough
	default:
		s.logger.Infof("source type %v is not supported for yara, skipping.", sourceType)
	}
	return false
}

func (s *Scanner) sendResults(results common.Results, err error) {
	if err != nil {
		s.logger.Error(err)
		results.Error = err
	}
	select {
	case s.resultChan <- &results:
	default:
		s.logger.Error("Failed to send results on channel")
	}
}
