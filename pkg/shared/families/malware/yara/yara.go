// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package yara

import (
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"os/exec"
	"path"
	"strings"

	"github.com/sirupsen/logrus"

	"github.com/openclarity/kubeclarity/shared/pkg/job_manager"
	"github.com/openclarity/kubeclarity/shared/pkg/utils"

	ruleServerConfig "github.com/openclarity/yara-rule-server/pkg/config"
	"github.com/openclarity/yara-rule-server/pkg/rules"

	"github.com/openclarity/vmclarity/pkg/shared/families/malware/common"
	"github.com/openclarity/vmclarity/pkg/shared/families/malware/yara/config"
	"github.com/openclarity/vmclarity/pkg/shared/families/malware/yara/util"
	familiesutils "github.com/openclarity/vmclarity/pkg/shared/families/utils"
	sharedutils "github.com/openclarity/vmclarity/pkg/shared/utils"
)

const (
	ScannerName = "yara"
)

type Scanner struct {
	name             string
	logger           *logrus.Entry
	config           config.Config
	resultChan       chan job_manager.Result
	compiledRuleFile string
}

// nolint: gocognit,cyclop
func (s *Scanner) Run(sourceType utils.SourceType, userInput string) error {
	go func() {
		retResults := common.Results{
			Source:      userInput,
			ScannerName: ScannerName,
		}

		if !s.isValidInputType(sourceType) {
			retResults.Error = fmt.Errorf("received invalid input type for YARA scanner: %v", sourceType)
			s.sendResults(retResults, nil)
			return
		}

		s.logger.Debugf("Yara binary path: %s", s.config.BinaryPath)
		s.logger.Debugf("Yara rules URL: %s", s.config.BinaryPath)
		s.logger.Debugf("Yara rules file path: %s", s.compiledRuleFile)

		fsPath, cleanup, err := familiesutils.ConvertInputToFilesystem(context.TODO(), sourceType, userInput)
		if err != nil {
			s.sendResults(retResults, fmt.Errorf("failed to convert input to filesystem: %w", err))
			return
		}
		defer cleanup()

		// Define the yara args to run
		args := []string{"-C", s.compiledRuleFile, "-r", "-w", "-m", fsPath}
		s.logger.Infof("Running yara...")

		// Process function that parses each line of yara output
		var detectedMalware []common.DetectedMalware
		var parseErrSamples, scanErrSamples []error
		var outputLines, parseErrorCount uint
		parserFunc := func(line string) {
			outputLines++
			malware, err := util.ParseYaraScanOutput(line)
			if err != nil {
				var invalidLineErr *util.InvalidLineError
				if errors.Is(err, invalidLineErr) {
					s.logger.Debugf("Omitting invalid yara output line: %v", err)
				} else {
					s.logger.Errorf("Error parsing yara output line: %v", err)
				}
				if parseErrorCount < util.SampleScanErrorNum {
					parseErrSamples = append(parseErrSamples, err)
				}
				parseErrorCount++
				return
			}
			if malware != nil {
				detectedMalware = append(detectedMalware, *malware)
			}
		}
		var scanErrCount uint
		errCheckFunc := func(line string) {
			s.logger.Debugf("Error occurred during yara scan: %s", line)
			// Count only the scanner errors to avoid count on status messages.
			if strings.Contains(line, util.ScanError) {
				if scanErrCount < util.SampleScanErrorNum {
					scanErrSamples = append(scanErrSamples, errors.New(line))
				}
				scanErrCount++
			}
		}

		// Execute the yara command
		// nolint:gosec
		yaraCommand := exec.Command(s.config.BinaryPath, args...)
		err = sharedutils.RunCommandAndParseOutputLineByLine(yaraCommand, parserFunc, errCheckFunc)
		if err != nil {
			s.sendResults(retResults, fmt.Errorf("failed to run yara command: %w", err))
			return
		}

		// If the stderr lines / stderr lines + stdout lines is greater than the `errThreshold` the error threshold will be reached.
		if util.IsErrorThresholdReached(scanErrCount, outputLines+scanErrCount) {
			s.sendResults(retResults, fmt.Errorf(
				"scanner error threshold (%.2f%%) is reached, nuber of errors=%d, sample of errors: %w",
				util.ErrThreshold*100, // nolint: gomnd
				scanErrCount,
				errors.Join(scanErrSamples...),
			))
			return
		}
		// If the parse failures / lines parsed is greater than the `errThreshold` the error threshold will be reached.
		if util.IsErrorThresholdReached(parseErrorCount, outputLines) {
			s.sendResults(retResults, fmt.Errorf(
				"output parsing error threshold (%.2f%%) is reached, number of errors=%d, sample of errors: %w",
				util.ErrThreshold*100, // nolint: gomnd
				parseErrorCount,
				errors.Join(parseErrSamples...),
			))
			return
		}

		retResults.Malware = detectedMalware
		retResults.Summary = &common.ScanSummary{}

		s.sendResults(retResults, nil)
	}()

	return nil
}

func getCompiledRuleFilePath(cfg config.Config, logger *logrus.Entry) (string, error) {
	// If both compiled rule url and raw rule sources are defined we choose the compiled one.
	if cfg.CompiledRuleURL != "" {
		parsed, err := url.Parse(cfg.CompiledRuleURL)
		if err != nil {
			return "", fmt.Errorf("failed to parse Yara rule URL=%s: %w", cfg.CompiledRuleURL, err)
		}

		switch parsed.Scheme {
		case "file":
			return parsed.Path, nil
		case "http", "https":
			return downloadCompiledRules(cfg.CompiledRuleURL, logger)
		default:
			return "", errors.New("unsupported Yara rules URL")
		}
	} else if len(cfg.RuleSources) != 0 {
		var err error
		cacheDir := cfg.CacheDir
		if cacheDir == "" {
			cacheDir, err = createCacheDir()
			if err != nil {
				return "", fmt.Errorf("failed to create cache directory: %w", err)
			}
		}
		if err = rules.DownloadAndCompile(&ruleServerConfig.Config{
			RuleSources: cfg.RuleSources,
			YaracPath:   cfg.YaracPath,
			CacheDir:    cacheDir,
		}, logger); err != nil {
			return "", fmt.Errorf("failed to download and compile raw rules: %w", err)
		}
		return path.Join(cacheDir, ruleServerConfig.CompiledRuleFileName), nil
	}

	return "", errors.New("neither compiled rule URL nor rule sources are defined")
}

func downloadCompiledRules(compiledRuleURL string, logger *logrus.Entry) (string, error) {
	logger.Infof("Downloading Yara rules...")
	out, err := os.CreateTemp(os.TempDir(), "compiledYaraRules")
	if err != nil {
		return "", fmt.Errorf("failed to create ouptut file=%s: %w", out.Name(), err)
	}

	defer out.Close()

	resp, err := http.Get(compiledRuleURL) // nolint:noctx,gosec
	if err != nil {
		return "", fmt.Errorf("failed to get url: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("failed to get url=%s: %s", compiledRuleURL, resp.Status)
	}

	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to write file=%s: %w", out.Name(), err)
	}
	logger.Infof("compiled rule path: %s", out.Name())

	return out.Name(), nil
}

func New(c job_manager.IsConfig, logger *logrus.Entry, resultChan chan job_manager.Result) job_manager.Job {
	conf := c.(*common.ScannersConfig) // nolint:forcetypeassert
	logger = logger.Dup().WithField("scanner", ScannerName)
	// Download compiled yara rule.
	compiledRuleFile, err := getCompiledRuleFilePath(conf.Yara, logger)
	if err != nil {
		logger.Errorf("Failed to get compiled rule file path: %v", err)
	}
	return &Scanner{
		name:             ScannerName,
		logger:           logger,
		config:           conf.Yara,
		resultChan:       resultChan,
		compiledRuleFile: compiledRuleFile,
	}
}

func (s *Scanner) isValidInputType(sourceType utils.SourceType) bool {
	switch sourceType {
	case utils.ROOTFS, utils.DIR, utils.IMAGE, utils.DOCKERARCHIVE, utils.OCIARCHIVE, utils.OCIDIR:
		return true
	case utils.FILE, utils.SBOM:
		fallthrough
	default:
		s.logger.Infof("source type %v is not supported for yara, skipping.", sourceType)
	}
	return false
}

func (s *Scanner) sendResults(results common.Results, err error) {
	if err != nil {
		s.logger.Error(err)
		results.Error = err
	}
	select {
	case s.resultChan <- &results:
	default:
		s.logger.Error("Failed to send results on channel")
	}
}

func createCacheDir() (string, error) {
	cacheDir, err := os.UserCacheDir()
	if err != nil {
		return "", fmt.Errorf("unable to determine os cache directory: %w", err)
	}
	cacheDir = path.Join(cacheDir, ScannerName)
	if err = os.MkdirAll(cacheDir, os.ModePerm); err != nil {
		return "", fmt.Errorf("directory creation failed, dir=%s: %w", cacheDir, err)
	}

	return cacheDir, nil
}
