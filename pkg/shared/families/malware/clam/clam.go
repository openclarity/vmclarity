// Copyright Â© 2022 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package clam

import (
	"context"
	"errors"
	"fmt"
	"os"
	"os/exec"
	"strings"

	log "github.com/sirupsen/logrus"

	"github.com/openclarity/vmclarity/pkg/shared/families/malware/clam/config"
	"github.com/openclarity/vmclarity/pkg/shared/families/malware/clam/constants"
	"github.com/openclarity/vmclarity/pkg/shared/families/malware/clam/util"
	"github.com/openclarity/vmclarity/pkg/shared/families/malware/common"
	familiesutils "github.com/openclarity/vmclarity/pkg/shared/families/utils"
	"github.com/openclarity/vmclarity/pkg/shared/job_manager"
	"github.com/openclarity/vmclarity/pkg/shared/utils"
)

const (
	ScannerName     = "clam"
	ClamScanBinary  = "clamscan"
	FreshClamBinary = "freshclam"
)

type Scanner struct {
	name       string
	logger     *log.Entry
	config     config.Config
	resultChan chan job_manager.Result
}

// nolint: cyclop
func (s *Scanner) Run(sourceType utils.SourceType, userInput string) error {
	go func() {
		retResults := common.Results{
			Source:      userInput,
			ScannerName: ScannerName,
		}

		if !s.isValidInputType(sourceType) {
			retResults.Error = fmt.Errorf("received invalid input type for ClamAV scanner: %v", sourceType)
			s.sendResults(retResults, nil)
			return
		}

		// Locate freshclam binary
		if s.config.FreshclamBinaryPath == "" {
			s.config.FreshclamBinaryPath = FreshClamBinary
		}

		freshClamPath, err := exec.LookPath(s.config.FreshclamBinaryPath)
		if err != nil {
			s.sendResults(retResults, fmt.Errorf("failed to lookup executable %s: %w", s.config.FreshclamBinaryPath, err))
			return
		}
		s.logger.Debugf("found freshclam binary at: %s", freshClamPath)

		// Locate clamscan binary
		if s.config.ClamScanBinaryPath == "" {
			s.config.ClamScanBinaryPath = ClamScanBinary
		}

		clamScanPath, err := exec.LookPath(s.config.ClamScanBinaryPath)
		if err != nil {
			s.sendResults(retResults, fmt.Errorf("failed to lookup executable %s: %w", s.config.ClamScanBinaryPath, err))
			return
		}
		s.logger.Debugf("found clamscan binary at: %s", clamScanPath)

		s.logger.Infof("Running freshclam...")
		// Handle alternative freshclam mirror
		if s.config.AlternativeFreshclamMirrorURL != "" {
			err := s.updateFreshclamConf()
			if err != nil {
				s.sendResults(retResults, fmt.Errorf("failed to update freshclam.conf: %s", err.Error()))
				return
			}
		} else {
			s.logger.Info("No alternative freshclam mirror url was provided, using default")
		}

		// Execute freshclam command
		// nolint:gosec
		freshclamCommand := exec.Command(freshClamPath)
		freshclamOut, err := utils.RunCommand(freshclamCommand)
		if err != nil {
			s.sendResults(retResults, fmt.Errorf("failed to run freshclam command: %s", err.Error()))
			return
		}
		s.logger.Infof("freshclam has finished running: %s", string(freshclamOut))

		fsPath, cleanup, err := familiesutils.ConvertInputToFilesystem(context.TODO(), sourceType, userInput)
		if err != nil {
			s.sendResults(retResults, fmt.Errorf("failed to convert input to filesystem: %w", err))
			return
		}
		defer cleanup()

		// Define the clamscan args to run
		args := []string{"--infected", "-r", fsPath}

		s.logger.Infof("Running clamscan...")
		// Execute the clamscan command
		// nolint:gosec
		clamScanCommand := exec.Command(clamScanPath, args...)
		out, err := utils.RunCommand(clamScanCommand)
		if err != nil {
			/* If the error is that malware was found, this is not an actual error, Clam returns
			   a non 0 exit code when malware was found */
			var runError utils.CmdRunError
			if !errors.As(err, &runError) || !strings.Contains(string(runError.Stdout), constants.MalwareDetectedIndication) {
				s.sendResults(retResults, fmt.Errorf("failed to run clam command: %s", err.Error()))
				return
			}

			out = runError.Stdout
		}

		detectedMalware, summary := util.ParseMalwareScanOutput(string(out))

		retResults.Malware = detectedMalware
		retResults.Summary = summary

		s.sendResults(retResults, nil)
	}()

	return nil
}

func New(c job_manager.IsConfig, logger *log.Entry, resultChan chan job_manager.Result) job_manager.Job {
	conf := c.(*common.ScannersConfig) // nolint:forcetypeassert
	return &Scanner{
		name:       ScannerName,
		logger:     logger.Dup().WithField("scanner", ScannerName),
		config:     conf.Clam,
		resultChan: resultChan,
	}
}

func (s *Scanner) updateFreshclamConf() error {
	var confContents []byte
	var confLines []string

	mirrorLine := fmt.Sprintf("%s %s", constants.PrivateMirrorConf, s.config.AlternativeFreshclamMirrorURL)
	scriptedUpdatesLine := fmt.Sprintf("%s no", constants.ScriptedUpdatesConf)

	// Attempt to read freshclam.conf file
	_, err := os.Stat(constants.FreshclamConfPath)
	if os.IsNotExist(err) {
		return fmt.Errorf("freshclam.conf not found at %s", constants.FreshclamConfPath)
	} else if err != nil {
		return fmt.Errorf("failed to check freshclam.conf: %w", err)
	}

	confContents, err = os.ReadFile(constants.FreshclamConfPath)
	if err != nil {
		return fmt.Errorf("failed to read freshclam.conf: %w", err)
	}

	confLines = strings.Split(string(confContents), "\n")

	// Comment out any existing conflicting options
	for i, line := range confLines {
		if strings.HasPrefix(line, constants.PrivateMirrorConf) || strings.HasPrefix(line, constants.ScriptedUpdatesConf) {
			confLines[i] = fmt.Sprintf("# %s", line)
		}
	}

	// Add our mirror options
	confLines = append(confLines, mirrorLine, scriptedUpdatesLine)

	// Re-render the file
	confContents = []byte(strings.Join(confLines, "\n"))

	writePermissions := 0o600
	err = os.WriteFile(constants.FreshclamConfPath, confContents, os.FileMode(writePermissions))
	if err != nil {
		return fmt.Errorf("failed to write freshclam.conf: %w", err)
	}

	return nil
}

func (s *Scanner) isValidInputType(sourceType utils.SourceType) bool {
	switch sourceType {
	case utils.ROOTFS, utils.DIR, utils.IMAGE, utils.DOCKERARCHIVE, utils.OCIARCHIVE, utils.OCIDIR:
		return true
	case utils.FILE, utils.SBOM:
		fallthrough
	default:
		s.logger.Infof("source type %v is not supported for clam, skipping.", sourceType)
	}
	return false
}

func (s *Scanner) sendResults(results common.Results, err error) {
	if err != nil {
		s.logger.Error(err)
		results.Error = err
	}
	select {
	case s.resultChan <- &results:
	default:
		s.logger.Error("Failed to send results on channel")
	}
}
