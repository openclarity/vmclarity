// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerableSoftware vulnerable software
//
// swagger:model VulnerableSoftware
type VulnerableSoftware struct {

	// cpe22
	Cpe22 string `json:"cpe22,omitempty"`

	// cpe23
	Cpe23 string `json:"cpe23,omitempty"`

	// edition
	Edition string `json:"edition,omitempty"`

	// is vulnerable
	IsVulnerable bool `json:"isVulnerable,omitempty"`

	// language
	Language string `json:"language,omitempty"`

	// other
	Other string `json:"other,omitempty"`

	// part
	Part string `json:"part,omitempty"`

	// product
	Product string `json:"product,omitempty"`

	// purl
	Purl string `json:"purl,omitempty"`

	// purl name
	PurlName string `json:"purlName,omitempty"`

	// purl namespace
	PurlNamespace string `json:"purlNamespace,omitempty"`

	// purl qualifiers
	PurlQualifiers string `json:"purlQualifiers,omitempty"`

	// purl subpath
	PurlSubpath string `json:"purlSubpath,omitempty"`

	// purl type
	PurlType string `json:"purlType,omitempty"`

	// purl version
	PurlVersion string `json:"purlVersion,omitempty"`

	// sw edition
	SwEdition string `json:"swEdition,omitempty"`

	// target hw
	TargetHw string `json:"targetHw,omitempty"`

	// target sw
	TargetSw string `json:"targetSw,omitempty"`

	// update
	Update string `json:"update,omitempty"`

	// uuid
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`

	// vendor
	Vendor string `json:"vendor,omitempty"`

	// version
	Version string `json:"version,omitempty"`

	// version end excluding
	VersionEndExcluding string `json:"versionEndExcluding,omitempty"`

	// version end including
	VersionEndIncluding string `json:"versionEndIncluding,omitempty"`

	// version start excluding
	VersionStartExcluding string `json:"versionStartExcluding,omitempty"`

	// version start including
	VersionStartIncluding string `json:"versionStartIncluding,omitempty"`

	// vulnerabilities
	Vulnerabilities []*Vulnerability `json:"vulnerabilities"`
}

// Validate validates this vulnerable software
func (m *VulnerableSoftware) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerableSoftware) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VulnerableSoftware) validateVulnerabilities(formats strfmt.Registry) error {
	if swag.IsZero(m.Vulnerabilities) { // not required
		return nil
	}

	for i := 0; i < len(m.Vulnerabilities); i++ {
		if swag.IsZero(m.Vulnerabilities[i]) { // not required
			continue
		}

		if m.Vulnerabilities[i] != nil {
			if err := m.Vulnerabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this vulnerable software based on the context it is used
func (m *VulnerableSoftware) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVulnerabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerableSoftware) contextValidateVulnerabilities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vulnerabilities); i++ {

		if m.Vulnerabilities[i] != nil {
			if err := m.Vulnerabilities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulnerableSoftware) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerableSoftware) UnmarshalBinary(b []byte) error {
	var res VulnerableSoftware
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
