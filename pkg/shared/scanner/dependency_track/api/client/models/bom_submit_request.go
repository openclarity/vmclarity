// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BomSubmitRequest bom submit request
//
// swagger:model BomSubmitRequest
type BomSubmitRequest struct {

	// auto create
	// Read Only: true
	AutoCreate *bool `json:"autoCreate,omitempty"`

	// bom
	// Read Only: true
	// Pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
	Bom string `json:"bom,omitempty"`

	// project
	// Read Only: true
	// Pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
	Project string `json:"project,omitempty"`

	// project name
	// Read Only: true
	ProjectName string `json:"projectName,omitempty"`

	// project version
	// Read Only: true
	ProjectVersion string `json:"projectVersion,omitempty"`
}

// Validate validates this bom submit request
func (m *BomSubmitRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BomSubmitRequest) validateBom(formats strfmt.Registry) error {
	if swag.IsZero(m.Bom) { // not required
		return nil
	}

	if err := validate.Pattern("bom", "body", m.Bom, `^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$`); err != nil {
		return err
	}

	return nil
}

func (m *BomSubmitRequest) validateProject(formats strfmt.Registry) error {
	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if err := validate.Pattern("project", "body", m.Project, `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this bom submit request based on the context it is used
func (m *BomSubmitRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutoCreate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BomSubmitRequest) contextValidateAutoCreate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "autoCreate", "body", m.AutoCreate); err != nil {
		return err
	}

	return nil
}

func (m *BomSubmitRequest) contextValidateBom(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "bom", "body", string(m.Bom)); err != nil {
		return err
	}

	return nil
}

func (m *BomSubmitRequest) contextValidateProject(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "project", "body", string(m.Project)); err != nil {
		return err
	}

	return nil
}

func (m *BomSubmitRequest) contextValidateProjectName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "projectName", "body", string(m.ProjectName)); err != nil {
		return err
	}

	return nil
}

func (m *BomSubmitRequest) contextValidateProjectVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "projectVersion", "body", string(m.ProjectVersion)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BomSubmitRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BomSubmitRequest) UnmarshalBinary(b []byte) error {
	var res BomSubmitRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
