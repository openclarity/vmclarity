// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// License license
//
// swagger:model License
type License struct {

	// is deprecated license Id
	IsDeprecatedLicenseID bool `json:"isDeprecatedLicenseId,omitempty"`

	// is fsf libre
	IsFsfLibre bool `json:"isFsfLibre,omitempty"`

	// is osi approved
	IsOsiApproved bool `json:"isOsiApproved,omitempty"`

	// license comments
	LicenseComments string `json:"licenseComments,omitempty"`

	// license groups
	LicenseGroups []*LicenseGroup `json:"licenseGroups"`

	// license Id
	// Max Length: 255
	// Min Length: 1
	// Pattern: ^[a-zA-Z0-9_.\-+]*$
	LicenseID string `json:"licenseId,omitempty"`

	// license text
	LicenseText string `json:"licenseText,omitempty"`

	// name
	// Max Length: 255
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// see also
	SeeAlso []string `json:"seeAlso"`

	// standard license header
	StandardLicenseHeader string `json:"standardLicenseHeader,omitempty"`

	// standard license template
	StandardLicenseTemplate string `json:"standardLicenseTemplate,omitempty"`

	// uuid
	// Required: true
	// Format: uuid
	UUID *strfmt.UUID `json:"uuid"`
}

// Validate validates this license
func (m *License) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLicenseGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *License) validateLicenseGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.LicenseGroups); i++ {
		if swag.IsZero(m.LicenseGroups[i]) { // not required
			continue
		}

		if m.LicenseGroups[i] != nil {
			if err := m.LicenseGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("licenseGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *License) validateLicenseID(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseID) { // not required
		return nil
	}

	if err := validate.MinLength("licenseId", "body", m.LicenseID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("licenseId", "body", m.LicenseID, 255); err != nil {
		return err
	}

	if err := validate.Pattern("licenseId", "body", m.LicenseID, `^[a-zA-Z0-9_.\-+]*$`); err != nil {
		return err
	}

	return nil
}

func (m *License) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 255); err != nil {
		return err
	}

	return nil
}

func (m *License) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this license based on the context it is used
func (m *License) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLicenseGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *License) contextValidateLicenseGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LicenseGroups); i++ {

		if m.LicenseGroups[i] != nil {
			if err := m.LicenseGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("licenseGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *License) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *License) UnmarshalBinary(b []byte) error {
	var res License
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
