// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Project project
//
// swagger:model Project
type Project struct {

	// active
	Active bool `json:"active,omitempty"`

	// author
	// Max Length: 255
	// Min Length: 0
	Author *string `json:"author,omitempty"`

	// children
	Children []*Project `json:"children"`

	// classifier
	// Enum: [APPLICATION FRAMEWORK LIBRARY CONTAINER OPERATING_SYSTEM DEVICE FIRMWARE FILE]
	Classifier string `json:"classifier,omitempty"`

	// cpe
	// Max Length: 255
	// Min Length: 0
	// Pattern: (cpe:2\.3:[aho\*\-](:(((\?*|\*?)([a-zA-Z0-9\-\._]|(\\[\\\*\?!"#$$%&'\(\)\+,/:;<=>@\[\]\^`\{\|}~]))+(\?*|\*?))|[\*\-])){5}(:(([a-zA-Z]{2,3}(-([a-zA-Z]{2}|[0-9]{3}))?)|[\*\-]))(:(((\?*|\*?)([a-zA-Z0-9\-\._]|(\\[\\\*\?!"#$$%&'\(\)\+,/:;<=>@\[\]\^`\{\|}~]))+(\?*|\*?))|[\*\-])){4})|([c][pP][eE]:/[AHOaho]?(:[A-Za-z0-9\._\-~%]*){0,6})
	Cpe *string `json:"cpe,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// direct dependencies
	DirectDependencies string `json:"directDependencies,omitempty"`

	// group
	// Max Length: 255
	// Min Length: 0
	Group *string `json:"group,omitempty"`

	// last bom import
	LastBomImport float64 `json:"lastBomImport,omitempty"`

	// last bom import format
	LastBomImportFormat string `json:"lastBomImportFormat,omitempty"`

	// last inherited risk score
	LastInheritedRiskScore float64 `json:"lastInheritedRiskScore,omitempty"`

	// metrics
	Metrics *ProjectMetrics `json:"metrics,omitempty"`

	// name
	// Max Length: 255
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// parent
	Parent *Project `json:"parent,omitempty"`

	// properties
	Properties []*ProjectProperty `json:"properties"`

	// publisher
	// Max Length: 255
	// Min Length: 0
	Publisher *string `json:"publisher,omitempty"`

	// purl
	Purl *PackageURL `json:"purl,omitempty"`

	// swid tag Id
	// Max Length: 255
	// Min Length: 0
	SwidTagID *string `json:"swidTagId,omitempty"`

	// tags
	Tags []*Tag `json:"tags"`

	// uuid
	// Required: true
	// Format: uuid
	UUID *strfmt.UUID `json:"uuid"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this project
func (m *Project) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClassifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublisher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwidTagID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Project) validateAuthor(formats strfmt.Registry) error {
	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if err := validate.MinLength("author", "body", *m.Author, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("author", "body", *m.Author, 255); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateChildren(formats strfmt.Registry) error {
	if swag.IsZero(m.Children) { // not required
		return nil
	}

	for i := 0; i < len(m.Children); i++ {
		if swag.IsZero(m.Children[i]) { // not required
			continue
		}

		if m.Children[i] != nil {
			if err := m.Children[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var projectTypeClassifierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["APPLICATION","FRAMEWORK","LIBRARY","CONTAINER","OPERATING_SYSTEM","DEVICE","FIRMWARE","FILE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectTypeClassifierPropEnum = append(projectTypeClassifierPropEnum, v)
	}
}

const (

	// ProjectClassifierAPPLICATION captures enum value "APPLICATION"
	ProjectClassifierAPPLICATION string = "APPLICATION"

	// ProjectClassifierFRAMEWORK captures enum value "FRAMEWORK"
	ProjectClassifierFRAMEWORK string = "FRAMEWORK"

	// ProjectClassifierLIBRARY captures enum value "LIBRARY"
	ProjectClassifierLIBRARY string = "LIBRARY"

	// ProjectClassifierCONTAINER captures enum value "CONTAINER"
	ProjectClassifierCONTAINER string = "CONTAINER"

	// ProjectClassifierOPERATINGSYSTEM captures enum value "OPERATING_SYSTEM"
	ProjectClassifierOPERATINGSYSTEM string = "OPERATING_SYSTEM"

	// ProjectClassifierDEVICE captures enum value "DEVICE"
	ProjectClassifierDEVICE string = "DEVICE"

	// ProjectClassifierFIRMWARE captures enum value "FIRMWARE"
	ProjectClassifierFIRMWARE string = "FIRMWARE"

	// ProjectClassifierFILE captures enum value "FILE"
	ProjectClassifierFILE string = "FILE"
)

// prop value enum
func (m *Project) validateClassifierEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectTypeClassifierPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Project) validateClassifier(formats strfmt.Registry) error {
	if swag.IsZero(m.Classifier) { // not required
		return nil
	}

	// value enum
	if err := m.validateClassifierEnum("classifier", "body", m.Classifier); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateCpe(formats strfmt.Registry) error {
	if swag.IsZero(m.Cpe) { // not required
		return nil
	}

	if err := validate.MinLength("cpe", "body", *m.Cpe, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cpe", "body", *m.Cpe, 255); err != nil {
		return err
	}

	if err := validate.Pattern("cpe", "body", *m.Cpe, `(cpe:2\.3:[aho\*\-](:(((\?*|\*?)([a-zA-Z0-9\-\._]|(\\[\\\*\?!"#$$%&'\(\)\+,/:;<=>@\[\]\^`+"`"+`\{\|}~]))+(\?*|\*?))|[\*\-])){5}(:(([a-zA-Z]{2,3}(-([a-zA-Z]{2}|[0-9]{3}))?)|[\*\-]))(:(((\?*|\*?)([a-zA-Z0-9\-\._]|(\\[\\\*\?!"#$$%&'\(\)\+,/:;<=>@\[\]\^`+"`"+`\{\|}~]))+(\?*|\*?))|[\*\-])){4})|([c][pP][eE]:/[AHOaho]?(:[A-Za-z0-9\._\-~%]*){0,6})`); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if err := validate.MinLength("group", "body", *m.Group, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("group", "body", *m.Group, 255); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	if m.Metrics != nil {
		if err := m.Metrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics")
			}
			return err
		}
	}

	return nil
}

func (m *Project) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 255); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateParent(formats strfmt.Registry) error {
	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *Project) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for i := 0; i < len(m.Properties); i++ {
		if swag.IsZero(m.Properties[i]) { // not required
			continue
		}

		if m.Properties[i] != nil {
			if err := m.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Project) validatePublisher(formats strfmt.Registry) error {
	if swag.IsZero(m.Publisher) { // not required
		return nil
	}

	if err := validate.MinLength("publisher", "body", *m.Publisher, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("publisher", "body", *m.Publisher, 255); err != nil {
		return err
	}

	return nil
}

func (m *Project) validatePurl(formats strfmt.Registry) error {
	if swag.IsZero(m.Purl) { // not required
		return nil
	}

	if m.Purl != nil {
		if err := m.Purl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purl")
			}
			return err
		}
	}

	return nil
}

func (m *Project) validateSwidTagID(formats strfmt.Registry) error {
	if swag.IsZero(m.SwidTagID) { // not required
		return nil
	}

	if err := validate.MinLength("swidTagId", "body", *m.SwidTagID, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("swidTagId", "body", *m.SwidTagID, 255); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Project) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this project based on the context it is used
func (m *Project) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildren(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePurl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Project) contextValidateChildren(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Children); i++ {

		if m.Children[i] != nil {
			if err := m.Children[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Project) contextValidateMetrics(ctx context.Context, formats strfmt.Registry) error {

	if m.Metrics != nil {
		if err := m.Metrics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics")
			}
			return err
		}
	}

	return nil
}

func (m *Project) contextValidateParent(ctx context.Context, formats strfmt.Registry) error {

	if m.Parent != nil {
		if err := m.Parent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *Project) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Properties); i++ {

		if m.Properties[i] != nil {
			if err := m.Properties[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Project) contextValidatePurl(ctx context.Context, formats strfmt.Registry) error {

	if m.Purl != nil {
		if err := m.Purl.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purl")
			}
			return err
		}
	}

	return nil
}

func (m *Project) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Project) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Project) UnmarshalBinary(b []byte) error {
	var res Project
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
