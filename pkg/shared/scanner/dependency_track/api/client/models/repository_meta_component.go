// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RepositoryMetaComponent repository meta component
//
// swagger:model RepositoryMetaComponent
type RepositoryMetaComponent struct {

	// last check
	// Required: true
	// Format: date-time
	LastCheck *strfmt.DateTime `json:"lastCheck"`

	// latest version
	// Required: true
	LatestVersion *string `json:"latestVersion"`

	// name
	// Required: true
	Name *string `json:"name"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// published
	Published float64 `json:"published,omitempty"`

	// repository type
	// Required: true
	// Enum: [MAVEN NPM GEM PYPI NUGET HEX COMPOSER CARGO GO_MODULES UNSUPPORTED]
	RepositoryType *string `json:"repositoryType"`
}

// Validate validates this repository meta component
func (m *RepositoryMetaComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepositoryType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryMetaComponent) validateLastCheck(formats strfmt.Registry) error {

	if err := validate.Required("lastCheck", "body", m.LastCheck); err != nil {
		return err
	}

	if err := validate.FormatOf("lastCheck", "body", "date-time", m.LastCheck.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RepositoryMetaComponent) validateLatestVersion(formats strfmt.Registry) error {

	if err := validate.Required("latestVersion", "body", m.LatestVersion); err != nil {
		return err
	}

	return nil
}

func (m *RepositoryMetaComponent) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var repositoryMetaComponentTypeRepositoryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MAVEN","NPM","GEM","PYPI","NUGET","HEX","COMPOSER","CARGO","GO_MODULES","UNSUPPORTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repositoryMetaComponentTypeRepositoryTypePropEnum = append(repositoryMetaComponentTypeRepositoryTypePropEnum, v)
	}
}

const (

	// RepositoryMetaComponentRepositoryTypeMAVEN captures enum value "MAVEN"
	RepositoryMetaComponentRepositoryTypeMAVEN string = "MAVEN"

	// RepositoryMetaComponentRepositoryTypeNPM captures enum value "NPM"
	RepositoryMetaComponentRepositoryTypeNPM string = "NPM"

	// RepositoryMetaComponentRepositoryTypeGEM captures enum value "GEM"
	RepositoryMetaComponentRepositoryTypeGEM string = "GEM"

	// RepositoryMetaComponentRepositoryTypePYPI captures enum value "PYPI"
	RepositoryMetaComponentRepositoryTypePYPI string = "PYPI"

	// RepositoryMetaComponentRepositoryTypeNUGET captures enum value "NUGET"
	RepositoryMetaComponentRepositoryTypeNUGET string = "NUGET"

	// RepositoryMetaComponentRepositoryTypeHEX captures enum value "HEX"
	RepositoryMetaComponentRepositoryTypeHEX string = "HEX"

	// RepositoryMetaComponentRepositoryTypeCOMPOSER captures enum value "COMPOSER"
	RepositoryMetaComponentRepositoryTypeCOMPOSER string = "COMPOSER"

	// RepositoryMetaComponentRepositoryTypeCARGO captures enum value "CARGO"
	RepositoryMetaComponentRepositoryTypeCARGO string = "CARGO"

	// RepositoryMetaComponentRepositoryTypeGOMODULES captures enum value "GO_MODULES"
	RepositoryMetaComponentRepositoryTypeGOMODULES string = "GO_MODULES"

	// RepositoryMetaComponentRepositoryTypeUNSUPPORTED captures enum value "UNSUPPORTED"
	RepositoryMetaComponentRepositoryTypeUNSUPPORTED string = "UNSUPPORTED"
)

// prop value enum
func (m *RepositoryMetaComponent) validateRepositoryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, repositoryMetaComponentTypeRepositoryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RepositoryMetaComponent) validateRepositoryType(formats strfmt.Registry) error {

	if err := validate.Required("repositoryType", "body", m.RepositoryType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRepositoryTypeEnum("repositoryType", "body", *m.RepositoryType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this repository meta component based on context it is used
func (m *RepositoryMetaComponent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryMetaComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryMetaComponent) UnmarshalBinary(b []byte) error {
	var res RepositoryMetaComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
