// Code generated by go-swagger; DO NOT EDIT.

package vulnerability

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openclarity/vmclarity/pkg/shared/scanner/dependency_track/api/client/models"
)

// GetVulnerabilitiesByProjectReader is a Reader for the GetVulnerabilitiesByProject structure.
type GetVulnerabilitiesByProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVulnerabilitiesByProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVulnerabilitiesByProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetVulnerabilitiesByProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetVulnerabilitiesByProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVulnerabilitiesByProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVulnerabilitiesByProjectOK creates a GetVulnerabilitiesByProjectOK with default headers values
func NewGetVulnerabilitiesByProjectOK() *GetVulnerabilitiesByProjectOK {
	return &GetVulnerabilitiesByProjectOK{}
}

/*
GetVulnerabilitiesByProjectOK describes a response with status code 200, with default header values.

successful operation
*/
type GetVulnerabilitiesByProjectOK struct {

	/* The total number of vulnerabilities

	   Format: int64
	*/
	XTotalCount int64

	Payload []*models.Vulnerability
}

func (o *GetVulnerabilitiesByProjectOK) Error() string {
	return fmt.Sprintf("[GET /v1/vulnerability/project/{uuid}][%d] getVulnerabilitiesByProjectOK  %+v", 200, o.Payload)
}
func (o *GetVulnerabilitiesByProjectOK) GetPayload() []*models.Vulnerability {
	return o.Payload
}

func (o *GetVulnerabilitiesByProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Total-Count
	hdrXTotalCount := response.GetHeader("X-Total-Count")

	if hdrXTotalCount != "" {
		valxTotalCount, err := swag.ConvertInt64(hdrXTotalCount)
		if err != nil {
			return errors.InvalidType("X-Total-Count", "header", "int64", hdrXTotalCount)
		}
		o.XTotalCount = valxTotalCount
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVulnerabilitiesByProjectUnauthorized creates a GetVulnerabilitiesByProjectUnauthorized with default headers values
func NewGetVulnerabilitiesByProjectUnauthorized() *GetVulnerabilitiesByProjectUnauthorized {
	return &GetVulnerabilitiesByProjectUnauthorized{}
}

/*
GetVulnerabilitiesByProjectUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetVulnerabilitiesByProjectUnauthorized struct {
}

func (o *GetVulnerabilitiesByProjectUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/vulnerability/project/{uuid}][%d] getVulnerabilitiesByProjectUnauthorized ", 401)
}

func (o *GetVulnerabilitiesByProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVulnerabilitiesByProjectForbidden creates a GetVulnerabilitiesByProjectForbidden with default headers values
func NewGetVulnerabilitiesByProjectForbidden() *GetVulnerabilitiesByProjectForbidden {
	return &GetVulnerabilitiesByProjectForbidden{}
}

/*
GetVulnerabilitiesByProjectForbidden describes a response with status code 403, with default header values.

Access to the specified project is forbidden
*/
type GetVulnerabilitiesByProjectForbidden struct {
}

func (o *GetVulnerabilitiesByProjectForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/vulnerability/project/{uuid}][%d] getVulnerabilitiesByProjectForbidden ", 403)
}

func (o *GetVulnerabilitiesByProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVulnerabilitiesByProjectNotFound creates a GetVulnerabilitiesByProjectNotFound with default headers values
func NewGetVulnerabilitiesByProjectNotFound() *GetVulnerabilitiesByProjectNotFound {
	return &GetVulnerabilitiesByProjectNotFound{}
}

/*
GetVulnerabilitiesByProjectNotFound describes a response with status code 404, with default header values.

The project could not be found
*/
type GetVulnerabilitiesByProjectNotFound struct {
}

func (o *GetVulnerabilitiesByProjectNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/vulnerability/project/{uuid}][%d] getVulnerabilitiesByProjectNotFound ", 404)
}

func (o *GetVulnerabilitiesByProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
