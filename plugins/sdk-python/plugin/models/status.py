from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from plugin.models.base_model import Model
from plugin.models.state import State
from plugin import util

from plugin.models.state import State  # noqa: E501

class Status(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state=None, message=None, last_transition_time=None):  # noqa: E501
        """Status - a model defined in OpenAPI

        :param state: The state of this Status.  # noqa: E501
        :type state: State
        :param message: The message of this Status.  # noqa: E501
        :type message: str
        :param last_transition_time: The last_transition_time of this Status.  # noqa: E501
        :type last_transition_time: datetime
        """
        self.openapi_types = {
            'state': State,
            'message': str,
            'last_transition_time': datetime
        }

        self.attribute_map = {
            'state': 'state',
            'message': 'message',
            'last_transition_time': 'lastTransitionTime'
        }

        self._state = state
        self._message = message
        self._last_transition_time = last_transition_time

    @classmethod
    def from_dict(cls, dikt) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Status of this Status.  # noqa: E501
        :rtype: Status
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self) -> State:
        """Gets the state of this Status.


        :return: The state of this Status.
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state: State):
        """Sets the state of this Status.


        :param state: The state of this Status.
        :type state: State
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def message(self) -> str:
        """Gets the message of this Status.

        Human readable message.  # noqa: E501

        :return: The message of this Status.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Status.

        Human readable message.  # noqa: E501

        :param message: The message of this Status.
        :type message: str
        """

        self._message = message

    @property
    def last_transition_time(self) -> datetime:
        """Gets the last_transition_time of this Status.

        Last date time when the status has changed.  # noqa: E501

        :return: The last_transition_time of this Status.
        :rtype: datetime
        """
        return self._last_transition_time

    @last_transition_time.setter
    def last_transition_time(self, last_transition_time: datetime):
        """Sets the last_transition_time of this Status.

        Last date time when the status has changed.  # noqa: E501

        :param last_transition_time: The last_transition_time of this Status.
        :type last_transition_time: datetime
        """
        if last_transition_time is None:
            raise ValueError("Invalid value for `last_transition_time`, must not be `None`")  # noqa: E501

        self._last_transition_time = last_transition_time
