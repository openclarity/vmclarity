// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Stop the scanner.
	// (POST /stop)
	PostStop(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// PostStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostStop(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStop(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.POST(baseURL+"/stop", wrapper.PostStop)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Gz0W5/fN5n8BAAD//ykEvgp3KQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
