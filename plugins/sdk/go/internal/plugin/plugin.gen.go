// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Stop the scanner.
	// (POST /stop)
	PostStop(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// PostStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostStop(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStop(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.POST(baseURL+"/stop", wrapper.PostStop)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXXW/bNhf+Kwd8X6AbICvuul3MQC/SZG0zrF3QBN1F0wuaOrLYSaRGHtrxWv/34ZCS",
	"4g8laYa2mG/iWIcPn/P1nKOPQtmmtQYNeTH7KLyqsJHx64k1pV7wtwK9crolbY2YidP43xw9SPBKGoMO",
	"VLTNRSZaZ1t0pDFilLrGQ4TLCoGfwEpTBVRhdz44yRbg8K+gHRYwX8en/S1tHRba5HBZaQ+a728lVWBN",
	"tGJEv/aEDZDdQo0P8isjMkHrFsVMeHLaLMQmE9q0gU61G+dYaIeKrFvDqtKqAl/ZUBcw7xndRnDkrkxc",
	"T6xs9UTZAhdoJnhNTk5ILmKclrLWhSQ+0DsvNptM2ECfSxAdjnDpOXuyDkHTIw+lNoU2C//FaT63rpF0",
	"S7rjM9CmC+VDmV5aQOODQ+DyknNda1qn+nn76qSWjv89Pj/LUimk25rgibNlDYItAU1oYCnrgIz40q5w",
	"iS7boaKkAR/a1joCFTzZpsPyID2ssK65tnoLSxW6K0PW1h6+w3yRg1qr2poCrycfvDVZBzJJIPxnwtaT",
	"42cnGSCp/Pv8yvxRoQHlUJI2iy13fr34/TWk0GYQPALnykOt5066NZTONrvOMzdljScXFEW/0umUaXZf",
	"zN6JZaPSkUhRvB+rAbZ9LRtu4ndiuIMJsf1DaySzBm35dO9iLhzSDdpAF6isKfx46TTyWjehAbblAvLJ",
	"GKiS1EkQeJKOsEgxIZaH1PtXpqsqFwxnEuZYcnnNkUMtA9lGklayrtcg55YxUrAabfhSMZsO4dGGcIHu",
	"X/RItqCnU7Fhh4e2mb27EZ/tPt9rpoMQ3aTLzj+gIlaxX5yz7g361ho/IrfHBpJtCpn24JCCY/3ikEgo",
	"pa6xiBXE/NDToZI36L1cRPQ9Fd2MMHqFJAtJ8q7pMSKcB7fKVr9F5+PRz7r4giSFeHQXqJaeLp00XjOP",
	"S92MxOk36Qk4danUVtyWkWTEhEp6UJU0CyyYaNmpneATEz4xNmC2wrZ72cvQSJ50spDzGqGzy8cw+H68",
	"N5KJpC37mOZX5hOkcED/+QSnNxDw8M8nxpzsfGD/hwd+EuZrS29QFuuB55nRpGUd3dpOxc2+QVLzt9j5",
	"foznNmDEvOgOe6TQQtSIpq2REKQpQHedwYfIgkOFeol9Q/gOMxjDynGA2a0aK+n7k0VE3SbN8HvnGfN5",
	"6r5DzHL3wUNydMojb8z3La8L8EEp9L4MLH/3YG4NkD5ZIhPD3+SXyETyRmSCKRwOl30NTLWdjfXn+9H2",
	"tu1hc983RY5LQpfGQmea8oJuiQ5Wuq7jTke2bVNvfwv1v1fXN3E/LW3ykHiRFn0az9PKdHx+JjKx7BVS",
	"PM6n+ZTjZFs0stViJp7k0/wx66qkKjI8UsNe31of17W4UnGszgoxE+fWU7f7J8bo6Zkt1mzJfYeGkjS3",
	"tVbx2FGc58PbA3/7v8NSzMT/jm5eL466d4ujDnwvIuQCxh/SGItcf5g+HskmGFylsc+SPMd+e+LcbTLx",
	"43T6xajuTtbI+HBB6WIEc1usucG0iVXQkfn525LZEhtj48KdJC02Wh77z4emkW7dpbqXru6daW8pZw2L",
	"EjuMlQhxVKGsqfqbKS9wpIheIL3sTA5yOh3f87aYJ/R1vH1Y7zphZfnsRTmG+Kfpk3sBORR7oPzTHbg7",
	"cTqpUP05Ep5HPdUuKs3W2nNbWIbVaDwuX6RShjtGiqSXkJ7rvq8vkIZn/T59uKhFd/2wbN3mbLeOfUVX",
	"uxtu64ZhK9pyYsxjutv4yPeD51bJjKPp6whmhN50enmfPF7eMdn+W+q4kwT2cT/um80/AQAA//9Qs+k5",
	"nxIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
