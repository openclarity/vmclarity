// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Stop the scanner.
	// (POST /stop)
	PostStop(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// PostStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostStop(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStop(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.POST(baseURL+"/stop", wrapper.PostStop)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
