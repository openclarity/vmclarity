// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Stop the scanner.
	// (POST /stop)
	PostStop(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// PostStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostStop(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStop(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.POST(baseURL+"/stop", wrapper.PostStop)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+P+Kjo1DmDV6LM7um83/AgAA///SulizoykAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
