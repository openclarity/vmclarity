// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Stop the scanner.
	// (POST /stop)
	PostStop(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// PostStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostStop(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStop(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.POST(baseURL+"/stop", wrapper.PostStop)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX32/bNhD+Vw7cgG6ArLjr9jADfUiTtc2wdkETdA9NH2jqZLGTSI08xvFa/+/DkZLi",
	"H0q8DG0xv8Sxjh+/+/Xd6aNQtmmtQUNezD4KrypsZPx6Yk2pF/ytQK+cbklbI2biNP43Rw8SvJLGoAMV",
	"bXORidbZFh1pjBilrnEf4bJC4Cew1FQBVdidD06yBTj8K2iHBcxX8Wl/S1uHhTY5XFbag+b7W0kVWBOt",
	"GNGvPGEDZDdQ44P8yohM0KpFMROenDYLsc6ENm2gU+3GORbaoSLrVrCstKrAVzbUBcx7RncRHLkrEzcT",
	"K1s9UbbABZoJ3pCTE5KLGKdrWetCEh/onRfrdSZsoDbQ8wNRrNDhCI+eryfrEDQ98lBqU2iz8J+fonWN",
	"pDtIxmegTRfGhzK9tIDGB4fApSXnuta0SrXz9tVJLR3/e3x+lqUySLc1wRNnyhoEWwKa0MC1rAMy4ku7",
	"xGt02RYVJQ340LbWEajgyTYdlgfpYYl1zXXVW1iq0F0Zsrb28B3mixzUStXWFHgz+eCtyTqQSQLhPxO2",
	"nhw/O8kASeXf51fmjwoNKIeStFlsuPPrxe+vIYU2g+AROFceaj130q2gdLbZdp65KWs8uaAo+pVOp0yz",
	"+2L2Tlw3Kh2JFMX7sRpg29ey4QZ+J4Y7mBDbP7RGMmvQlk93LubCId2gDXSByprCj5dOI290ExpgWy4g",
	"n4yBKkmd/IAn6QiLFBNiaUh9f2W6qnLBcCZhjiWX1xw51DKQbSRpJet6BXJuGSMFq9GGLxWz6RAebQgX",
	"6P5Dj2QLejoVa3Z4aJvZu1vh2erxnW7ai9Ftvuz8AypiCfvFOeveoG+t8SMqcWwg2aaYaQ8OKTgWL46J",
	"hFLqGotYQkwQPe3LeIPey0VE35HQ9QijV0iykCTvGx0jqrl3q2z1W3Q+Hv1XF1+QpBCPbgPV0tOlk8Zr",
	"5nGpm5E4/SY9Aecu1dqS+zKSjJhQSQ+qkmaBBRMtO7kTfGLCJ8amy0bYti97GRrJY04Wcl4jdHb5GAbf",
	"jwcjmUjaso9pfmU+QQoH9J9PcHoLAQ//fGLMydYHdn944Cdhvrb0BmWxGnieGU1a1tGtzVTcLhskNX+L",
	"re/HeG4CRsyL7rBHCi1EkWjaGglBmgJ01xl8iCw4VKivsW8I32EGY1g69jC7PWMpfX+yiKibpBl+5zxj",
	"Pk/dt49Zbj94SI5OeeaN+b7hdQE+KIXel4H17wDmxgTpkyUyMfxNfolMJG9EJpjC/nTZFcFU29lYf74f",
	"bW/b7jf3oTFyXBK6NBc605QXdNfoYKnrOi50ZNs29fbXkP+Dur6Oy2lpk4fE+5/o03iedqbj8zORiete",
	"IcXjfJpPOU62RSNbLWbiST7NH7OuSqoiwyM1LPWt9XFfizsVx+qsEDNxbj11i39ijJ6e2WLFltx3aChJ",
	"c1trFY8dxYE+vDrwt28dlmImvjm6fbc46l4sjjrwnYiQCxh/SGMscv1h+ngkm2BwmeY+S/Ic+/WJc7fO",
	"xI/T6Wejuj1ZI+P9DaWLEcxtseIG0yZWQUfm569LZkNsjI0bd5K02Gh57D8fmka6VZfqXrq6F6adrZw1",
	"LErsMFYixFGFsqbqb6a8wJEieoH0sjPZy+l0fNHbYJ7QV/H2Yb/rhJXlsxflGOKfpk8OAnIodkD5p3tw",
	"t+J0UqH6cyQ8j3qqXVSajbXnrrAMq9F4XD5LpQx3jBRJLyE9111fXyANz/qFen9Ri+76Ydm6y9luHfuC",
	"rnY33NUNw1a04cSYx3S/8ZHvB8+dkhlH05cRzAi97vTykDxe3jPZ/l/quJUE9nE37uv1PwEAAP//IK/3",
	"ZJwSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
