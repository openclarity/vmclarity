// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Stop the scanner.
	// (POST /stop)
	PostStop(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// PostStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostStop(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStop(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.POST(baseURL+"/stop", wrapper.PostStop)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
