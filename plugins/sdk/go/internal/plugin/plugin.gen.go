// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Stop the scanner.
	// (POST /stop)
	PostStop(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// PostStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostStop(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStop(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.POST(baseURL+"/stop", wrapper.PostStop)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
