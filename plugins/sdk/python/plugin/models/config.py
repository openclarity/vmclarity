from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from plugin.models.base_model import Model
from plugin import util


class Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file=None, input_dir=None, output_dir=None, output_format=None, timeout_seconds=None):  # noqa: E501
        """Config - a model defined in OpenAPI

        :param file: The file of this Config.  # noqa: E501
        :type file: str
        :param input_dir: The input_dir of this Config.  # noqa: E501
        :type input_dir: str
        :param output_dir: The output_dir of this Config.  # noqa: E501
        :type output_dir: str
        :param output_format: The output_format of this Config.  # noqa: E501
        :type output_format: str
        :param timeout_seconds: The timeout_seconds of this Config.  # noqa: E501
        :type timeout_seconds: int
        """
        self.openapi_types = {
            'file': str,
            'input_dir': str,
            'output_dir': str,
            'output_format': str,
            'timeout_seconds': int
        }

        self.attribute_map = {
            'file': 'file',
            'input_dir': 'inputDir',
            'output_dir': 'outputDir',
            'output_format': 'outputFormat',
            'timeout_seconds': 'timeoutSeconds'
        }

        self._file = file
        self._input_dir = input_dir
        self._output_dir = output_dir
        self._output_format = output_format
        self._timeout_seconds = timeout_seconds

    @classmethod
    def from_dict(cls, dikt) -> 'Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Config of this Config.  # noqa: E501
        :rtype: Config
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file(self) -> str:
        """Gets the file of this Config.

        The file with the configuration required by the scanner plugin. This is a path on the filesystem to the config file.   # noqa: E501

        :return: The file of this Config.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file: str):
        """Sets the file of this Config.

        The file with the configuration required by the scanner plugin. This is a path on the filesystem to the config file.   # noqa: E501

        :param file: The file of this Config.
        :type file: str
        """

        self._file = file

    @property
    def input_dir(self) -> str:
        """Gets the input_dir of this Config.

        The directory which should be scanned by the scanner plugin.   # noqa: E501

        :return: The input_dir of this Config.
        :rtype: str
        """
        return self._input_dir

    @input_dir.setter
    def input_dir(self, input_dir: str):
        """Sets the input_dir of this Config.

        The directory which should be scanned by the scanner plugin.   # noqa: E501

        :param input_dir: The input_dir of this Config.
        :type input_dir: str
        """
        if input_dir is None:
            raise ValueError("Invalid value for `input_dir`, must not be `None`")  # noqa: E501

        self._input_dir = input_dir

    @property
    def output_dir(self) -> str:
        """Gets the output_dir of this Config.

        The directory where the scanner plugin should store it's findings.   # noqa: E501

        :return: The output_dir of this Config.
        :rtype: str
        """
        return self._output_dir

    @output_dir.setter
    def output_dir(self, output_dir: str):
        """Sets the output_dir of this Config.

        The directory where the scanner plugin should store it's findings.   # noqa: E501

        :param output_dir: The output_dir of this Config.
        :type output_dir: str
        """
        if output_dir is None:
            raise ValueError("Invalid value for `output_dir`, must not be `None`")  # noqa: E501

        self._output_dir = output_dir

    @property
    def output_format(self) -> str:
        """Gets the output_format of this Config.

        The format in which the scanner plugin should store it's findings. To ensure operability with VMClarity API, the format must be one of enum values. However, the scanner can support custom formats as well to support other tools (e.g. cyclondex-json, custom-format-for-tool-ABC, etc.). When creating VMClarity JSON output, use types library from VMClarity API to construct the output.   # noqa: E501

        :return: The output_format of this Config.
        :rtype: str
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format: str):
        """Sets the output_format of this Config.

        The format in which the scanner plugin should store it's findings. To ensure operability with VMClarity API, the format must be one of enum values. However, the scanner can support custom formats as well to support other tools (e.g. cyclondex-json, custom-format-for-tool-ABC, etc.). When creating VMClarity JSON output, use types library from VMClarity API to construct the output.   # noqa: E501

        :param output_format: The output_format of this Config.
        :type output_format: str
        """
        allowed_values = ["vmclarity-json"]  # noqa: E501
        if output_format not in allowed_values:
            raise ValueError(
                "Invalid value for `output_format` ({0}), must be one of {1}"
                .format(output_format, allowed_values)
            )

        self._output_format = output_format

    @property
    def timeout_seconds(self) -> int:
        """Gets the timeout_seconds of this Config.

        The maximum time in seconds that a scan started from this config should run for before being automatically aborted.   # noqa: E501

        :return: The timeout_seconds of this Config.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds: int):
        """Sets the timeout_seconds of this Config.

        The maximum time in seconds that a scan started from this config should run for before being automatically aborted.   # noqa: E501

        :param timeout_seconds: The timeout_seconds of this Config.
        :type timeout_seconds: int
        """
        if timeout_seconds is None:
            raise ValueError("Invalid value for `timeout_seconds`, must not be `None`")  # noqa: E501
        if timeout_seconds is not None and timeout_seconds < 0:  # noqa: E501
            raise ValueError("Invalid value for `timeout_seconds`, must be a value greater than or equal to `0`")  # noqa: E501

        self._timeout_seconds = timeout_seconds
