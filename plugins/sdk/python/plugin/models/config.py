from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from plugin.models.base_model import Model
from plugin import util


class Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scanner_config=None, input_dir=None, output_file=None, timeout_seconds=None):  # noqa: E501
        """Config - a model defined in OpenAPI

        :param scanner_config: The scanner_config of this Config.  # noqa: E501
        :type scanner_config: str
        :param input_dir: The input_dir of this Config.  # noqa: E501
        :type input_dir: str
        :param output_file: The output_file of this Config.  # noqa: E501
        :type output_file: str
        :param timeout_seconds: The timeout_seconds of this Config.  # noqa: E501
        :type timeout_seconds: int
        """
        self.openapi_types = {
            'scanner_config': str,
            'input_dir': str,
            'output_file': str,
            'timeout_seconds': int
        }

        self.attribute_map = {
            'scanner_config': 'scannerConfig',
            'input_dir': 'inputDir',
            'output_file': 'outputFile',
            'timeout_seconds': 'timeoutSeconds'
        }

        self._scanner_config = scanner_config
        self._input_dir = input_dir
        self._output_file = output_file
        self._timeout_seconds = timeout_seconds

    @classmethod
    def from_dict(cls, dikt) -> 'Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Config of this Config.  # noqa: E501
        :rtype: Config
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scanner_config(self) -> str:
        """Gets the scanner_config of this Config.

        JSON string with the scanner configuration that should be used.   # noqa: E501

        :return: The scanner_config of this Config.
        :rtype: str
        """
        return self._scanner_config

    @scanner_config.setter
    def scanner_config(self, scanner_config: str):
        """Sets the scanner_config of this Config.

        JSON string with the scanner configuration that should be used.   # noqa: E501

        :param scanner_config: The scanner_config of this Config.
        :type scanner_config: str
        """

        self._scanner_config = scanner_config

    @property
    def input_dir(self) -> str:
        """Gets the input_dir of this Config.

        The directory which should be scanned by the scanner plugin.   # noqa: E501

        :return: The input_dir of this Config.
        :rtype: str
        """
        return self._input_dir

    @input_dir.setter
    def input_dir(self, input_dir: str):
        """Sets the input_dir of this Config.

        The directory which should be scanned by the scanner plugin.   # noqa: E501

        :param input_dir: The input_dir of this Config.
        :type input_dir: str
        """
        if input_dir is None:
            raise ValueError("Invalid value for `input_dir`, must not be `None`")  # noqa: E501

        self._input_dir = input_dir

    @property
    def output_file(self) -> str:
        """Gets the output_file of this Config.

        Path to JSON file where the scanner plugin should store its results.   # noqa: E501

        :return: The output_file of this Config.
        :rtype: str
        """
        return self._output_file

    @output_file.setter
    def output_file(self, output_file: str):
        """Sets the output_file of this Config.

        Path to JSON file where the scanner plugin should store its results.   # noqa: E501

        :param output_file: The output_file of this Config.
        :type output_file: str
        """
        if output_file is None:
            raise ValueError("Invalid value for `output_file`, must not be `None`")  # noqa: E501

        self._output_file = output_file

    @property
    def timeout_seconds(self) -> int:
        """Gets the timeout_seconds of this Config.

        The maximum time in seconds that a scan started from this scan should run for before being automatically aborted.   # noqa: E501

        :return: The timeout_seconds of this Config.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds: int):
        """Sets the timeout_seconds of this Config.

        The maximum time in seconds that a scan started from this scan should run for before being automatically aborted.   # noqa: E501

        :param timeout_seconds: The timeout_seconds of this Config.
        :type timeout_seconds: int
        """
        if timeout_seconds is None:
            raise ValueError("Invalid value for `timeout_seconds`, must not be `None`")  # noqa: E501
        if timeout_seconds is not None and timeout_seconds < 0:  # noqa: E501
            raise ValueError("Invalid value for `timeout_seconds`, must be a value greater than or equal to `0`")  # noqa: E501

        self._timeout_seconds = timeout_seconds
