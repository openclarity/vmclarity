from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from plugin.models.base_model import Model
from plugin import util


class Secret(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, file_path=None, start_line=None, end_line=None, start_column=None, end_column=None, fingerprint=None):  # noqa: E501
        """Secret - a model defined in OpenAPI

        :param description: The description of this Secret.  # noqa: E501
        :type description: str
        :param file_path: The file_path of this Secret.  # noqa: E501
        :type file_path: str
        :param start_line: The start_line of this Secret.  # noqa: E501
        :type start_line: int
        :param end_line: The end_line of this Secret.  # noqa: E501
        :type end_line: int
        :param start_column: The start_column of this Secret.  # noqa: E501
        :type start_column: int
        :param end_column: The end_column of this Secret.  # noqa: E501
        :type end_column: int
        :param fingerprint: The fingerprint of this Secret.  # noqa: E501
        :type fingerprint: str
        """
        self.openapi_types = {
            'description': str,
            'file_path': str,
            'start_line': int,
            'end_line': int,
            'start_column': int,
            'end_column': int,
            'fingerprint': str
        }

        self.attribute_map = {
            'description': 'description',
            'file_path': 'filePath',
            'start_line': 'startLine',
            'end_line': 'endLine',
            'start_column': 'startColumn',
            'end_column': 'endColumn',
            'fingerprint': 'fingerprint'
        }

        self._description = description
        self._file_path = file_path
        self._start_line = start_line
        self._end_line = end_line
        self._start_column = start_column
        self._end_column = end_column
        self._fingerprint = fingerprint

    @classmethod
    def from_dict(cls, dikt) -> 'Secret':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Secret of this Secret.  # noqa: E501
        :rtype: Secret
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this Secret.


        :return: The description of this Secret.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Secret.


        :param description: The description of this Secret.
        :type description: str
        """

        self._description = description

    @property
    def file_path(self) -> str:
        """Gets the file_path of this Secret.

        Name of the file containing the secret  # noqa: E501

        :return: The file_path of this Secret.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path: str):
        """Sets the file_path of this Secret.

        Name of the file containing the secret  # noqa: E501

        :param file_path: The file_path of this Secret.
        :type file_path: str
        """

        self._file_path = file_path

    @property
    def start_line(self) -> int:
        """Gets the start_line of this Secret.


        :return: The start_line of this Secret.
        :rtype: int
        """
        return self._start_line

    @start_line.setter
    def start_line(self, start_line: int):
        """Sets the start_line of this Secret.


        :param start_line: The start_line of this Secret.
        :type start_line: int
        """

        self._start_line = start_line

    @property
    def end_line(self) -> int:
        """Gets the end_line of this Secret.


        :return: The end_line of this Secret.
        :rtype: int
        """
        return self._end_line

    @end_line.setter
    def end_line(self, end_line: int):
        """Sets the end_line of this Secret.


        :param end_line: The end_line of this Secret.
        :type end_line: int
        """

        self._end_line = end_line

    @property
    def start_column(self) -> int:
        """Gets the start_column of this Secret.


        :return: The start_column of this Secret.
        :rtype: int
        """
        return self._start_column

    @start_column.setter
    def start_column(self, start_column: int):
        """Sets the start_column of this Secret.


        :param start_column: The start_column of this Secret.
        :type start_column: int
        """

        self._start_column = start_column

    @property
    def end_column(self) -> int:
        """Gets the end_column of this Secret.


        :return: The end_column of this Secret.
        :rtype: int
        """
        return self._end_column

    @end_column.setter
    def end_column(self, end_column: int):
        """Sets the end_column of this Secret.


        :param end_column: The end_column of this Secret.
        :type end_column: int
        """

        self._end_column = end_column

    @property
    def fingerprint(self) -> str:
        """Gets the fingerprint of this Secret.

        Note: this is not unique  # noqa: E501

        :return: The fingerprint of this Secret.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint: str):
        """Sets the fingerprint of this Secret.

        Note: this is not unique  # noqa: E501

        :param fingerprint: The fingerprint of this Secret.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint
