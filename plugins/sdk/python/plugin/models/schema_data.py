from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from plugin.models.base_model import Model
from plugin import util


class SchemaData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _schema=None, data=None):  # noqa: E501
        """SchemaData - a model defined in OpenAPI

        :param _schema: The _schema of this SchemaData.  # noqa: E501
        :type _schema: str
        :param data: The data of this SchemaData.  # noqa: E501
        :type data: str
        """
        self.openapi_types = {
            '_schema': str,
            'data': str
        }

        self.attribute_map = {
            '_schema': 'schema',
            'data': 'data'
        }

        self.__schema = _schema
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'SchemaData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SchemaData of this SchemaData.  # noqa: E501
        :rtype: SchemaData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _schema(self) -> str:
        """Gets the _schema of this SchemaData.

        Defines a schema that was used to construct the data. The schema can be used by the consumer for parsing.   # noqa: E501

        :return: The _schema of this SchemaData.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema: str):
        """Sets the _schema of this SchemaData.

        Defines a schema that was used to construct the data. The schema can be used by the consumer for parsing.   # noqa: E501

        :param _schema: The _schema of this SchemaData.
        :type _schema: str
        """
        if _schema is None:
            raise ValueError("Invalid value for `_schema`, must not be `None`")  # noqa: E501

        self.__schema = _schema

    @property
    def data(self) -> str:
        """Gets the data of this SchemaData.

        Raw data about the scan results that matches a given schema. The schema can be used by the consumer to parse this data.   # noqa: E501

        :return: The data of this SchemaData.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """Sets the data of this SchemaData.

        Raw data about the scan results that matches a given schema. The schema can be used by the consumer to parse this data.   # noqa: E501

        :param data: The data of this SchemaData.
        :type data: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data
