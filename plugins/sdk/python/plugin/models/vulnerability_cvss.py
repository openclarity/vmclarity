from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from plugin.models.base_model import Model
from plugin import util


class VulnerabilityCvss(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version=None, vector=None, base_score=None, exploitability_score=None, impact_score=None):  # noqa: E501
        """VulnerabilityCvss - a model defined in OpenAPI

        :param version: The version of this VulnerabilityCvss.  # noqa: E501
        :type version: str
        :param vector: The vector of this VulnerabilityCvss.  # noqa: E501
        :type vector: str
        :param base_score: The base_score of this VulnerabilityCvss.  # noqa: E501
        :type base_score: float
        :param exploitability_score: The exploitability_score of this VulnerabilityCvss.  # noqa: E501
        :type exploitability_score: float
        :param impact_score: The impact_score of this VulnerabilityCvss.  # noqa: E501
        :type impact_score: float
        """
        self.openapi_types = {
            'version': str,
            'vector': str,
            'base_score': float,
            'exploitability_score': float,
            'impact_score': float
        }

        self.attribute_map = {
            'version': 'version',
            'vector': 'vector',
            'base_score': 'baseScore',
            'exploitability_score': 'exploitabilityScore',
            'impact_score': 'impactScore'
        }

        self._version = version
        self._vector = vector
        self._base_score = base_score
        self._exploitability_score = exploitability_score
        self._impact_score = impact_score

    @classmethod
    def from_dict(cls, dikt) -> 'VulnerabilityCvss':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VulnerabilityCvss of this VulnerabilityCvss.  # noqa: E501
        :rtype: VulnerabilityCvss
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self) -> str:
        """Gets the version of this VulnerabilityCvss.


        :return: The version of this VulnerabilityCvss.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this VulnerabilityCvss.


        :param version: The version of this VulnerabilityCvss.
        :type version: str
        """

        self._version = version

    @property
    def vector(self) -> str:
        """Gets the vector of this VulnerabilityCvss.


        :return: The vector of this VulnerabilityCvss.
        :rtype: str
        """
        return self._vector

    @vector.setter
    def vector(self, vector: str):
        """Sets the vector of this VulnerabilityCvss.


        :param vector: The vector of this VulnerabilityCvss.
        :type vector: str
        """

        self._vector = vector

    @property
    def base_score(self) -> float:
        """Gets the base_score of this VulnerabilityCvss.


        :return: The base_score of this VulnerabilityCvss.
        :rtype: float
        """
        return self._base_score

    @base_score.setter
    def base_score(self, base_score: float):
        """Sets the base_score of this VulnerabilityCvss.


        :param base_score: The base_score of this VulnerabilityCvss.
        :type base_score: float
        """

        self._base_score = base_score

    @property
    def exploitability_score(self) -> float:
        """Gets the exploitability_score of this VulnerabilityCvss.


        :return: The exploitability_score of this VulnerabilityCvss.
        :rtype: float
        """
        return self._exploitability_score

    @exploitability_score.setter
    def exploitability_score(self, exploitability_score: float):
        """Sets the exploitability_score of this VulnerabilityCvss.


        :param exploitability_score: The exploitability_score of this VulnerabilityCvss.
        :type exploitability_score: float
        """

        self._exploitability_score = exploitability_score

    @property
    def impact_score(self) -> float:
        """Gets the impact_score of this VulnerabilityCvss.


        :return: The impact_score of this VulnerabilityCvss.
        :rtype: float
        """
        return self._impact_score

    @impact_score.setter
    def impact_score(self, impact_score: float):
        """Sets the impact_score of this VulnerabilityCvss.


        :param impact_score: The impact_score of this VulnerabilityCvss.
        :type impact_score: float
        """

        self._impact_score = impact_score
