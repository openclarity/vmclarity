from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from plugin.models.base_model import Model
from plugin.models.vm_clarity_data import VMClarityData
from plugin import util

from plugin.models.vm_clarity_data import VMClarityData  # noqa: E501

class Result(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _schema=None, raw_data=None, vmclarity=None):  # noqa: E501
        """Result - a model defined in OpenAPI

        :param _schema: The _schema of this Result.  # noqa: E501
        :type _schema: str
        :param raw_data: The raw_data of this Result.  # noqa: E501
        :type raw_data: str
        :param vmclarity: The vmclarity of this Result.  # noqa: E501
        :type vmclarity: VMClarityData
        """
        self.openapi_types = {
            '_schema': str,
            'raw_data': str,
            'vmclarity': VMClarityData
        }

        self.attribute_map = {
            '_schema': 'schema',
            'raw_data': 'rawData',
            'vmclarity': 'vmclarity'
        }

        self.__schema = _schema
        self._raw_data = raw_data
        self._vmclarity = vmclarity

    @classmethod
    def from_dict(cls, dikt) -> 'Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Result of this Result.  # noqa: E501
        :rtype: Result
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _schema(self) -> str:
        """Gets the _schema of this Result.

        Custom schema used to construct `rawData`. Consumers should know how to parse `rawData` byte stream into concrete objects.   # noqa: E501

        :return: The _schema of this Result.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema: str):
        """Sets the _schema of this Result.

        Custom schema used to construct `rawData`. Consumers should know how to parse `rawData` byte stream into concrete objects.   # noqa: E501

        :param _schema: The _schema of this Result.
        :type _schema: str
        """

        self.__schema = _schema

    @property
    def raw_data(self) -> str:
        """Gets the raw_data of this Result.

        Byte stream defining scan results based on a given schema that can be consumed by different tools and services.   # noqa: E501

        :return: The raw_data of this Result.
        :rtype: str
        """
        return self._raw_data

    @raw_data.setter
    def raw_data(self, raw_data: str):
        """Sets the raw_data of this Result.

        Byte stream defining scan results based on a given schema that can be consumed by different tools and services.   # noqa: E501

        :param raw_data: The raw_data of this Result.
        :type raw_data: str
        """

        self._raw_data = raw_data

    @property
    def vmclarity(self) -> VMClarityData:
        """Gets the vmclarity of this Result.


        :return: The vmclarity of this Result.
        :rtype: VMClarityData
        """
        return self._vmclarity

    @vmclarity.setter
    def vmclarity(self, vmclarity: VMClarityData):
        """Sets the vmclarity of this Result.


        :param vmclarity: The vmclarity of this Result.
        :type vmclarity: VMClarityData
        """
        if vmclarity is None:
            raise ValueError("Invalid value for `vmclarity`, must not be `None`")  # noqa: E501

        self._vmclarity = vmclarity
