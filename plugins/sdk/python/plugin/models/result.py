from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from plugin.models.base_model import Model
from plugin.models.schema_data import SchemaData
from plugin.models.vm_clarity_data import VMClarityData
from plugin import util

from plugin.models.schema_data import SchemaData  # noqa: E501
from plugin.models.vm_clarity_data import VMClarityData  # noqa: E501

class Result(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vmclarity=None, extra_schemas=None):  # noqa: E501
        """Result - a model defined in OpenAPI

        :param vmclarity: The vmclarity of this Result.  # noqa: E501
        :type vmclarity: VMClarityData
        :param extra_schemas: The extra_schemas of this Result.  # noqa: E501
        :type extra_schemas: Dict[str, SchemaData]
        """
        self.openapi_types = {
            'vmclarity': VMClarityData,
            'extra_schemas': Dict[str, SchemaData]
        }

        self.attribute_map = {
            'vmclarity': 'vmclarity',
            'extra_schemas': 'extraSchemas'
        }

        self._vmclarity = vmclarity
        self._extra_schemas = extra_schemas

    @classmethod
    def from_dict(cls, dikt) -> 'Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Result of this Result.  # noqa: E501
        :rtype: Result
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vmclarity(self) -> VMClarityData:
        """Gets the vmclarity of this Result.


        :return: The vmclarity of this Result.
        :rtype: VMClarityData
        """
        return self._vmclarity

    @vmclarity.setter
    def vmclarity(self, vmclarity: VMClarityData):
        """Sets the vmclarity of this Result.


        :param vmclarity: The vmclarity of this Result.
        :type vmclarity: VMClarityData
        """
        if vmclarity is None:
            raise ValueError("Invalid value for `vmclarity`, must not be `None`")  # noqa: E501

        self._vmclarity = vmclarity

    @property
    def extra_schemas(self) -> Dict[str, SchemaData]:
        """Gets the extra_schemas of this Result.

        Defines schema-specific results that third-party tools and services can consume.  For example, if the scanner plugin supports a schema such as `cyclondx-14-json`, then the SBOM result will be available as raw JSON bytes defined via https://cyclonedx.org/docs/1.4/json/ schema.   # noqa: E501

        :return: The extra_schemas of this Result.
        :rtype: Dict[str, SchemaData]
        """
        return self._extra_schemas

    @extra_schemas.setter
    def extra_schemas(self, extra_schemas: Dict[str, SchemaData]):
        """Sets the extra_schemas of this Result.

        Defines schema-specific results that third-party tools and services can consume.  For example, if the scanner plugin supports a schema such as `cyclondx-14-json`, then the SBOM result will be available as raw JSON bytes defined via https://cyclonedx.org/docs/1.4/json/ schema.   # noqa: E501

        :param extra_schemas: The extra_schemas of this Result.
        :type extra_schemas: Dict[str, SchemaData]
        """

        self._extra_schemas = extra_schemas
