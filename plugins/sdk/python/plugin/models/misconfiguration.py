from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from plugin.models.base_model import Model
from plugin.models.misconfiguration_severity import MisconfigurationSeverity
from plugin import util

from plugin.models.misconfiguration_severity import MisconfigurationSeverity  # noqa: E501

class Misconfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, location=None, category=None, message=None, description=None, remediation=None, severity=None):  # noqa: E501
        """Misconfiguration - a model defined in OpenAPI

        :param id: The id of this Misconfiguration.  # noqa: E501
        :type id: str
        :param location: The location of this Misconfiguration.  # noqa: E501
        :type location: str
        :param category: The category of this Misconfiguration.  # noqa: E501
        :type category: str
        :param message: The message of this Misconfiguration.  # noqa: E501
        :type message: str
        :param description: The description of this Misconfiguration.  # noqa: E501
        :type description: str
        :param remediation: The remediation of this Misconfiguration.  # noqa: E501
        :type remediation: str
        :param severity: The severity of this Misconfiguration.  # noqa: E501
        :type severity: MisconfigurationSeverity
        """
        self.openapi_types = {
            'id': str,
            'location': str,
            'category': str,
            'message': str,
            'description': str,
            'remediation': str,
            'severity': MisconfigurationSeverity
        }

        self.attribute_map = {
            'id': 'id',
            'location': 'location',
            'category': 'category',
            'message': 'message',
            'description': 'description',
            'remediation': 'remediation',
            'severity': 'severity'
        }

        self._id = id
        self._location = location
        self._category = category
        self._message = message
        self._description = description
        self._remediation = remediation
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt) -> 'Misconfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Misconfiguration of this Misconfiguration.  # noqa: E501
        :rtype: Misconfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Misconfiguration.

        Check or test ID, if applicable (e.g. Lynis TestID, CIS Docker Benchmark checkpoint code, etc)  # noqa: E501

        :return: The id of this Misconfiguration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Misconfiguration.

        Check or test ID, if applicable (e.g. Lynis TestID, CIS Docker Benchmark checkpoint code, etc)  # noqa: E501

        :param id: The id of this Misconfiguration.
        :type id: str
        """

        self._id = id

    @property
    def location(self) -> str:
        """Gets the location of this Misconfiguration.

        Location within the asset where the misconfiguration was recorded (e.g. filesystem path)  # noqa: E501

        :return: The location of this Misconfiguration.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this Misconfiguration.

        Location within the asset where the misconfiguration was recorded (e.g. filesystem path)  # noqa: E501

        :param location: The location of this Misconfiguration.
        :type location: str
        """

        self._location = location

    @property
    def category(self) -> str:
        """Gets the category of this Misconfiguration.

        Specifies misconfiguration impact category  # noqa: E501

        :return: The category of this Misconfiguration.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this Misconfiguration.

        Specifies misconfiguration impact category  # noqa: E501

        :param category: The category of this Misconfiguration.
        :type category: str
        """

        self._category = category

    @property
    def message(self) -> str:
        """Gets the message of this Misconfiguration.

        Short info about the misconfiguration  # noqa: E501

        :return: The message of this Misconfiguration.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Misconfiguration.

        Short info about the misconfiguration  # noqa: E501

        :param message: The message of this Misconfiguration.
        :type message: str
        """

        self._message = message

    @property
    def description(self) -> str:
        """Gets the description of this Misconfiguration.

        Additional context such as the potential impact  # noqa: E501

        :return: The description of this Misconfiguration.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Misconfiguration.

        Additional context such as the potential impact  # noqa: E501

        :param description: The description of this Misconfiguration.
        :type description: str
        """

        self._description = description

    @property
    def remediation(self) -> str:
        """Gets the remediation of this Misconfiguration.

        Possible fix for the misconfiguration  # noqa: E501

        :return: The remediation of this Misconfiguration.
        :rtype: str
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation: str):
        """Sets the remediation of this Misconfiguration.

        Possible fix for the misconfiguration  # noqa: E501

        :param remediation: The remediation of this Misconfiguration.
        :type remediation: str
        """

        self._remediation = remediation

    @property
    def severity(self) -> MisconfigurationSeverity:
        """Gets the severity of this Misconfiguration.


        :return: The severity of this Misconfiguration.
        :rtype: MisconfigurationSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity: MisconfigurationSeverity):
        """Sets the severity of this Misconfiguration.


        :param severity: The severity of this Misconfiguration.
        :type severity: MisconfigurationSeverity
        """

        self._severity = severity
