// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package plugin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post config to the scanner plugin and start scanner.
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Check the scanner plugin's health.
	// (GET /healthz)
	GetHealthz(ctx echo.Context) error
	// Get metadata from the scanner plugin.
	// (GET /metadata)
	GetMetadata(ctx echo.Context) error
	// Get the status of the scanner.
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Stop the scanner.
	// (POST /stop)
	PostStop(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetadata(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// PostStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostStop(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStop(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/metadata", wrapper.GetMetadata)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.POST(baseURL+"/stop", wrapper.PostStop)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"E/67vGNDCdNGjcXt+3r9nwAAAP//cvKrQVYrAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
